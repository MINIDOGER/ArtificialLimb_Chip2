
ArtificialLimb_Chip2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b880  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800ba50  0800ba50  0000ca50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf14  0800bf14  0000ee38  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf14  0800bf14  0000cf14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf1c  0800bf1c  0000ee38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf1c  0800bf1c  0000cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf20  0800bf20  0000cf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001e38  20000000  0800bf24  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000811c  20001e38  0800dd5c  0000ee38  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009f54  0800dd5c  0000ef54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ee38  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc44  00000000  00000000  0000ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f3  00000000  00000000  0001baac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0001dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000782  00000000  00000000  0001e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002280e  00000000  00000000  0001ef02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee43  00000000  00000000  00041710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb485  00000000  00000000  00050553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b9d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e94  00000000  00000000  0011ba1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011f8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001e38 	.word	0x20001e38
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba38 	.word	0x0800ba38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001e3c 	.word	0x20001e3c
 800020c:	0800ba38 	.word	0x0800ba38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <MX_DMA_Init+0xa8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a26      	ldr	r2, [pc, #152]	@ (80010cc <MX_DMA_Init+0xa8>)
 8001034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <MX_DMA_Init+0xa8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <MX_DMA_Init+0xa8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a1f      	ldr	r2, [pc, #124]	@ (80010cc <MX_DMA_Init+0xa8>)
 8001050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_DMA_Init+0xa8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2101      	movs	r1, #1
 8001066:	200b      	movs	r0, #11
 8001068:	f002 fce9 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800106c:	200b      	movs	r0, #11
 800106e:	f002 fd02 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	200c      	movs	r0, #12
 8001078:	f002 fce1 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800107c:	200c      	movs	r0, #12
 800107e:	f002 fcfa 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2101      	movs	r1, #1
 8001086:	200d      	movs	r0, #13
 8001088:	f002 fcd9 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800108c:	200d      	movs	r0, #13
 800108e:	f002 fcf2 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2011      	movs	r0, #17
 8001098:	f002 fcd1 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800109c:	2011      	movs	r0, #17
 800109e:	f002 fcea 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	2039      	movs	r0, #57	@ 0x39
 80010a8:	f002 fcc9 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010ac:	2039      	movs	r0, #57	@ 0x39
 80010ae:	f002 fce2 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2101      	movs	r1, #1
 80010b6:	203a      	movs	r0, #58	@ 0x3a
 80010b8:	f002 fcc1 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010bc:	203a      	movs	r0, #58	@ 0x3a
 80010be:	f002 fcda 	bl	8003a76 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_GPIO_Init+0x84>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a1d      	ldr	r2, [pc, #116]	@ (8001154 <MX_GPIO_Init+0x84>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_GPIO_Init+0x84>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_GPIO_Init+0x84>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <MX_GPIO_Init+0x84>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_GPIO_Init+0x84>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_GPIO_Init+0x84>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <MX_GPIO_Init+0x84>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <MX_GPIO_Init+0x84>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_GPIO_Init+0x84>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <MX_GPIO_Init+0x84>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_GPIO_Init+0x84>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f002 fafd 	bl	800375c <HAL_Init>

  /* USER CODE BEGIN Init */
  DataLeftBufAng.HexBufSumAng[0] = 0x62;
 8001162:	4b9f      	ldr	r3, [pc, #636]	@ (80013e0 <main+0x288>)
 8001164:	2262      	movs	r2, #98	@ 0x62
 8001166:	701a      	strb	r2, [r3, #0]
  DataLeftBufAng.HexBufSumAng[13] = 0x63;
 8001168:	4b9d      	ldr	r3, [pc, #628]	@ (80013e0 <main+0x288>)
 800116a:	2263      	movs	r2, #99	@ 0x63
 800116c:	735a      	strb	r2, [r3, #13]
  DataLeftBufAng.HexBufSumFoot[0] = 0x64;
 800116e:	4b9c      	ldr	r3, [pc, #624]	@ (80013e0 <main+0x288>)
 8001170:	2264      	movs	r2, #100	@ 0x64
 8001172:	739a      	strb	r2, [r3, #14]
  DataLeftBufAng.HexBufSumFoot[33] = 0x65;
 8001174:	4b9a      	ldr	r3, [pc, #616]	@ (80013e0 <main+0x288>)
 8001176:	2265      	movs	r2, #101	@ 0x65
 8001178:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  DataLeftBufAng.HexBufDis[0] = 0x66;
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <main+0x288>)
 800117e:	2266      	movs	r2, #102	@ 0x66
 8001180:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  DataLeftBufAng.HexBufDis[1] = 0x01;
 8001184:	4b96      	ldr	r3, [pc, #600]	@ (80013e0 <main+0x288>)
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  DataLeftBufAng.HexBufDis[2] = 0x67;
 800118c:	4b94      	ldr	r3, [pc, #592]	@ (80013e0 <main+0x288>)
 800118e:	2267      	movs	r2, #103	@ 0x67
 8001190:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f9ac 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f7ff ff9a 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800119c:	f7ff ff42 	bl	8001024 <MX_DMA_Init>
  MX_UART4_Init();
 80011a0:	f001 fed8 	bl	8002f54 <MX_UART4_Init>
  MX_UART5_Init();
 80011a4:	f001 ff00 	bl	8002fa8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80011a8:	f001 ff28 	bl	8002ffc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80011ac:	f001 ff7a 	bl	80030a4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80011b0:	f001 ff4e 	bl	8003050 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80011b4:	f001 ffa0 	bl	80030f8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdout, NULL, _IONBF, 0); //输出缓冲
 80011b8:	4b8a      	ldr	r3, [pc, #552]	@ (80013e4 <main+0x28c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6898      	ldr	r0, [r3, #8]
 80011be:	2300      	movs	r3, #0
 80011c0:	2202      	movs	r2, #2
 80011c2:	2100      	movs	r1, #0
 80011c4:	f006 fbe4 	bl	8007990 <setvbuf>

	if(HAL_UART_Receive_IT(&huart1, &cRx.cRx_1, 1) != HAL_OK)
 80011c8:	2201      	movs	r2, #1
 80011ca:	4987      	ldr	r1, [pc, #540]	@ (80013e8 <main+0x290>)
 80011cc:	4887      	ldr	r0, [pc, #540]	@ (80013ec <main+0x294>)
 80011ce:	f004 f894 	bl	80052fa <HAL_UART_Receive_IT>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <main+0x94>
	{
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 80011d8:	4b84      	ldr	r3, [pc, #528]	@ (80013ec <main+0x294>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	4b83      	ldr	r3, [pc, #524]	@ (80013ec <main+0x294>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	615a      	str	r2, [r3, #20]
		Error_Handler();
 80011e8:	f000 ffba 	bl	8002160 <Error_Handler>
		//printf("[info]Error_huart1_IT\r\n");
	}

	if(HAL_UART_Receive_IT(&huart2, &cRx.cRx_2, 1) != HAL_OK)
 80011ec:	2201      	movs	r2, #1
 80011ee:	4980      	ldr	r1, [pc, #512]	@ (80013f0 <main+0x298>)
 80011f0:	4880      	ldr	r0, [pc, #512]	@ (80013f4 <main+0x29c>)
 80011f2:	f004 f882 	bl	80052fa <HAL_UART_Receive_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d009      	beq.n	8001210 <main+0xb8>
	{
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80011fc:	4b7d      	ldr	r3, [pc, #500]	@ (80013f4 <main+0x29c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	4b7c      	ldr	r3, [pc, #496]	@ (80013f4 <main+0x29c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	615a      	str	r2, [r3, #20]
		Error_Handler();
 800120c:	f000 ffa8 	bl	8002160 <Error_Handler>
//	{
//		__HAL_UART_ENABLE_IT(&huart5, UART_IT_ERR);
//		Error_Handler();
//		//printf("[info]Error_huart5_IT\r\n");
//	}
	if(HAL_UART_Receive_IT(&huart6, &cRx.cRx_6, 1) != HAL_OK)
 8001210:	2201      	movs	r2, #1
 8001212:	4979      	ldr	r1, [pc, #484]	@ (80013f8 <main+0x2a0>)
 8001214:	4879      	ldr	r0, [pc, #484]	@ (80013fc <main+0x2a4>)
 8001216:	f004 f870 	bl	80052fa <HAL_UART_Receive_IT>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <main+0xdc>
	{
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_ERR);
 8001220:	4b76      	ldr	r3, [pc, #472]	@ (80013fc <main+0x2a4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	4b75      	ldr	r3, [pc, #468]	@ (80013fc <main+0x2a4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	615a      	str	r2, [r3, #20]
		Error_Handler();
 8001230:	f000 ff96 	bl	8002160 <Error_Handler>
//	// 立即就要打开DMA接收
//	// 不然DMA没有提前准备，第一次接收的数据是读取不出来的
//	HAL_UART_Receive_DMA(&huart1, p_IsToReceive1, MAX_RX_LEN);

	// 开启串口3空闲中断
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8001234:	4b72      	ldr	r3, [pc, #456]	@ (8001400 <main+0x2a8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	4b71      	ldr	r3, [pc, #452]	@ (8001400 <main+0x2a8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0210 	orr.w	r2, r2, #16
 8001242:	60da      	str	r2, [r3, #12]
//	__HAL_DMA_ENABLE_IT(&hdma_usart2_tx, DMA_IT_TC);
	__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b6d      	ldr	r3, [pc, #436]	@ (8001400 <main+0x2a8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4b6b      	ldr	r3, [pc, #428]	@ (8001400 <main+0x2a8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_Receive_DMA(&huart3, p_IsToReceive3, MAX_RX_LEN);
 800125a:	4b6a      	ldr	r3, [pc, #424]	@ (8001404 <main+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001262:	4619      	mov	r1, r3
 8001264:	4866      	ldr	r0, [pc, #408]	@ (8001400 <main+0x2a8>)
 8001266:	f004 f8f7 	bl	8005458 <HAL_UART_Receive_DMA>

	// 开启串口4空闲中断
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 800126a:	4b67      	ldr	r3, [pc, #412]	@ (8001408 <main+0x2b0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b65      	ldr	r3, [pc, #404]	@ (8001408 <main+0x2b0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0210 	orr.w	r2, r2, #16
 8001278:	60da      	str	r2, [r3, #12]
//	__HAL_DMA_ENABLE_IT(&hdma_usart2_tx, DMA_IT_TC);
	__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b62      	ldr	r3, [pc, #392]	@ (8001408 <main+0x2b0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b60      	ldr	r3, [pc, #384]	@ (8001408 <main+0x2b0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
	HAL_UART_Receive_DMA(&huart4, p_IsToReceive4, MAX_RX_LEN);
 8001290:	4b5e      	ldr	r3, [pc, #376]	@ (800140c <main+0x2b4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001298:	4619      	mov	r1, r3
 800129a:	485b      	ldr	r0, [pc, #364]	@ (8001408 <main+0x2b0>)
 800129c:	f004 f8dc 	bl	8005458 <HAL_UART_Receive_DMA>

	// 开启串口5空闲中断
	__HAL_UART_ENABLE_IT(&huart5, UART_IT_IDLE);
 80012a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001410 <main+0x2b8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001410 <main+0x2b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	60da      	str	r2, [r3, #12]
//	__HAL_DMA_ENABLE_IT(&hdma_usart2_tx, DMA_IT_TC);
	__HAL_UART_CLEAR_IDLEFLAG(&huart5);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b56      	ldr	r3, [pc, #344]	@ (8001410 <main+0x2b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b54      	ldr	r3, [pc, #336]	@ (8001410 <main+0x2b8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Receive_DMA(&huart5, p_IsToReceive5, MAX_RX_LEN);
 80012c6:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <main+0x2bc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ce:	4619      	mov	r1, r3
 80012d0:	484f      	ldr	r0, [pc, #316]	@ (8001410 <main+0x2b8>)
 80012d2:	f004 f8c1 	bl	8005458 <HAL_UART_Receive_DMA>
////	__HAL_DMA_ENABLE_IT(&hdma_usart2_tx, DMA_IT_TC);
//	__HAL_UART_CLEAR_IDLEFLAG(&huart6);
//	HAL_UART_Receive_DMA(&huart6, p_IsToReceive6, MAX_RX_LEN);


	low_pass_filter_init();
 80012d6:	f001 fd19 	bl	8002d0c <low_pass_filter_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if(Mode == 1)
 80012da:	4b4f      	ldr	r3, [pc, #316]	@ (8001418 <main+0x2c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	f040 80df 	bne.w	80014a2 <main+0x34a>
		{
			if(ModeFlag == 1 && FlagSend == 1){
 80012e4:	4b4d      	ldr	r3, [pc, #308]	@ (800141c <main+0x2c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	f040 80d2 	bne.w	8001492 <main+0x33a>
 80012ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001420 <main+0x2c8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	f040 80cd 	bne.w	8001492 <main+0x33a>
				for(int i=0;i<3;i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fc:	e069      	b.n	80013d2 <main+0x27a>
				{
					switch(i)
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	2b02      	cmp	r3, #2
 8001302:	d044      	beq.n	800138e <main+0x236>
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	2b02      	cmp	r3, #2
 8001308:	dc5f      	bgt.n	80013ca <main+0x272>
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <main+0x1c0>
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	2b01      	cmp	r3, #1
 8001314:	d01e      	beq.n	8001354 <main+0x1fc>
						{
							DataLeftBufAng.HexBufSumAng[4*i+j+1] = DataLeftBufAng.DataUnionBufSend.HexBuf[j];
						}
						break;
					default:
						break;
 8001316:	e058      	b.n	80013ca <main+0x272>
						DataLeftBufAng.DataUnionBufSend.FloatBuf = Left.Hip.AngxCal;
 8001318:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <main+0x2cc>)
 800131a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800131e:	f503 63f9 	add.w	r3, r3, #1992	@ 0x7c8
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2e      	ldr	r2, [pc, #184]	@ (80013e0 <main+0x288>)
 8001326:	6453      	str	r3, [r2, #68]	@ 0x44
						for(int j=0;j<4;j++)
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	e00e      	b.n	800134c <main+0x1f4>
							DataLeftBufAng.HexBufSumAng[4*i+j+1] = DataLeftBufAng.DataUnionBufSend.HexBuf[j];
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	4413      	add	r3, r2
 8001336:	3301      	adds	r3, #1
 8001338:	4929      	ldr	r1, [pc, #164]	@ (80013e0 <main+0x288>)
 800133a:	6a3a      	ldr	r2, [r7, #32]
 800133c:	440a      	add	r2, r1
 800133e:	3244      	adds	r2, #68	@ 0x44
 8001340:	7811      	ldrb	r1, [r2, #0]
 8001342:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <main+0x288>)
 8001344:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<4;j++)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	3301      	adds	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b03      	cmp	r3, #3
 8001350:	dded      	ble.n	800132e <main+0x1d6>
						break;
 8001352:	e03b      	b.n	80013cc <main+0x274>
						DataLeftBufAng.DataUnionBufSend.FloatBuf = Left.Knee.AngxCal;
 8001354:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <main+0x2cc>)
 8001356:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 800135a:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800135e:	4a20      	ldr	r2, [pc, #128]	@ (80013e0 <main+0x288>)
 8001360:	6453      	str	r3, [r2, #68]	@ 0x44
						for(int j=0;j<4;j++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e00e      	b.n	8001386 <main+0x22e>
							DataLeftBufAng.HexBufSumAng[4*i+j+1] = DataLeftBufAng.DataUnionBufSend.HexBuf[j];
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	009a      	lsls	r2, r3, #2
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	4413      	add	r3, r2
 8001370:	3301      	adds	r3, #1
 8001372:	491b      	ldr	r1, [pc, #108]	@ (80013e0 <main+0x288>)
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	440a      	add	r2, r1
 8001378:	3244      	adds	r2, #68	@ 0x44
 800137a:	7811      	ldrb	r1, [r2, #0]
 800137c:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <main+0x288>)
 800137e:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<4;j++)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3301      	adds	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	2b03      	cmp	r3, #3
 800138a:	dded      	ble.n	8001368 <main+0x210>
						break;
 800138c:	e01e      	b.n	80013cc <main+0x274>
						DataLeftBufAng.DataUnionBufSend.FloatBuf = Left.Ankle.AngxCal;
 800138e:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <main+0x2cc>)
 8001390:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8001394:	f603 7398 	addw	r3, r3, #3992	@ 0xf98
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <main+0x288>)
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
						for(int j=0;j<4;j++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	e00e      	b.n	80013c2 <main+0x26a>
							DataLeftBufAng.HexBufSumAng[4*i+j+1] = DataLeftBufAng.DataUnionBufSend.HexBuf[j];
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	009a      	lsls	r2, r3, #2
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4413      	add	r3, r2
 80013ac:	3301      	adds	r3, #1
 80013ae:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <main+0x288>)
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	440a      	add	r2, r1
 80013b4:	3244      	adds	r2, #68	@ 0x44
 80013b6:	7811      	ldrb	r1, [r2, #0]
 80013b8:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <main+0x288>)
 80013ba:	54d1      	strb	r1, [r2, r3]
						for(int j=0;j<4;j++)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	3301      	adds	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	dded      	ble.n	80013a4 <main+0x24c>
						break;
 80013c8:	e000      	b.n	80013cc <main+0x274>
						break;
 80013ca:	bf00      	nop
				for(int i=0;i<3;i++)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	3301      	adds	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	dd92      	ble.n	80012fe <main+0x1a6>
					}
				}
				for(int i=0;i<8;i++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e04a      	b.n	8001474 <main+0x31c>
 80013de:	bf00      	nop
 80013e0:	20008df8 	.word	0x20008df8
 80013e4:	20001c7c 	.word	0x20001c7c
 80013e8:	20008ee0 	.word	0x20008ee0
 80013ec:	20009ab4 	.word	0x20009ab4
 80013f0:	20008ee1 	.word	0x20008ee1
 80013f4:	20009af8 	.word	0x20009af8
 80013f8:	20008ee5 	.word	0x20008ee5
 80013fc:	20009b80 	.word	0x20009b80
 8001400:	20009b3c 	.word	0x20009b3c
 8001404:	20001c3c 	.word	0x20001c3c
 8001408:	20009a2c 	.word	0x20009a2c
 800140c:	20001c44 	.word	0x20001c44
 8001410:	20009a70 	.word	0x20009a70
 8001414:	20001c4c 	.word	0x20001c4c
 8001418:	20008fec 	.word	0x20008fec
 800141c:	20008ff0 	.word	0x20008ff0
 8001420:	20008ff4 	.word	0x20008ff4
 8001424:	20001e58 	.word	0x20001e58
				{
					DataLeftBufFoot.DataUnionBufSend.FloatBuf = DataLeftBufFoot.Data[DataLeftBufFoot.Point[i]];
 8001428:	4a2a      	ldr	r2, [pc, #168]	@ (80014d4 <main+0x37c>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3332      	adds	r3, #50	@ 0x32
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <main+0x37c>)
 8001434:	3312      	adds	r3, #18
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a25      	ldr	r2, [pc, #148]	@ (80014d4 <main+0x37c>)
 800143e:	6453      	str	r3, [r2, #68]	@ 0x44
					for(int j=0;j<4;j++)
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	e010      	b.n	8001468 <main+0x310>
					{
						DataLeftBufFoot.HexBufSumFoot[4*i+j+1] = DataLeftBufFoot.DataUnionBufSend.HexBuf[j];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	009a      	lsls	r2, r3, #2
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4413      	add	r3, r2
 800144e:	3301      	adds	r3, #1
 8001450:	4920      	ldr	r1, [pc, #128]	@ (80014d4 <main+0x37c>)
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	440a      	add	r2, r1
 8001456:	3244      	adds	r2, #68	@ 0x44
 8001458:	7811      	ldrb	r1, [r2, #0]
 800145a:	4a1e      	ldr	r2, [pc, #120]	@ (80014d4 <main+0x37c>)
 800145c:	4413      	add	r3, r2
 800145e:	460a      	mov	r2, r1
 8001460:	739a      	strb	r2, [r3, #14]
					for(int j=0;j<4;j++)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3301      	adds	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	2b03      	cmp	r3, #3
 800146c:	ddeb      	ble.n	8001446 <main+0x2ee>
				for(int i=0;i<8;i++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2b07      	cmp	r3, #7
 8001478:	ddd6      	ble.n	8001428 <main+0x2d0>
					}
				}

				DMA_USART2_Tx_Data(DataLeftBufAng.HexBufSumAng,14);
 800147a:	210e      	movs	r1, #14
 800147c:	4816      	ldr	r0, [pc, #88]	@ (80014d8 <main+0x380>)
 800147e:	f001 f99b 	bl	80027b8 <DMA_USART2_Tx_Data>

				DMA_USART2_Tx_Data(DataLeftBufFoot.HexBufSumFoot,34);
 8001482:	2122      	movs	r1, #34	@ 0x22
 8001484:	4815      	ldr	r0, [pc, #84]	@ (80014dc <main+0x384>)
 8001486:	f001 f997 	bl	80027b8 <DMA_USART2_Tx_Data>
	//			for(int i=0;i<14;i++)
	//			{
	//				HAL_UART_Transmit(&huart2,&DataLeftBufAng.HexBufSumAng[i],1,0xFFFF);
	//			}

				FlagSend = 0;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <main+0x388>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e01c      	b.n	80014cc <main+0x374>


			}
			else if(ModeFlag == 0){
 8001492:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <main+0x38c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <main+0x374>
//				Normal.State = 1;
				ModeFlag = 1;
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <main+0x38c>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e014      	b.n	80014cc <main+0x374>
//				if(ModePrint == 2){
//					Mode = 2;
//				}
			}
		}
		else if(Mode == 2)
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <main+0x390>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d010      	beq.n	80014cc <main+0x374>
//			for(int i=0;i<14;i++)
//			{
//				HAL_UART_Transmit(&huart2,&DataLeftBufAng.HexBufSumAng[i],1,0xFFFF);
//			}
		}
		else if(Mode == 0)
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <main+0x390>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <main+0x374>
		{
			ModeFlag = 0;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <main+0x38c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
			Normal.State = 0;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <main+0x394>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714
//				DMA_usart2_printf("%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",
//						Right.Hip.AngxCal,Right.Knee.AngxCal,Right.Ankle.AngxCal,
//						Right.Hip.AngAccx,Right.Knee.AngAccx,Right.Ankle.AngAccx,
//						Right.Hip.Accx,Right.Knee.Accx,Right.Ankle.Accx);
//				HAL_Delay(Delay);
				if(Mode != 0)break;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <main+0x390>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d100      	bne.n	80014ca <main+0x372>
 80014c8:	e7fa      	b.n	80014c0 <main+0x368>
 80014ca:	bf00      	nop
		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(2);
 80014cc:	2002      	movs	r0, #2
 80014ce:	f002 f9b7 	bl	8003840 <HAL_Delay>
		if(Mode == 1)
 80014d2:	e702      	b.n	80012da <main+0x182>
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20008df8 	.word	0x20008df8
 80014dc:	2000000e 	.word	0x2000000e
 80014e0:	20008ff4 	.word	0x20008ff4
 80014e4:	20008ff0 	.word	0x20008ff0
 80014e8:	20008fec 	.word	0x20008fec
 80014ec:	200000f0 	.word	0x200000f0

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	@ 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2234      	movs	r2, #52	@ 0x34
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fc1e 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <SystemClock_Config+0xdc>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	4a2b      	ldr	r2, [pc, #172]	@ (80015cc <SystemClock_Config+0xdc>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	@ 0x40
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <SystemClock_Config+0xdc>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <SystemClock_Config+0xe0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a25      	ldr	r2, [pc, #148]	@ (80015d0 <SystemClock_Config+0xe0>)
 800153a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b23      	ldr	r3, [pc, #140]	@ (80015d0 <SystemClock_Config+0xe0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154c:	2302      	movs	r3, #2
 800154e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001554:	2310      	movs	r3, #16
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001558:	2302      	movs	r3, #2
 800155a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155c:	2300      	movs	r3, #0
 800155e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001560:	2308      	movs	r3, #8
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001564:	23b4      	movs	r3, #180	@ 0xb4
 8001566:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001568:	2302      	movs	r3, #2
 800156a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001570:	2302      	movs	r3, #2
 8001572:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fb41 	bl	8004c00 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001584:	f000 fdec 	bl	8002160 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001588:	f003 f826 	bl	80045d8 <HAL_PWREx_EnableOverDrive>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001592:	f000 fde5 	bl	8002160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	2105      	movs	r1, #5
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 f85f 	bl	8004678 <HAL_RCC_ClockConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80015c0:	f000 fdce 	bl	8002160 <Error_Handler>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3750      	adds	r7, #80	@ 0x50
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015dc:	1d39      	adds	r1, r7, #4
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	2201      	movs	r2, #1
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <__io_putchar+0x20>)
 80015e6:	f003 fdf6 	bl	80051d6 <HAL_UART_Transmit>
	return ch;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20009ab4 	.word	0x20009ab4

080015f8 <HAL_UART_RxCpltCallback>:
 * 参数		| 介绍
 * ---------+--------------------------------------
 * huart	| 产生中断的串口
*******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a92      	ldr	r2, [pc, #584]	@ (8001850 <HAL_UART_RxCpltCallback+0x258>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d156      	bne.n	80016b8 <HAL_UART_RxCpltCallback+0xc0>
//			Modbus.ModbusCounter = 0;
//		}

//		激光距离传感器解码方案2
//		DMA_USART2_Tx_Data(cRx.cRx_1,1);
		Modbus.ModbusData[Modbus.ModbusCounter] = cRx.cRx_1;
 800160a:	4b92      	ldr	r3, [pc, #584]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4a92      	ldr	r2, [pc, #584]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 8001610:	7811      	ldrb	r1, [r2, #0]
 8001612:	4a90      	ldr	r2, [pc, #576]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001614:	54d1      	strb	r1, [r2, r3]
//		huart2_printf("%d",Modbus.ModbusCounter);
		if(Modbus.ModbusData[0] == 0x50 && Modbus.ModbusData[1] == 0x03){
 8001616:	4b8f      	ldr	r3, [pc, #572]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b50      	cmp	r3, #80	@ 0x50
 800161c:	d109      	bne.n	8001632 <HAL_UART_RxCpltCallback+0x3a>
 800161e:	4b8d      	ldr	r3, [pc, #564]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d105      	bne.n	8001632 <HAL_UART_RxCpltCallback+0x3a>
			Modbus.ModbusCounter++;
 8001626:	4b8b      	ldr	r3, [pc, #556]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	4a89      	ldr	r2, [pc, #548]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800162e:	6093      	str	r3, [r2, #8]
 8001630:	e00a      	b.n	8001648 <HAL_UART_RxCpltCallback+0x50>
		}
		else{
			Modbus.ModbusCounter = 0;
 8001632:	4b88      	ldr	r3, [pc, #544]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
			Modbus.ModbusData[0] = 0x01;
 8001638:	4b86      	ldr	r3, [pc, #536]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
			Modbus.ModbusData[1] = 0x03;
 800163e:	4b85      	ldr	r3, [pc, #532]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001640:	2203      	movs	r2, #3
 8001642:	705a      	strb	r2, [r3, #1]
			ModbusRead();
 8001644:	f000 fd68 	bl	8002118 <ModbusRead>
		}

		if(Modbus.ModbusCounter == 7){
 8001648:	4b82      	ldr	r3, [pc, #520]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d11f      	bne.n	8001690 <HAL_UART_RxCpltCallback+0x98>
//			DMA_USART2_Tx_Data(Modbus.ModbusData,7);
			Modbus.ModbusDataDEC = (short) (Modbus.ModbusData[3] << 8) | Modbus.ModbusData[4];
 8001650:	4b80      	ldr	r3, [pc, #512]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001652:	78db      	ldrb	r3, [r3, #3]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b7e      	ldr	r3, [pc, #504]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b7b      	ldr	r3, [pc, #492]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001666:	819a      	strh	r2, [r3, #12]
//			huart2_printf("%d\n",Modbus.ModbusDataDEC);

			if(Modbus.ModbusDataDEC < 20){
 8001668:	4b7a      	ldr	r3, [pc, #488]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800166a:	899b      	ldrh	r3, [r3, #12]
 800166c:	2b13      	cmp	r3, #19
 800166e:	d803      	bhi.n	8001678 <HAL_UART_RxCpltCallback+0x80>
				Modbus.ModbusFlag = 1;
 8001670:	4b78      	ldr	r3, [pc, #480]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001672:	2201      	movs	r2, #1
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	e002      	b.n	800167e <HAL_UART_RxCpltCallback+0x86>
			}
			else{
				Modbus.ModbusFlag = 0;
 8001678:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
			}

			Modbus.ModbusCounter = 0;
 800167e:	4b75      	ldr	r3, [pc, #468]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
			Modbus.ModbusData[0] = 0x01;
 8001684:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
			Modbus.ModbusData[1] = 0x03;
 800168a:	4b72      	ldr	r3, [pc, #456]	@ (8001854 <HAL_UART_RxCpltCallback+0x25c>)
 800168c:	2203      	movs	r2, #3
 800168e:	705a      	strb	r2, [r3, #1]
		}



		if(HAL_UART_Receive_IT(&huart1, &cRx.cRx_1, 1) != HAL_OK)
 8001690:	2201      	movs	r2, #1
 8001692:	4971      	ldr	r1, [pc, #452]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 8001694:	4871      	ldr	r0, [pc, #452]	@ (800185c <HAL_UART_RxCpltCallback+0x264>)
 8001696:	f003 fe30 	bl	80052fa <HAL_UART_Receive_IT>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 81a0 	beq.w	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
		{
			__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 80016a2:	4b6e      	ldr	r3, [pc, #440]	@ (800185c <HAL_UART_RxCpltCallback+0x264>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	4b6c      	ldr	r3, [pc, #432]	@ (800185c <HAL_UART_RxCpltCallback+0x264>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	615a      	str	r2, [r3, #20]
			Error_Handler();
 80016b2:	f000 fd55 	bl	8002160 <Error_Handler>
			__HAL_UART_ENABLE_IT(&huart6, UART_IT_ERR);
			Error_Handler();
			printf("[info]Error_huart6_IT\r\n");
		}
	}
}
 80016b6:	e194      	b.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
	else if(huart->Instance == USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a68      	ldr	r2, [pc, #416]	@ (8001860 <HAL_UART_RxCpltCallback+0x268>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	f040 80de 	bne.w	8001880 <HAL_UART_RxCpltCallback+0x288>
		if(cRx.cRx_2 == '\n')
 80016c4:	4b64      	ldr	r3, [pc, #400]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 80016c6:	785b      	ldrb	r3, [r3, #1]
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	f040 809b 	bne.w	8001804 <HAL_UART_RxCpltCallback+0x20c>
			cRx.rxBuf_2[cRx.rxBufCursor_2] = '\0';
 80016ce:	4b62      	ldr	r3, [pc, #392]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 80016d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016d4:	4a60      	ldr	r2, [pc, #384]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 80016d6:	4413      	add	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	719a      	strb	r2, [r3, #6]
			if(sscanf((const char*)cRx.rxBuf_2, "%c%c%f", &operator1, &operator2, &operand) == 3)
 80016dc:	f107 010a 	add.w	r1, r7, #10
 80016e0:	f107 020b 	add.w	r2, r7, #11
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	460b      	mov	r3, r1
 80016ec:	495d      	ldr	r1, [pc, #372]	@ (8001864 <HAL_UART_RxCpltCallback+0x26c>)
 80016ee:	485e      	ldr	r0, [pc, #376]	@ (8001868 <HAL_UART_RxCpltCallback+0x270>)
 80016f0:	f006 fa22 	bl	8007b38 <siscanf>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d17f      	bne.n	80017fa <HAL_UART_RxCpltCallback+0x202>
				if(operator1 == 'S' && operator2 == '=')
 80016fa:	7afb      	ldrb	r3, [r7, #11]
 80016fc:	2b53      	cmp	r3, #83	@ 0x53
 80016fe:	d10a      	bne.n	8001716 <HAL_UART_RxCpltCallback+0x11e>
 8001700:	7abb      	ldrb	r3, [r7, #10]
 8001702:	2b3d      	cmp	r3, #61	@ 0x3d
 8001704:	d107      	bne.n	8001716 <HAL_UART_RxCpltCallback+0x11e>
					Mode = (int)operand;
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170e:	ee17 2a90 	vmov	r2, s15
 8001712:	4b56      	ldr	r3, [pc, #344]	@ (800186c <HAL_UART_RxCpltCallback+0x274>)
 8001714:	601a      	str	r2, [r3, #0]
				switch(operator1)
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	2b4d      	cmp	r3, #77	@ 0x4d
 800171a:	d16d      	bne.n	80017f8 <HAL_UART_RxCpltCallback+0x200>
					switch(operator2)
 800171c:	7abb      	ldrb	r3, [r7, #10]
 800171e:	2b5a      	cmp	r3, #90	@ 0x5a
 8001720:	d006      	beq.n	8001730 <HAL_UART_RxCpltCallback+0x138>
 8001722:	2b5a      	cmp	r3, #90	@ 0x5a
 8001724:	dc64      	bgt.n	80017f0 <HAL_UART_RxCpltCallback+0x1f8>
 8001726:	2b42      	cmp	r3, #66	@ 0x42
 8001728:	d056      	beq.n	80017d8 <HAL_UART_RxCpltCallback+0x1e0>
 800172a:	2b50      	cmp	r3, #80	@ 0x50
 800172c:	d057      	beq.n	80017de <HAL_UART_RxCpltCallback+0x1e6>
						break;
 800172e:	e05f      	b.n	80017f0 <HAL_UART_RxCpltCallback+0x1f8>
						if(operand == 1){
 8001730:	edd7 7a03 	vldr	s15, [r7, #12]
 8001734:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001738:	eef4 7a47 	vcmp.f32	s15, s14
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d126      	bne.n	8001790 <HAL_UART_RxCpltCallback+0x198>
							Left.Hip.AngxZero = Left.Hip.Angx;
 8001742:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 8001744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001748:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 8001750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001754:	f603 4324 	addw	r3, r3, #3108	@ 0xc24
 8001758:	601a      	str	r2, [r3, #0]
							Left.Knee.AngxZero = Left.Knee.Angx;
 800175a:	4b45      	ldr	r3, [pc, #276]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 800175c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001760:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 8001768:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800176c:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8001770:	601a      	str	r2, [r3, #0]
							Left.Ankle.AngxZero = Left.Ankle.Angx;
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 8001774:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8001778:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800177c:	4a3c      	ldr	r2, [pc, #240]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 800177e:	f502 42a0 	add.w	r2, r2, #20480	@ 0x5000
 8001782:	f8c2 33f4 	str.w	r3, [r2, #1012]	@ 0x3f4
							Left.WAIST.AccxZero = Left.WAIST.Angx;
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a39      	ldr	r2, [pc, #228]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 800178c:	6253      	str	r3, [r2, #36]	@ 0x24
						break;
 800178e:	e031      	b.n	80017f4 <HAL_UART_RxCpltCallback+0x1fc>
						else if(operand == 0){
 8001790:	edd7 7a03 	vldr	s15, [r7, #12]
 8001794:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	d12a      	bne.n	80017f4 <HAL_UART_RxCpltCallback+0x1fc>
							Left.Hip.AngxZero = 0;
 800179e:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 80017a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a4:	f603 4324 	addw	r3, r3, #3108	@ 0xc24
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
							Left.Knee.AngxZero = 0;
 80017ae:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 80017b0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80017b4:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
							Left.Ankle.AngxZero = 0;
 80017be:	4b2c      	ldr	r3, [pc, #176]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 80017c0:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 80017c4:	461a      	mov	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f8c2 33f4 	str.w	r3, [r2, #1012]	@ 0x3f4
							Left.WAIST.AccxZero = 0;
 80017ce:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_UART_RxCpltCallback+0x278>)
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
						break;
 80017d6:	e00d      	b.n	80017f4 <HAL_UART_RxCpltCallback+0x1fc>
						ModbusRead();
 80017d8:	f000 fc9e 	bl	8002118 <ModbusRead>
						break;
 80017dc:	e00b      	b.n	80017f6 <HAL_UART_RxCpltCallback+0x1fe>
						ModePrint = (int)operand;
 80017de:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e6:	ee17 2a90 	vmov	r2, s15
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_UART_RxCpltCallback+0x27c>)
 80017ec:	601a      	str	r2, [r3, #0]
						break;
 80017ee:	e002      	b.n	80017f6 <HAL_UART_RxCpltCallback+0x1fe>
						break;
 80017f0:	bf00      	nop
 80017f2:	e002      	b.n	80017fa <HAL_UART_RxCpltCallback+0x202>
						break;
 80017f4:	bf00      	nop
					break;
 80017f6:	e000      	b.n	80017fa <HAL_UART_RxCpltCallback+0x202>
					break;
 80017f8:	bf00      	nop
			cRx.rxBufCursor_2 = 0;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8001802:	e011      	b.n	8001828 <HAL_UART_RxCpltCallback+0x230>
			if(cRx.rxBufCursor_2 < 255)
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 8001806:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800180a:	2bfe      	cmp	r3, #254	@ 0xfe
 800180c:	d80c      	bhi.n	8001828 <HAL_UART_RxCpltCallback+0x230>
				cRx.rxBuf_2[cRx.rxBufCursor_2++] = cRx.cRx_2;
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 8001810:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	4910      	ldr	r1, [pc, #64]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 8001818:	f8c1 2108 	str.w	r2, [r1, #264]	@ 0x108
 800181c:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 800181e:	7851      	ldrb	r1, [r2, #1]
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <HAL_UART_RxCpltCallback+0x260>)
 8001822:	4413      	add	r3, r2
 8001824:	460a      	mov	r2, r1
 8001826:	719a      	strb	r2, [r3, #6]
		if(HAL_UART_Receive_IT(&huart2, &cRx.cRx_2, 1) != HAL_OK)
 8001828:	2201      	movs	r2, #1
 800182a:	4913      	ldr	r1, [pc, #76]	@ (8001878 <HAL_UART_RxCpltCallback+0x280>)
 800182c:	4813      	ldr	r0, [pc, #76]	@ (800187c <HAL_UART_RxCpltCallback+0x284>)
 800182e:	f003 fd64 	bl	80052fa <HAL_UART_Receive_IT>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80d4 	beq.w	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_UART_RxCpltCallback+0x284>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_UART_RxCpltCallback+0x284>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	615a      	str	r2, [r3, #20]
			Error_Handler();
 800184a:	f000 fc89 	bl	8002160 <Error_Handler>
}
 800184e:	e0c8      	b.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
 8001850:	40011000 	.word	0x40011000
 8001854:	20008ff8 	.word	0x20008ff8
 8001858:	20008ee0 	.word	0x20008ee0
 800185c:	20009ab4 	.word	0x20009ab4
 8001860:	40004400 	.word	0x40004400
 8001864:	0800ba50 	.word	0x0800ba50
 8001868:	20008ee6 	.word	0x20008ee6
 800186c:	20008fec 	.word	0x20008fec
 8001870:	20001e58 	.word	0x20001e58
 8001874:	200000e8 	.word	0x200000e8
 8001878:	20008ee1 	.word	0x20008ee1
 800187c:	20009af8 	.word	0x20009af8
	else if(huart->Instance == USART3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a59      	ldr	r2, [pc, #356]	@ (80019ec <HAL_UART_RxCpltCallback+0x3f4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d125      	bne.n	80018d6 <HAL_UART_RxCpltCallback+0x2de>
		MPU6050ModDataBuf(&Left.Hip,cRx.cRx_3);
 800188a:	4b59      	ldr	r3, [pc, #356]	@ (80019f0 <HAL_UART_RxCpltCallback+0x3f8>)
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	4619      	mov	r1, r3
 8001890:	4858      	ldr	r0, [pc, #352]	@ (80019f4 <HAL_UART_RxCpltCallback+0x3fc>)
 8001892:	f000 f8d1 	bl	8001a38 <MPU6050ModDataBuf>
		Left.Hip.AngxCal = Left.Hip.Angx;
 8001896:	4b58      	ldr	r3, [pc, #352]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 8001898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b55      	ldr	r3, [pc, #340]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 80018a4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80018a8:	f503 63f9 	add.w	r3, r3, #1992	@ 0x7c8
 80018ac:	601a      	str	r2, [r3, #0]
		if(HAL_UART_Receive_IT(&huart3, &cRx.cRx_3, 1) != HAL_OK)
 80018ae:	2201      	movs	r2, #1
 80018b0:	4952      	ldr	r1, [pc, #328]	@ (80019fc <HAL_UART_RxCpltCallback+0x404>)
 80018b2:	4853      	ldr	r0, [pc, #332]	@ (8001a00 <HAL_UART_RxCpltCallback+0x408>)
 80018b4:	f003 fd21 	bl	80052fa <HAL_UART_Receive_IT>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8091 	beq.w	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
			__HAL_UART_ENABLE_IT(&huart3, UART_IT_ERR);
 80018c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <HAL_UART_RxCpltCallback+0x408>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001a00 <HAL_UART_RxCpltCallback+0x408>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	615a      	str	r2, [r3, #20]
			Error_Handler();
 80018d0:	f000 fc46 	bl	8002160 <Error_Handler>
}
 80018d4:	e085      	b.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
	else if(huart->Instance == UART4)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a4a      	ldr	r2, [pc, #296]	@ (8001a04 <HAL_UART_RxCpltCallback+0x40c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d12d      	bne.n	800193c <HAL_UART_RxCpltCallback+0x344>
		MPU6050ModDataBuf(&Left.Knee,cRx.cRx_4);
 80018e0:	4b43      	ldr	r3, [pc, #268]	@ (80019f0 <HAL_UART_RxCpltCallback+0x3f8>)
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4848      	ldr	r0, [pc, #288]	@ (8001a08 <HAL_UART_RxCpltCallback+0x410>)
 80018e8:	f000 f8a6 	bl	8001a38 <MPU6050ModDataBuf>
		Left.Knee.AngxCal = Left.Knee.Angx - Left.Hip.Angx;
 80018ec:	4b42      	ldr	r3, [pc, #264]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 80018ee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80018f2:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 80018fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001900:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 800190e:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8001912:	edc3 7aec 	vstr	s15, [r3, #944]	@ 0x3b0
		if(HAL_UART_Receive_IT(&huart4, &cRx.cRx_4, 1) != HAL_OK)
 8001916:	2201      	movs	r2, #1
 8001918:	493c      	ldr	r1, [pc, #240]	@ (8001a0c <HAL_UART_RxCpltCallback+0x414>)
 800191a:	483d      	ldr	r0, [pc, #244]	@ (8001a10 <HAL_UART_RxCpltCallback+0x418>)
 800191c:	f003 fced 	bl	80052fa <HAL_UART_Receive_IT>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d05d      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
			__HAL_UART_ENABLE_IT(&huart4, UART_IT_ERR);
 8001926:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_UART_RxCpltCallback+0x418>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <HAL_UART_RxCpltCallback+0x418>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	615a      	str	r2, [r3, #20]
			Error_Handler();
 8001936:	f000 fc13 	bl	8002160 <Error_Handler>
}
 800193a:	e052      	b.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
	else if(huart->Instance == UART5)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a34      	ldr	r2, [pc, #208]	@ (8001a14 <HAL_UART_RxCpltCallback+0x41c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12d      	bne.n	80019a2 <HAL_UART_RxCpltCallback+0x3aa>
		MPU6050ModDataBuf(&Left.Ankle,cRx.cRx_5);
 8001946:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <HAL_UART_RxCpltCallback+0x3f8>)
 8001948:	791b      	ldrb	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4832      	ldr	r0, [pc, #200]	@ (8001a18 <HAL_UART_RxCpltCallback+0x420>)
 800194e:	f000 f873 	bl	8001a38 <MPU6050ModDataBuf>
		Left.Ankle.AngxCal = Left.Ankle.Angx - Left.Knee.Angx;
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 8001954:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8001958:	ed93 7af4 	vldr	s14, [r3, #976]	@ 0x3d0
 800195c:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 800195e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001962:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_UART_RxCpltCallback+0x400>)
 8001970:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8001974:	f603 7398 	addw	r3, r3, #3992	@ 0xf98
 8001978:	edc3 7a00 	vstr	s15, [r3]
		if(HAL_UART_Receive_IT(&huart5, &cRx.cRx_5, 1) != HAL_OK)
 800197c:	2201      	movs	r2, #1
 800197e:	4927      	ldr	r1, [pc, #156]	@ (8001a1c <HAL_UART_RxCpltCallback+0x424>)
 8001980:	4827      	ldr	r0, [pc, #156]	@ (8001a20 <HAL_UART_RxCpltCallback+0x428>)
 8001982:	f003 fcba 	bl	80052fa <HAL_UART_Receive_IT>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d02a      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
			__HAL_UART_ENABLE_IT(&huart5, UART_IT_ERR);
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_UART_RxCpltCallback+0x428>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <HAL_UART_RxCpltCallback+0x428>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f042 0201 	orr.w	r2, r2, #1
 800199a:	615a      	str	r2, [r3, #20]
			Error_Handler();
 800199c:	f000 fbe0 	bl	8002160 <Error_Handler>
}
 80019a0:	e01f      	b.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
	else if(huart->Instance == USART6)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <HAL_UART_RxCpltCallback+0x42c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d11a      	bne.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
		FootDataBuf(&DataLeftBufFoot,cRx.cRx_6);
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <HAL_UART_RxCpltCallback+0x3f8>)
 80019ae:	795b      	ldrb	r3, [r3, #5]
 80019b0:	4619      	mov	r1, r3
 80019b2:	481d      	ldr	r0, [pc, #116]	@ (8001a28 <HAL_UART_RxCpltCallback+0x430>)
 80019b4:	f000 fb40 	bl	8002038 <FootDataBuf>
		if(HAL_UART_Receive_IT(&huart6, &cRx.cRx_6, 1) != HAL_OK)
 80019b8:	2201      	movs	r2, #1
 80019ba:	491c      	ldr	r1, [pc, #112]	@ (8001a2c <HAL_UART_RxCpltCallback+0x434>)
 80019bc:	481c      	ldr	r0, [pc, #112]	@ (8001a30 <HAL_UART_RxCpltCallback+0x438>)
 80019be:	f003 fc9c 	bl	80052fa <HAL_UART_Receive_IT>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00c      	beq.n	80019e2 <HAL_UART_RxCpltCallback+0x3ea>
			__HAL_UART_ENABLE_IT(&huart6, UART_IT_ERR);
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_UART_RxCpltCallback+0x438>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <HAL_UART_RxCpltCallback+0x438>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	615a      	str	r2, [r3, #20]
			Error_Handler();
 80019d8:	f000 fbc2 	bl	8002160 <Error_Handler>
			printf("[info]Error_huart6_IT\r\n");
 80019dc:	4815      	ldr	r0, [pc, #84]	@ (8001a34 <HAL_UART_RxCpltCallback+0x43c>)
 80019de:	f005 ffcf 	bl	8007980 <puts>
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40004800 	.word	0x40004800
 80019f0:	20008ee0 	.word	0x20008ee0
 80019f4:	20003a40 	.word	0x20003a40
 80019f8:	20001e58 	.word	0x20001e58
 80019fc:	20008ee2 	.word	0x20008ee2
 8001a00:	20009b3c 	.word	0x20009b3c
 8001a04:	40004c00 	.word	0x40004c00
 8001a08:	20005628 	.word	0x20005628
 8001a0c:	20008ee3 	.word	0x20008ee3
 8001a10:	20009a2c 	.word	0x20009a2c
 8001a14:	40005000 	.word	0x40005000
 8001a18:	20007210 	.word	0x20007210
 8001a1c:	20008ee4 	.word	0x20008ee4
 8001a20:	20009a70 	.word	0x20009a70
 8001a24:	40011400 	.word	0x40011400
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20008ee5 	.word	0x20008ee5
 8001a30:	20009b80 	.word	0x20009b80
 8001a34:	0800ba58 	.word	0x0800ba58

08001a38 <MPU6050ModDataBuf>:
 * ---------+--------------------------------------
 * AllData	| 关节结构体，储存各关节数据
 * cRx		| 中断时串口读取的数据
*******************************************************************************/
void MPU6050ModDataBuf(struct Data *AllData, uint8_t cRx)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
	  if(AllData->State.counter < 1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d138      	bne.n	8001ac0 <MPU6050ModDataBuf+0x88>
	  {
		  if(cRx != 0x55)
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	2b55      	cmp	r3, #85	@ 0x55
 8001a52:	d008      	beq.n	8001a66 <MPU6050ModDataBuf+0x2e>
		  {
			  AllData->State.counter = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
		  }

		  AllData->State.Flag = 0;
	  }
}
 8001a64:	e2d6      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  ++AllData->State.counter;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  AllData->Buf.rxDataAcc[AllData->State.counter] = cRx;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001a8e:	461a      	mov	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			  AllData->Buf.rxDataAngAcc[AllData->State.counter] = cRx;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			  AllData->Buf.rxDataAng[AllData->State.counter] = cRx;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
}
 8001abe:	e2a9      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
	  else if(AllData->State.counter < 2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d873      	bhi.n	8001bb2 <MPU6050ModDataBuf+0x17a>
		  AllData->Buf.rxDataAcc[AllData->State.counter] = cRx;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		  AllData->Buf.rxDataAngAcc[AllData->State.counter] = cRx;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
		  AllData->Buf.rxDataAng[AllData->State.counter] = cRx;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
		  switch(cRx)
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	2b53      	cmp	r3, #83	@ 0x53
 8001b04:	d032      	beq.n	8001b6c <MPU6050ModDataBuf+0x134>
 8001b06:	2b53      	cmp	r3, #83	@ 0x53
 8001b08:	dc46      	bgt.n	8001b98 <MPU6050ModDataBuf+0x160>
 8001b0a:	2b51      	cmp	r3, #81	@ 0x51
 8001b0c:	d002      	beq.n	8001b14 <MPU6050ModDataBuf+0xdc>
 8001b0e:	2b52      	cmp	r3, #82	@ 0x52
 8001b10:	d016      	beq.n	8001b40 <MPU6050ModDataBuf+0x108>
 8001b12:	e041      	b.n	8001b98 <MPU6050ModDataBuf+0x160>
			  AllData->State.Flag = 1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			  ++AllData->State.counter;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001b3e:	e269      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  AllData->State.Flag = 2;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			  ++AllData->State.counter;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	4413      	add	r3, r2
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001b6a:	e253      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  AllData->State.Flag = 3;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			  ++AllData->State.counter;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001b96:	e23d      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  AllData->State.Flag = 0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			  AllData->State.counter = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001bb0:	e230      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
	  else if(AllData->State.counter < 11)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001bb8:	2b0a      	cmp	r3, #10
 8001bba:	d869      	bhi.n	8001c90 <MPU6050ModDataBuf+0x258>
		  switch (AllData->State.Flag)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d03c      	beq.n	8001c40 <MPU6050ModDataBuf+0x208>
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	dc55      	bgt.n	8001c76 <MPU6050ModDataBuf+0x23e>
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d002      	beq.n	8001bd4 <MPU6050ModDataBuf+0x19c>
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d01b      	beq.n	8001c0a <MPU6050ModDataBuf+0x1d2>
 8001bd2:	e050      	b.n	8001c76 <MPU6050ModDataBuf+0x23e>
			  AllData->Buf.rxDataAcc[ AllData->State.counter] = cRx;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			  ++AllData->State.counter;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001c08:	e204      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  AllData->Buf.rxDataAngAcc[ AllData->State.counter] = cRx;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001c10:	461a      	mov	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			  ++AllData->State.counter;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	4413      	add	r3, r2
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001c3e:	e1e9      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  AllData->Buf.rxDataAng[ AllData->State.counter] = cRx;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	78fa      	ldrb	r2, [r7, #3]
 8001c4e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
			  ++AllData->State.counter;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum += cRx;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001c74:	e1ce      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
			  AllData->State.Flag = 0;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
			  AllData->State.counter = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
			  AllData->State.sum = 0;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			  break;
 8001c8e:	e1c1      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
	  else if(AllData->State.counter == 11)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001c96:	2b0b      	cmp	r3, #11
 8001c98:	f040 81bc 	bne.w	8002014 <MPU6050ModDataBuf+0x5dc>
		  if(AllData->State.sum != cRx)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d004      	beq.n	8001cb2 <MPU6050ModDataBuf+0x27a>
			  AllData->State.counter = 0;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 8001cb0:	e01a      	b.n	8001ce8 <MPU6050ModDataBuf+0x2b0>
			  AllData->Buf.rxDataAcc[AllData->State.counter] = cRx;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			  AllData->Buf.rxDataAngAcc[AllData->State.counter] = cRx;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001cca:	461a      	mov	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			  AllData->Buf.rxDataAng[AllData->State.counter] = cRx;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
		  AllData->State.counter = 0;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		  AllData->State.sum = 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
		  switch(AllData->State.Flag)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	f000 80fe 	beq.w	8001f00 <MPU6050ModDataBuf+0x4c8>
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	f300 817f 	bgt.w	8002008 <MPU6050ModDataBuf+0x5d0>
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d003      	beq.n	8001d16 <MPU6050ModDataBuf+0x2de>
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f000 8092 	beq.w	8001e38 <MPU6050ModDataBuf+0x400>
			  break;
 8001d14:	e178      	b.n	8002008 <MPU6050ModDataBuf+0x5d0>
			  AllData->Buf.Accx = (AllData->Buf.rxDataAcc[3]<<8)|AllData->Buf.rxDataAcc[2];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			  AllData->Accx = (float) AllData->Buf.Accx/32768*16*g;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d42:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d52:	ee17 0a90 	vmov	r0, s15
 8001d56:	f7fe fc17 	bl	8000588 <__aeabi_f2d>
 8001d5a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002020 <MPU6050ModDataBuf+0x5e8>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc6a 	bl	8000638 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff5c 	bl	8000c28 <__aeabi_d2f>
 8001d70:	4602      	mov	r2, r0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
			  AllData->Buf.Accy = (AllData->Buf.rxDataAcc[5]<<8)|AllData->Buf.rxDataAcc[4];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			  AllData->Accy = (float) AllData->Buf.Accy/32768*16*g;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da2:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001daa:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db2:	ee17 0a90 	vmov	r0, s15
 8001db6:	f7fe fbe7 	bl	8000588 <__aeabi_f2d>
 8001dba:	a399      	add	r3, pc, #612	@ (adr r3, 8002020 <MPU6050ModDataBuf+0x5e8>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fc3a 	bl	8000638 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe ff2c 	bl	8000c28 <__aeabi_d2f>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	605a      	str	r2, [r3, #4]
			  AllData->Buf.Accz = (AllData->Buf.rxDataAcc[7]<<8)|AllData->Buf.rxDataAcc[6];
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			  AllData->Accz = (float) AllData->Buf.Accz/32768*16*g;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e02:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001e06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e0a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e12:	ee17 0a90 	vmov	r0, s15
 8001e16:	f7fe fbb7 	bl	8000588 <__aeabi_f2d>
 8001e1a:	a381      	add	r3, pc, #516	@ (adr r3, 8002020 <MPU6050ModDataBuf+0x5e8>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fc0a 	bl	8000638 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fefc 	bl	8000c28 <__aeabi_d2f>
 8001e30:	4602      	mov	r2, r0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	609a      	str	r2, [r3, #8]
			  break;
 8001e36:	e0e8      	b.n	800200a <MPU6050ModDataBuf+0x5d2>
			  AllData->Buf.AngAccx = (AllData->Buf.rxDataAngAcc[3]<<8)|AllData->Buf.rxDataAngAcc[2];
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			  AllData->AngAccx = (float) AllData->Buf.AngAccx/32768*2000;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e64:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800202c <MPU6050ModDataBuf+0x5f4>
 8001e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	edc3 7a03 	vstr	s15, [r3, #12]
			  AllData->Buf.AngAccy = (AllData->Buf.rxDataAngAcc[5]<<8)|AllData->Buf.rxDataAngAcc[4];
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			  AllData->AngAccy = (float) AllData->Buf.AngAccy/32768*2000;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea6:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eae:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800202c <MPU6050ModDataBuf+0x5f4>
 8001eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edc3 7a04 	vstr	s15, [r3, #16]
			  AllData->Buf.AngAccz = (AllData->Buf.rxDataAngAcc[7]<<8)|AllData->Buf.rxDataAngAcc[6];
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			  AllData->AngAccz = (float) AllData->Buf.AngAccz/32768*2000;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8b3 3094 	ldrh.w	r3, [r3, #148]	@ 0x94
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ee8:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800202c <MPU6050ModDataBuf+0x5f4>
 8001ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edc3 7a05 	vstr	s15, [r3, #20]
			  break;
 8001efe:	e084      	b.n	800200a <MPU6050ModDataBuf+0x5d2>
			  AllData->Buf.Angx = (AllData->Buf.rxDataAng[3]<<8)|AllData->Buf.rxDataAng[2];
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	4313      	orrs	r3, r2
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			  AllData->Angx = (float) AllData->Buf.Angx/32768*180;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f2c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f34:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002030 <MPU6050ModDataBuf+0x5f8>
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	edc3 7a06 	vstr	s15, [r3, #24]
			  AllData->Buf.Angy = (AllData->Buf.rxDataAng[5]<<8)|AllData->Buf.rxDataAng[4];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			  AllData->Angy = (float) AllData->Buf.Angy/32768*180;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f6e:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002030 <MPU6050ModDataBuf+0x5f8>
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	edc3 7a07 	vstr	s15, [r3, #28]
			  AllData->Buf.Angz = (AllData->Buf.rxDataAng[7]<<8)|AllData->Buf.rxDataAng[6];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			  AllData->Angz = (float) AllData->Buf.Angz/32768*180;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002028 <MPU6050ModDataBuf+0x5f0>
 8001fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002030 <MPU6050ModDataBuf+0x5f8>
 8001fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	edc3 7a08 	vstr	s15, [r3, #32]
			  AllData->Angx = AllData->Angx - AllData->AngxZero;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	edc3 7a06 	vstr	s15, [r3, #24]
			  if(AllData->Angx > 180)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fe2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002030 <MPU6050ModDataBuf+0x5f8>
 8001fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	dc00      	bgt.n	8001ff2 <MPU6050ModDataBuf+0x5ba>
			  break;
 8001ff0:	e00b      	b.n	800200a <MPU6050ModDataBuf+0x5d2>
				  AllData->Angx = AllData->Angx - 360;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ff8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002034 <MPU6050ModDataBuf+0x5fc>
 8001ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	edc3 7a06 	vstr	s15, [r3, #24]
			  break;
 8002006:	e000      	b.n	800200a <MPU6050ModDataBuf+0x5d2>
			  break;
 8002008:	bf00      	nop
		  AllData->State.Flag = 0;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 209e 	strb.w	r2, [r3, #158]	@ 0x9e
}
 8002012:	e7ff      	b.n	8002014 <MPU6050ModDataBuf+0x5dc>
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	f3af 8000 	nop.w
 8002020:	9999999a 	.word	0x9999999a
 8002024:	40239999 	.word	0x40239999
 8002028:	47000000 	.word	0x47000000
 800202c:	44fa0000 	.word	0x44fa0000
 8002030:	43340000 	.word	0x43340000
 8002034:	43b40000 	.word	0x43b40000

08002038 <FootDataBuf>:
 * ---------+--------------------------------------
 * AllData	| 共同体数据
 * cRx		| 中断时串口读取的数据
*******************************************************************************/
void FootDataBuf(struct DataUnionBuf *AllData, uint8_t cRx)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
	if(AllData->FootCounter < 1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002048:	2b00      	cmp	r3, #0
 800204a:	dc12      	bgt.n	8002072 <FootDataBuf+0x3a>
	{
		if(cRx != 0x64)
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b64      	cmp	r3, #100	@ 0x64
 8002050:	d003      	beq.n	800205a <FootDataBuf+0x22>
		{
			AllData->FootCounter = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38
				AllData->Data[AllData->Point[i]] = AllData->DataUnionBufReceive.FloatBuf;
			}
		}
		AllData->FootCounter = 0;
	}
}
 8002058:	e057      	b.n	800210a <FootDataBuf+0xd2>
			AllData->HexBufSumFoot[AllData->FootCounter] = cRx;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	739a      	strb	r2, [r3, #14]
			AllData->FootCounter++;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002070:	e04b      	b.n	800210a <FootDataBuf+0xd2>
	else if(AllData->FootCounter < 33)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002076:	2b20      	cmp	r3, #32
 8002078:	dc0b      	bgt.n	8002092 <FootDataBuf+0x5a>
		AllData->HexBufSumFoot[AllData->FootCounter] = cRx;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	739a      	strb	r2, [r3, #14]
		AllData->FootCounter++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002090:	e03b      	b.n	800210a <FootDataBuf+0xd2>
	else if(AllData->FootCounter == 33)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	2b21      	cmp	r3, #33	@ 0x21
 8002098:	d137      	bne.n	800210a <FootDataBuf+0xd2>
		if(cRx == 0x65)
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	2b65      	cmp	r3, #101	@ 0x65
 800209e:	d131      	bne.n	8002104 <FootDataBuf+0xcc>
			AllData->HexBufSumFoot[AllData->FootCounter] = cRx;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	739a      	strb	r2, [r3, #14]
			for(int i=0;i<8;i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e025      	b.n	80020fe <FootDataBuf+0xc6>
				for(int j=0;j<4;j++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	e010      	b.n	80020da <FootDataBuf+0xa2>
					AllData->DataUnionBufReceive.HexBuf[j] = AllData->HexBufSumFoot[4*i+j+1];
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4413      	add	r3, r2
 80020c0:	3301      	adds	r3, #1
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	7b99      	ldrb	r1, [r3, #14]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	3340      	adds	r3, #64	@ 0x40
 80020d0:	460a      	mov	r2, r1
 80020d2:	701a      	strb	r2, [r3, #0]
				for(int j=0;j<4;j++)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	3301      	adds	r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	ddeb      	ble.n	80020b8 <FootDataBuf+0x80>
				AllData->Data[AllData->Point[i]] = AllData->DataUnionBufReceive.FloatBuf;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	3232      	adds	r2, #50	@ 0x32
 80020e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	3312      	adds	r3, #18
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	601a      	str	r2, [r3, #0]
			for(int i=0;i<8;i++)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b07      	cmp	r3, #7
 8002102:	ddd6      	ble.n	80020b2 <FootDataBuf+0x7a>
		AllData->FootCounter = 0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <ModbusRead>:
*修改日期:	20231010
 * 参数		| 介绍
 * ---------+--------------------------------------
 * 无		| 无
*******************************************************************************/
void ModbusRead(){
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
	uint8_t ModbusData[] = {0x50,0x03,0x00,0x34,0x00,0x01,0xc8,0x45};
 800211e:	4a0e      	ldr	r2, [pc, #56]	@ (8002158 <ModbusRead+0x40>)
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002126:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0;i<8;i++){
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e00b      	b.n	8002148 <ModbusRead+0x30>
		HAL_UART_Transmit(&huart1,(uint8_t *)&ModbusData[i],1,0xFFFF);
 8002130:	1d3a      	adds	r2, r7, #4
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	18d1      	adds	r1, r2, r3
 8002136:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800213a:	2201      	movs	r2, #1
 800213c:	4807      	ldr	r0, [pc, #28]	@ (800215c <ModbusRead+0x44>)
 800213e:	f003 f84a 	bl	80051d6 <HAL_UART_Transmit>
	for(int i = 0;i<8;i++){
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3301      	adds	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b07      	cmp	r3, #7
 800214c:	ddf0      	ble.n	8002130 <ModbusRead+0x18>
	}
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	0800ba94 	.word	0x0800ba94
 800215c:	20009ab4 	.word	0x20009ab4

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <Error_Handler+0x8>

0800216c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <HAL_MspInit+0x4c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a0f      	ldr	r2, [pc, #60]	@ (80021b8 <HAL_MspInit+0x4c>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_MspInit+0x4c>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <HAL_MspInit+0x4c>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	@ 0x40
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <NMI_Handler+0x4>

080021c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <MemManage_Handler+0x4>

080021d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002212:	f001 faf5 	bl	8003800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <DMA1_Stream0_IRQHandler+0x10>)
 8002222:	f001 fddb 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20009c24 	.word	0x20009c24

08002230 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DMA1_Stream1_IRQHandler+0x10>)
 8002236:	f001 fdd1 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20009d44 	.word	0x20009d44

08002244 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <DMA1_Stream2_IRQHandler+0x10>)
 800224a:	f001 fdc7 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20009bc4 	.word	0x20009bc4

08002258 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  if (__HAL_DMA_GET_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF2_6) != RESET) //数据发送完成中断
 800225e:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <DMA1_Stream6_IRQHandler+0xc0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b2d      	ldr	r3, [pc, #180]	@ (800231c <DMA1_Stream6_IRQHandler+0xc4>)
 8002266:	429a      	cmp	r2, r3
 8002268:	d909      	bls.n	800227e <DMA1_Stream6_IRQHandler+0x26>
 800226a:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <DMA1_Stream6_IRQHandler+0xc8>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	e028      	b.n	80022d0 <DMA1_Stream6_IRQHandler+0x78>
 800227e:	4b26      	ldr	r3, [pc, #152]	@ (8002318 <DMA1_Stream6_IRQHandler+0xc0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <DMA1_Stream6_IRQHandler+0xcc>)
 8002286:	429a      	cmp	r2, r3
 8002288:	d909      	bls.n	800229e <DMA1_Stream6_IRQHandler+0x46>
 800228a:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <DMA1_Stream6_IRQHandler+0xc8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e018      	b.n	80022d0 <DMA1_Stream6_IRQHandler+0x78>
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <DMA1_Stream6_IRQHandler+0xc0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <DMA1_Stream6_IRQHandler+0xd0>)
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d909      	bls.n	80022be <DMA1_Stream6_IRQHandler+0x66>
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <DMA1_Stream6_IRQHandler+0xd4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e008      	b.n	80022d0 <DMA1_Stream6_IRQHandler+0x78>
 80022be:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <DMA1_Stream6_IRQHandler+0xd4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d019      	beq.n	8002308 <DMA1_Stream6_IRQHandler+0xb0>
  {
	// __HAL_DMA_CLEAR_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF2_6);
	// 这一部分其实在 HAL_DMA_IRQHandler(&hdma_usart2_tx) 也完成了。

	__HAL_UART_CLEAR_IDLEFLAG(&huart2); //清除串口空闲中断标志位，发送完成那么串口也是空闲态哦~
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <DMA1_Stream6_IRQHandler+0xd8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <DMA1_Stream6_IRQHandler+0xd8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

	USART2_TX_FLAG = 0; // 重置发送标志位
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <DMA1_Stream6_IRQHandler+0xdc>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]

	huart2.gState = HAL_UART_STATE_READY;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <DMA1_Stream6_IRQHandler+0xd8>)
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	hdma_usart2_tx.State = HAL_DMA_STATE_READY;
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <DMA1_Stream6_IRQHandler+0xc0>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	__HAL_UNLOCK(&hdma_usart2_tx);
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <DMA1_Stream6_IRQHandler+0xc0>)
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	// 这里疑似是HAL库函数的bug，具体可以参考我给的链接
	// huart1,hdma_usart1_tx 的状态要手动复位成READY状态
	// 不然发送函数会一直以为通道忙，就不再发送数据了！
  }
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002308:	4803      	ldr	r0, [pc, #12]	@ (8002318 <DMA1_Stream6_IRQHandler+0xc0>)
 800230a:	f001 fd67 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20009ce4 	.word	0x20009ce4
 800231c:	40026458 	.word	0x40026458
 8002320:	40026400 	.word	0x40026400
 8002324:	400260b8 	.word	0x400260b8
 8002328:	40026058 	.word	0x40026058
 800232c:	40026000 	.word	0x40026000
 8002330:	20009af8 	.word	0x20009af8
 8002334:	2000900c 	.word	0x2000900c

08002338 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <USART1_IRQHandler+0x70>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b10      	cmp	r3, #16
 8002348:	d121      	bne.n	800238e <USART1_IRQHandler+0x56>
  {
	// __HAL_UART_CLEAR_IDLEFLAG(&huart6);
	// 这一部分其实在 HAL_UART_IRQHandler(&huart6) 也完成了。

	HAL_UART_DMAStop(&huart1); // 把DMA接收停掉，防止速度过快导致中断重入，数据被覆写。
 800234a:	4817      	ldr	r0, [pc, #92]	@ (80023a8 <USART1_IRQHandler+0x70>)
 800234c:	f003 f8b4 	bl	80054b8 <HAL_UART_DMAStop>

//	uint32_t data_length = MAX_RX_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);// 数据总长度=极限接收长度-DMA剩余的接收长度

	if (WhichBufIsReady1)	//WhichBufIsReady=1
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <USART1_IRQHandler+0x74>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <USART1_IRQHandler+0x34>
	{
	  p_IsOK1 = u1rxbuf2;        // u6rxbuf2 可以读取，就绪指针指向它。
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <USART1_IRQHandler+0x78>)
 800235a:	4a16      	ldr	r2, [pc, #88]	@ (80023b4 <USART1_IRQHandler+0x7c>)
 800235c:	601a      	str	r2, [r3, #0]
	  p_IsToReceive1 = u1rxbuf1; // u6rxbuf1 作为下一次DMA存储的缓冲，占用指针指向它。
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <USART1_IRQHandler+0x80>)
 8002360:	4a16      	ldr	r2, [pc, #88]	@ (80023bc <USART1_IRQHandler+0x84>)
 8002362:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady1 = 0;		//切换一下指示器状态
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <USART1_IRQHandler+0x74>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e008      	b.n	800237e <USART1_IRQHandler+0x46>
	}
	else				//WhichBufIsReady=0
	{
	  p_IsOK1 = u1rxbuf1;        // u6rxbuf1 可以读取，就绪指针指向它。
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <USART1_IRQHandler+0x78>)
 800236e:	4a13      	ldr	r2, [pc, #76]	@ (80023bc <USART1_IRQHandler+0x84>)
 8002370:	601a      	str	r2, [r3, #0]
	  p_IsToReceive1 = u1rxbuf2; // u6rxbuf2 作为下一次DMA存储的缓冲，占用指针指向它。
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <USART1_IRQHandler+0x80>)
 8002374:	4a0f      	ldr	r2, [pc, #60]	@ (80023b4 <USART1_IRQHandler+0x7c>)
 8002376:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady1 = 1;		//切换一下指示器状态
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <USART1_IRQHandler+0x74>)
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
//	MPU6050ModDataBufDMA(&Right.Hip);
//	Right.Hip.AngxCal = Right.Hip.Angx;


	///不管是复制也好，放进去队列也罢，处理你接收到的数据的代码建议从这里结束
	memset((uint8_t *)p_IsToReceive1, 0, MAX_RX_LEN);	// 把接收数据的指针指向的缓冲区清空
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <USART1_IRQHandler+0x80>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f005 fcd9 	bl	8007d40 <memset>
  }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800238e:	4806      	ldr	r0, [pc, #24]	@ (80023a8 <USART1_IRQHandler+0x70>)
 8002390:	f003 f912 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_DMA(&huart1, p_IsToReceive1, MAX_RX_LEN); //数据处理完毕，重新启动接收
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <USART1_IRQHandler+0x80>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800239c:	4619      	mov	r1, r3
 800239e:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <USART1_IRQHandler+0x70>)
 80023a0:	f003 f85a 	bl	8005458 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20009ab4 	.word	0x20009ab4
 80023ac:	20009210 	.word	0x20009210
 80023b0:	20001c30 	.word	0x20001c30
 80023b4:	20009110 	.word	0x20009110
 80023b8:	20001c34 	.word	0x20001c34
 80023bc:	20009010 	.word	0x20009010

080023c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <USART2_IRQHandler+0x10>)
 80023c6:	f003 f8f7 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20009af8 	.word	0x20009af8

080023d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  if (RESET != __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE))
 80023d8:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <USART3_IRQHandler+0xcc>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d14f      	bne.n	8002486 <USART3_IRQHandler+0xb2>
  {
	// __HAL_UART_CLEAR_IDLEFLAG(&huart6);
	// 这一部分其实在 HAL_UART_IRQHandler(&huart6) 也完成了。

	HAL_UART_DMAStop(&huart3); // 把DMA接收停掉，防止速度过快导致中断重入，数据被覆写。
 80023e6:	482e      	ldr	r0, [pc, #184]	@ (80024a0 <USART3_IRQHandler+0xcc>)
 80023e8:	f003 f866 	bl	80054b8 <HAL_UART_DMAStop>

//	uint32_t data_length = MAX_RX_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);// 数据总长度=极限接收长度-DMA剩余的接收长度

	if (WhichBufIsReady3)	//WhichBufIsReady=1
 80023ec:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <USART3_IRQHandler+0xd0>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <USART3_IRQHandler+0x34>
	{
	  p_IsOK3 = u3rxbuf2;        // u6rxbuf2 可以读取，就绪指针指向它。
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <USART3_IRQHandler+0xd4>)
 80023f6:	4a2d      	ldr	r2, [pc, #180]	@ (80024ac <USART3_IRQHandler+0xd8>)
 80023f8:	601a      	str	r2, [r3, #0]
	  p_IsToReceive3 = u3rxbuf1; // u6rxbuf1 作为下一次DMA存储的缓冲，占用指针指向它。
 80023fa:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <USART3_IRQHandler+0xdc>)
 80023fc:	4a2d      	ldr	r2, [pc, #180]	@ (80024b4 <USART3_IRQHandler+0xe0>)
 80023fe:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady3 = 0;		//切换一下指示器状态
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <USART3_IRQHandler+0xd0>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e008      	b.n	800241a <USART3_IRQHandler+0x46>
	}
	else				//WhichBufIsReady=0
	{
	  p_IsOK3 = u3rxbuf1;        // u6rxbuf1 可以读取，就绪指针指向它。
 8002408:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <USART3_IRQHandler+0xd4>)
 800240a:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <USART3_IRQHandler+0xe0>)
 800240c:	601a      	str	r2, [r3, #0]
	  p_IsToReceive3 = u3rxbuf2; // u6rxbuf2 作为下一次DMA存储的缓冲，占用指针指向它。
 800240e:	4b28      	ldr	r3, [pc, #160]	@ (80024b0 <USART3_IRQHandler+0xdc>)
 8002410:	4a26      	ldr	r2, [pc, #152]	@ (80024ac <USART3_IRQHandler+0xd8>)
 8002412:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady3 = 1;		//切换一下指示器状态
 8002414:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <USART3_IRQHandler+0xd0>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
	}

	memcpy(&Left.Hip.Buf.rxData,p_IsOK3,33);
 800241a:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <USART3_IRQHandler+0xd4>)
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <USART3_IRQHandler+0xe4>)
 8002420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002424:	461a      	mov	r2, r3
 8002426:	460b      	mov	r3, r1
 8002428:	f602 4051 	addw	r0, r2, #3153	@ 0xc51
 800242c:	f103 0420 	add.w	r4, r3, #32
 8002430:	4602      	mov	r2, r0
 8002432:	4619      	mov	r1, r3
 8002434:	f8d1 c000 	ldr.w	ip, [r1]
 8002438:	684e      	ldr	r6, [r1, #4]
 800243a:	688d      	ldr	r5, [r1, #8]
 800243c:	68c9      	ldr	r1, [r1, #12]
 800243e:	f8c2 c000 	str.w	ip, [r2]
 8002442:	6056      	str	r6, [r2, #4]
 8002444:	6095      	str	r5, [r2, #8]
 8002446:	60d1      	str	r1, [r2, #12]
 8002448:	3310      	adds	r3, #16
 800244a:	3010      	adds	r0, #16
 800244c:	42a3      	cmp	r3, r4
 800244e:	d1ef      	bne.n	8002430 <USART3_IRQHandler+0x5c>
 8002450:	4602      	mov	r2, r0
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	7013      	strb	r3, [r2, #0]
	MPU6050ModDataBufDMA(&Left.Hip,0);
 8002456:	2100      	movs	r1, #0
 8002458:	4818      	ldr	r0, [pc, #96]	@ (80024bc <USART3_IRQHandler+0xe8>)
 800245a:	f000 f9e5 	bl	8002828 <MPU6050ModDataBufDMA>
	Left.Hip.AngxCal = Left.Hip.Angx;
 800245e:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <USART3_IRQHandler+0xe4>)
 8002460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002464:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <USART3_IRQHandler+0xe4>)
 800246c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002470:	f503 63f9 	add.w	r3, r3, #1992	@ 0x7c8
 8002474:	601a      	str	r2, [r3, #0]
//	Left.Hip.AngxCal = low_pass_filter(Left.Hip.AngxCal);


	///不管是复制也好，放进去队列也罢，处理你接收到的数据的代码建议从这里结束
	memset((uint8_t *)p_IsToReceive3, 0, MAX_RX_LEN);	// 把接收数据的指针指向的缓冲区清空
 8002476:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <USART3_IRQHandler+0xdc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f005 fc5d 	bl	8007d40 <memset>
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <USART3_IRQHandler+0xcc>)
 8002488:	f003 f896 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_DMA(&huart3, p_IsToReceive3, MAX_RX_LEN); //数据处理完毕，重新启动接收
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <USART3_IRQHandler+0xdc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002494:	4619      	mov	r1, r3
 8002496:	4802      	ldr	r0, [pc, #8]	@ (80024a0 <USART3_IRQHandler+0xcc>)
 8002498:	f002 ffde 	bl	8005458 <HAL_UART_Receive_DMA>
  /* USER CODE END USART3_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a0:	20009b3c 	.word	0x20009b3c
 80024a4:	20009414 	.word	0x20009414
 80024a8:	20001c38 	.word	0x20001c38
 80024ac:	20009314 	.word	0x20009314
 80024b0:	20001c3c 	.word	0x20001c3c
 80024b4:	20009214 	.word	0x20009214
 80024b8:	20001e58 	.word	0x20001e58
 80024bc:	20003a40 	.word	0x20003a40

080024c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if (RESET != __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE))
 80024c4:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <UART4_IRQHandler+0xe4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d15b      	bne.n	800258a <UART4_IRQHandler+0xca>
  {
	// __HAL_UART_CLEAR_IDLEFLAG(&huart6);
	// 这一部分其实在 HAL_UART_IRQHandler(&huart6) 也完成了。

	HAL_UART_DMAStop(&huart4); // 把DMA接收停掉，防止速度过快导致中断重入，数据被覆写。
 80024d2:	4834      	ldr	r0, [pc, #208]	@ (80025a4 <UART4_IRQHandler+0xe4>)
 80024d4:	f002 fff0 	bl	80054b8 <HAL_UART_DMAStop>

//	uint32_t data_length = MAX_RX_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);// 数据总长度=极限接收长度-DMA剩余的接收长度

	if (WhichBufIsReady4)	//WhichBufIsReady=1
 80024d8:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <UART4_IRQHandler+0xe8>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <UART4_IRQHandler+0x34>
	{
	  p_IsOK4 = u4rxbuf2;        // u6rxbuf2 可以读取，就绪指针指向它。
 80024e0:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <UART4_IRQHandler+0xec>)
 80024e2:	4a33      	ldr	r2, [pc, #204]	@ (80025b0 <UART4_IRQHandler+0xf0>)
 80024e4:	601a      	str	r2, [r3, #0]
	  p_IsToReceive4 = u4rxbuf1; // u6rxbuf1 作为下一次DMA存储的缓冲，占用指针指向它。
 80024e6:	4b33      	ldr	r3, [pc, #204]	@ (80025b4 <UART4_IRQHandler+0xf4>)
 80024e8:	4a33      	ldr	r2, [pc, #204]	@ (80025b8 <UART4_IRQHandler+0xf8>)
 80024ea:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady4 = 0;		//切换一下指示器状态
 80024ec:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <UART4_IRQHandler+0xe8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e008      	b.n	8002506 <UART4_IRQHandler+0x46>
	}
	else				//WhichBufIsReady=0
	{
	  p_IsOK4 = u4rxbuf1;        // u6rxbuf1 可以读取，就绪指针指向它。
 80024f4:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <UART4_IRQHandler+0xec>)
 80024f6:	4a30      	ldr	r2, [pc, #192]	@ (80025b8 <UART4_IRQHandler+0xf8>)
 80024f8:	601a      	str	r2, [r3, #0]
	  p_IsToReceive4 = u4rxbuf2; // u6rxbuf2 作为下一次DMA存储的缓冲，占用指针指向它。
 80024fa:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <UART4_IRQHandler+0xf4>)
 80024fc:	4a2c      	ldr	r2, [pc, #176]	@ (80025b0 <UART4_IRQHandler+0xf0>)
 80024fe:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady4 = 1;		//切换一下指示器状态
 8002500:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <UART4_IRQHandler+0xe8>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
	}

	memcpy(&Left.Knee.Buf.rxData,p_IsOK4,33);
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <UART4_IRQHandler+0xec>)
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <UART4_IRQHandler+0xfc>)
 800250c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002510:	461a      	mov	r2, r3
 8002512:	460b      	mov	r3, r1
 8002514:	f602 0039 	addw	r0, r2, #2105	@ 0x839
 8002518:	f103 0420 	add.w	r4, r3, #32
 800251c:	4602      	mov	r2, r0
 800251e:	4619      	mov	r1, r3
 8002520:	f8d1 c000 	ldr.w	ip, [r1]
 8002524:	684e      	ldr	r6, [r1, #4]
 8002526:	688d      	ldr	r5, [r1, #8]
 8002528:	68c9      	ldr	r1, [r1, #12]
 800252a:	f8c2 c000 	str.w	ip, [r2]
 800252e:	6056      	str	r6, [r2, #4]
 8002530:	6095      	str	r5, [r2, #8]
 8002532:	60d1      	str	r1, [r2, #12]
 8002534:	3310      	adds	r3, #16
 8002536:	3010      	adds	r0, #16
 8002538:	42a3      	cmp	r3, r4
 800253a:	d1ef      	bne.n	800251c <UART4_IRQHandler+0x5c>
 800253c:	4602      	mov	r2, r0
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	7013      	strb	r3, [r2, #0]
	MPU6050ModDataBufDMA(&Left.Knee,1);
 8002542:	2101      	movs	r1, #1
 8002544:	481e      	ldr	r0, [pc, #120]	@ (80025c0 <UART4_IRQHandler+0x100>)
 8002546:	f000 f96f 	bl	8002828 <MPU6050ModDataBufDMA>
	Left.Knee.AngxCal = Left.Knee.Angx - Left.Hip.Angx;
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <UART4_IRQHandler+0xfc>)
 800254c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002550:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8002554:	ed93 7a00 	vldr	s14, [r3]
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <UART4_IRQHandler+0xfc>)
 800255a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800255e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <UART4_IRQHandler+0xfc>)
 800256c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002570:	edc3 7aec 	vstr	s15, [r3, #944]	@ 0x3b0
//	Left.Knee.AngxCal = low_pass_filter(Left.Knee.AngxCal);
	FlagSend = 1;
 8002574:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <UART4_IRQHandler+0x104>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]
//			break;
//		}
//	}

	///不管是复制也好，放进去队列也罢，处理你接收到的数据的代码建议从这里结束
	memset((uint8_t *)p_IsToReceive4, 0, MAX_RX_LEN);	// 把接收数据的指针指向的缓冲区清空
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <UART4_IRQHandler+0xf4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f005 fbdb 	bl	8007d40 <memset>
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800258a:	4806      	ldr	r0, [pc, #24]	@ (80025a4 <UART4_IRQHandler+0xe4>)
 800258c:	f003 f814 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  HAL_UART_Receive_DMA(&huart4, p_IsToReceive4, MAX_RX_LEN); //数据处理完毕，重新启动接收
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <UART4_IRQHandler+0xf4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002598:	4619      	mov	r1, r3
 800259a:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <UART4_IRQHandler+0xe4>)
 800259c:	f002 ff5c 	bl	8005458 <HAL_UART_Receive_DMA>
  /* USER CODE END UART4_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025a4:	20009a2c 	.word	0x20009a2c
 80025a8:	20009618 	.word	0x20009618
 80025ac:	20001c40 	.word	0x20001c40
 80025b0:	20009518 	.word	0x20009518
 80025b4:	20001c44 	.word	0x20001c44
 80025b8:	20009418 	.word	0x20009418
 80025bc:	20001e58 	.word	0x20001e58
 80025c0:	20005628 	.word	0x20005628
 80025c4:	20008ff4 	.word	0x20008ff4

080025c8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  if (RESET != __HAL_UART_GET_FLAG(&huart5, UART_FLAG_IDLE))
 80025cc:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <UART5_IRQHandler+0xe0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d158      	bne.n	800268c <UART5_IRQHandler+0xc4>
  {
	// __HAL_UART_CLEAR_IDLEFLAG(&huart6);
	// 这一部分其实在 HAL_UART_IRQHandler(&huart6) 也完成了。

	HAL_UART_DMAStop(&huart5); // 把DMA接收停掉，防止速度过快导致中断重入，数据被覆写。
 80025da:	4833      	ldr	r0, [pc, #204]	@ (80026a8 <UART5_IRQHandler+0xe0>)
 80025dc:	f002 ff6c 	bl	80054b8 <HAL_UART_DMAStop>

//	uint32_t data_length = MAX_RX_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);// 数据总长度=极限接收长度-DMA剩余的接收长度

	if (WhichBufIsReady5)	//WhichBufIsReady=1
 80025e0:	4b32      	ldr	r3, [pc, #200]	@ (80026ac <UART5_IRQHandler+0xe4>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d009      	beq.n	80025fc <UART5_IRQHandler+0x34>
	{
	  p_IsOK5 = u5rxbuf2;        // u6rxbuf2 可以读取，就绪指针指向它。
 80025e8:	4b31      	ldr	r3, [pc, #196]	@ (80026b0 <UART5_IRQHandler+0xe8>)
 80025ea:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <UART5_IRQHandler+0xec>)
 80025ec:	601a      	str	r2, [r3, #0]
	  p_IsToReceive5 = u5rxbuf1; // u6rxbuf1 作为下一次DMA存储的缓冲，占用指针指向它。
 80025ee:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <UART5_IRQHandler+0xf0>)
 80025f0:	4a32      	ldr	r2, [pc, #200]	@ (80026bc <UART5_IRQHandler+0xf4>)
 80025f2:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady5 = 0;		//切换一下指示器状态
 80025f4:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <UART5_IRQHandler+0xe4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e008      	b.n	800260e <UART5_IRQHandler+0x46>
	}
	else				//WhichBufIsReady=0
	{
	  p_IsOK5 = u5rxbuf1;        // u6rxbuf1 可以读取，就绪指针指向它。
 80025fc:	4b2c      	ldr	r3, [pc, #176]	@ (80026b0 <UART5_IRQHandler+0xe8>)
 80025fe:	4a2f      	ldr	r2, [pc, #188]	@ (80026bc <UART5_IRQHandler+0xf4>)
 8002600:	601a      	str	r2, [r3, #0]
	  p_IsToReceive5 = u5rxbuf2; // u6rxbuf2 作为下一次DMA存储的缓冲，占用指针指向它。
 8002602:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <UART5_IRQHandler+0xf0>)
 8002604:	4a2b      	ldr	r2, [pc, #172]	@ (80026b4 <UART5_IRQHandler+0xec>)
 8002606:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady5 = 1;		//切换一下指示器状态
 8002608:	4b28      	ldr	r3, [pc, #160]	@ (80026ac <UART5_IRQHandler+0xe4>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
	}

	memcpy(&Left.Ankle.Buf.rxData,p_IsOK5,33);
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <UART5_IRQHandler+0xe8>)
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <UART5_IRQHandler+0xf8>)
 8002614:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002618:	461a      	mov	r2, r3
 800261a:	460b      	mov	r3, r1
 800261c:	f202 4021 	addw	r0, r2, #1057	@ 0x421
 8002620:	f103 0420 	add.w	r4, r3, #32
 8002624:	4602      	mov	r2, r0
 8002626:	4619      	mov	r1, r3
 8002628:	f8d1 c000 	ldr.w	ip, [r1]
 800262c:	684e      	ldr	r6, [r1, #4]
 800262e:	688d      	ldr	r5, [r1, #8]
 8002630:	68c9      	ldr	r1, [r1, #12]
 8002632:	f8c2 c000 	str.w	ip, [r2]
 8002636:	6056      	str	r6, [r2, #4]
 8002638:	6095      	str	r5, [r2, #8]
 800263a:	60d1      	str	r1, [r2, #12]
 800263c:	3310      	adds	r3, #16
 800263e:	3010      	adds	r0, #16
 8002640:	42a3      	cmp	r3, r4
 8002642:	d1ef      	bne.n	8002624 <UART5_IRQHandler+0x5c>
 8002644:	4602      	mov	r2, r0
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	7013      	strb	r3, [r2, #0]
	MPU6050ModDataBufDMA(&Left.Ankle,2);
 800264a:	2102      	movs	r1, #2
 800264c:	481d      	ldr	r0, [pc, #116]	@ (80026c4 <UART5_IRQHandler+0xfc>)
 800264e:	f000 f8eb 	bl	8002828 <MPU6050ModDataBufDMA>
	Left.Ankle.AngxCal = Left.Ankle.Angx - Left.Knee.Angx;
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <UART5_IRQHandler+0xf8>)
 8002654:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8002658:	ed93 7af4 	vldr	s14, [r3, #976]	@ 0x3d0
 800265c:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <UART5_IRQHandler+0xf8>)
 800265e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8002662:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266e:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <UART5_IRQHandler+0xf8>)
 8002670:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8002674:	f603 7398 	addw	r3, r3, #3992	@ 0xf98
 8002678:	edc3 7a00 	vstr	s15, [r3]
//	Left.Ankle.AngxCal = low_pass_filter(Left.Ankle.AngxCal);


	///不管是复制也好，放进去队列也罢，处理你接收到的数据的代码建议从这里结束
	memset((uint8_t *)p_IsToReceive5, 0, MAX_RX_LEN);	// 把接收数据的指针指向的缓冲区清空
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <UART5_IRQHandler+0xf0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f005 fb5a 	bl	8007d40 <memset>
  }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800268c:	4806      	ldr	r0, [pc, #24]	@ (80026a8 <UART5_IRQHandler+0xe0>)
 800268e:	f002 ff93 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  HAL_UART_Receive_DMA(&huart5, p_IsToReceive5, MAX_RX_LEN); //数据处理完毕，重新启动接收
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <UART5_IRQHandler+0xf0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800269a:	4619      	mov	r1, r3
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <UART5_IRQHandler+0xe0>)
 800269e:	f002 fedb 	bl	8005458 <HAL_UART_Receive_DMA>
  /* USER CODE END UART5_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20009a70 	.word	0x20009a70
 80026ac:	2000981c 	.word	0x2000981c
 80026b0:	20001c48 	.word	0x20001c48
 80026b4:	2000971c 	.word	0x2000971c
 80026b8:	20001c4c 	.word	0x20001c4c
 80026bc:	2000961c 	.word	0x2000961c
 80026c0:	20001e58 	.word	0x20001e58
 80026c4:	20007210 	.word	0x20007210

080026c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80026cc:	4802      	ldr	r0, [pc, #8]	@ (80026d8 <DMA2_Stream1_IRQHandler+0x10>)
 80026ce:	f001 fb85 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20009da4 	.word	0x20009da4

080026dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <DMA2_Stream2_IRQHandler+0x10>)
 80026e2:	f001 fb7b 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20009c84 	.word	0x20009c84

080026f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if (RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))
 80026f4:	4b29      	ldr	r3, [pc, #164]	@ (800279c <USART6_IRQHandler+0xac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d13e      	bne.n	8002780 <USART6_IRQHandler+0x90>
  {
	// __HAL_UART_CLEAR_IDLEFLAG(&huart6);
	// 这一部分其实在 HAL_UART_IRQHandler(&huart6) 也完成了。

	HAL_UART_DMAStop(&huart6); // 把DMA接收停掉，防止速度过快导致中断重入，数据被覆写。
 8002702:	4826      	ldr	r0, [pc, #152]	@ (800279c <USART6_IRQHandler+0xac>)
 8002704:	f002 fed8 	bl	80054b8 <HAL_UART_DMAStop>

//	uint32_t data_length = MAX_RX_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);// 数据总长度=极限接收长度-DMA剩余的接收长度

	if (WhichBufIsReady6)	//WhichBufIsReady=1
 8002708:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <USART6_IRQHandler+0xb0>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <USART6_IRQHandler+0x34>
	{
	  p_IsOK6 = u6rxbuf2;        // u6rxbuf2 可以读取，就绪指针指向它。
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <USART6_IRQHandler+0xb4>)
 8002712:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <USART6_IRQHandler+0xb8>)
 8002714:	601a      	str	r2, [r3, #0]
	  p_IsToReceive6 = u6rxbuf1; // u6rxbuf1 作为下一次DMA存储的缓冲，占用指针指向它。
 8002716:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <USART6_IRQHandler+0xbc>)
 8002718:	4a25      	ldr	r2, [pc, #148]	@ (80027b0 <USART6_IRQHandler+0xc0>)
 800271a:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady6 = 0;		//切换一下指示器状态
 800271c:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <USART6_IRQHandler+0xb0>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e008      	b.n	8002736 <USART6_IRQHandler+0x46>
	}
	else				//WhichBufIsReady=0
	{
	  p_IsOK6 = u6rxbuf1;        // u6rxbuf1 可以读取，就绪指针指向它。
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <USART6_IRQHandler+0xb4>)
 8002726:	4a22      	ldr	r2, [pc, #136]	@ (80027b0 <USART6_IRQHandler+0xc0>)
 8002728:	601a      	str	r2, [r3, #0]
	  p_IsToReceive6 = u6rxbuf2; // u6rxbuf2 作为下一次DMA存储的缓冲，占用指针指向它。
 800272a:	4b20      	ldr	r3, [pc, #128]	@ (80027ac <USART6_IRQHandler+0xbc>)
 800272c:	4a1e      	ldr	r2, [pc, #120]	@ (80027a8 <USART6_IRQHandler+0xb8>)
 800272e:	601a      	str	r2, [r3, #0]
	  WhichBufIsReady6 = 1;		//切换一下指示器状态
 8002730:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <USART6_IRQHandler+0xb0>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
	}

	memcpy(&DataLeftBufFoot.HexBufSumFoot,p_IsOK6,34);
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <USART6_IRQHandler+0xb4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <USART6_IRQHandler+0xc4>)
 800273c:	f102 000e 	add.w	r0, r2, #14
 8002740:	f103 0420 	add.w	r4, r3, #32
 8002744:	4602      	mov	r2, r0
 8002746:	4619      	mov	r1, r3
 8002748:	f8d1 c000 	ldr.w	ip, [r1]
 800274c:	684e      	ldr	r6, [r1, #4]
 800274e:	688d      	ldr	r5, [r1, #8]
 8002750:	68c9      	ldr	r1, [r1, #12]
 8002752:	f8c2 c000 	str.w	ip, [r2]
 8002756:	6056      	str	r6, [r2, #4]
 8002758:	6095      	str	r5, [r2, #8]
 800275a:	60d1      	str	r1, [r2, #12]
 800275c:	3310      	adds	r3, #16
 800275e:	3010      	adds	r0, #16
 8002760:	42a3      	cmp	r3, r4
 8002762:	d1ef      	bne.n	8002744 <USART6_IRQHandler+0x54>
 8002764:	4602      	mov	r2, r0
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	8013      	strh	r3, [r2, #0]
//	DMA_usart2_printf("%d",p_IsOK6[0]);
	FootDataBufDMA(&DataLeftBufFoot);
 800276a:	4812      	ldr	r0, [pc, #72]	@ (80027b4 <USART6_IRQHandler+0xc4>)
 800276c:	f000 fa76 	bl	8002c5c <FootDataBufDMA>
//	DataLeftBufFoot.Data[4] = low_pass_filter(DataLeftBufFoot.Data[4],4);
//	DataLeftBufFoot.Data[12] = low_pass_filter(DataLeftBufFoot.Data[12],5);


	//处理接收到的数据的代码建议从这里结束
	memset((uint8_t *)p_IsToReceive6, 0, MAX_RX_LEN);	// 把接收数据的指针指向的缓冲区清空
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <USART6_IRQHandler+0xbc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f005 fae0 	bl	8007d40 <memset>
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002780:	4806      	ldr	r0, [pc, #24]	@ (800279c <USART6_IRQHandler+0xac>)
 8002782:	f002 ff19 	bl	80055b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  HAL_UART_Receive_DMA(&huart6, p_IsToReceive6, MAX_RX_LEN); //数据处理完毕，重新启动接收
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <USART6_IRQHandler+0xbc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800278e:	4619      	mov	r1, r3
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <USART6_IRQHandler+0xac>)
 8002792:	f002 fe61 	bl	8005458 <HAL_UART_Receive_DMA>
  /* USER CODE END USART6_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279a:	bf00      	nop
 800279c:	20009b80 	.word	0x20009b80
 80027a0:	20009a20 	.word	0x20009a20
 80027a4:	20001c50 	.word	0x20001c50
 80027a8:	20009920 	.word	0x20009920
 80027ac:	20001c54 	.word	0x20001c54
 80027b0:	20009820 	.word	0x20009820
 80027b4:	20000000 	.word	0x20000000

080027b8 <DMA_USART2_Tx_Data>:
  USART1_TX_FLAG = 1;                           // USART1发送标志（启动发送）
  HAL_UART_Transmit_DMA(&huart1, buffer, size); // 发送指定长度的数据
}

void DMA_USART2_Tx_Data(uint8_t *buffer, uint16_t size)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
  USART2_TX_Wait();                             // 等待上一次发送完成（USART2_TX_FLAG为1即还在发送数据）
 80027c4:	f000 f812 	bl	80027ec <USART2_TX_Wait>
  USART2_TX_FLAG = 1;                           // USART2发送标志（启动发送）
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <DMA_USART2_Tx_Data+0x2c>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&huart2, buffer, size); // 发送指定长度的数据
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	461a      	mov	r2, r3
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <DMA_USART2_Tx_Data+0x30>)
 80027d6:	f002 fdc1 	bl	800535c <HAL_UART_Transmit_DMA>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000900c 	.word	0x2000900c
 80027e8:	20009af8 	.word	0x20009af8

080027ec <USART2_TX_Wait>:
      return;
  }
}

void USART2_TX_Wait(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
  uint16_t delay = 20000;
 80027f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80027f6:	80fb      	strh	r3, [r7, #6]
  while (USART2_TX_FLAG)
 80027f8:	e005      	b.n	8002806 <USART2_TX_Wait+0x1a>
  {
    delay--;
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	80fb      	strh	r3, [r7, #6]
    if (delay == 0)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <USART2_TX_Wait+0x26>
  while (USART2_TX_FLAG)
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <USART2_TX_Wait+0x34>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f4      	bne.n	80027fa <USART2_TX_Wait+0xe>
 8002810:	e000      	b.n	8002814 <USART2_TX_Wait+0x28>
      return;
 8002812:	bf00      	nop
  }
}
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2000900c 	.word	0x2000900c
 8002824:	00000000 	.word	0x00000000

08002828 <MPU6050ModDataBufDMA>:
  DMA_USART2_Tx_Data(USART2_TX_BUF, strlen((const char *)USART2_TX_BUF));
  // 记得把buf里面的东西用HAL发出去
}

void MPU6050ModDataBufDMA(struct Data *AllData, int Joint)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
	uint8_t sumA,sumB,sumC = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<10;i++)
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	e01c      	b.n	8002876 <MPU6050ModDataBufDMA+0x4e>
	{
		sumA = sumA + AllData->Buf.rxData[i];
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4413      	add	r3, r2
 8002842:	3369      	adds	r3, #105	@ 0x69
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	4413      	add	r3, r2
 800284a:	73fb      	strb	r3, [r7, #15]
		sumB = sumB + AllData->Buf.rxData[i+11];
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	330b      	adds	r3, #11
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	f893 2069 	ldrb.w	r2, [r3, #105]	@ 0x69
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	4413      	add	r3, r2
 800285c:	73bb      	strb	r3, [r7, #14]
		sumC = sumC + AllData->Buf.rxData[i+22];
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3316      	adds	r3, #22
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	f893 2069 	ldrb.w	r2, [r3, #105]	@ 0x69
 800286a:	7b7b      	ldrb	r3, [r7, #13]
 800286c:	4413      	add	r3, r2
 800286e:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<10;i++)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b09      	cmp	r3, #9
 800287a:	dddf      	ble.n	800283c <MPU6050ModDataBufDMA+0x14>
	}
	if(sumA == AllData->Buf.rxData[10] && AllData->Buf.rxData[1] == 0x51)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 80b6 	bne.w	80029f6 <MPU6050ModDataBufDMA+0x1ce>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8002890:	2b51      	cmp	r3, #81	@ 0x51
 8002892:	f040 80b0 	bne.w	80029f6 <MPU6050ModDataBufDMA+0x1ce>
	{
		AllData->Buf.Accx = (AllData->Buf.rxData[3]<<8)|AllData->Buf.rxData[2];
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	b21a      	sxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
		AllData->Accx = (float) AllData->Buf.Accx/32768*16*g;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c2:	eddf 6ac7 	vldr	s13, [pc, #796]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 80028c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ca:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80028ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d2:	ee17 0a90 	vmov	r0, s15
 80028d6:	f7fd fe57 	bl	8000588 <__aeabi_f2d>
 80028da:	a3bb      	add	r3, pc, #748	@ (adr r3, 8002bc8 <MPU6050ModDataBufDMA+0x3a0>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd feaa 	bl	8000638 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f99c 	bl	8000c28 <__aeabi_d2f>
 80028f0:	4602      	mov	r2, r0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	601a      	str	r2, [r3, #0]
		AllData->Buf.Accy = (AllData->Buf.rxData[5]<<8)|AllData->Buf.rxData[4];
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21a      	sxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8002906:	b21b      	sxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b21b      	sxth	r3, r3
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
		AllData->Accy = (float) AllData->Buf.Accy/32768*16*g;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002922:	eddf 6aaf 	vldr	s13, [pc, #700]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800292a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800292e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002932:	ee17 0a90 	vmov	r0, s15
 8002936:	f7fd fe27 	bl	8000588 <__aeabi_f2d>
 800293a:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002bc8 <MPU6050ModDataBufDMA+0x3a0>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fe7a 	bl	8000638 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f7fe f96c 	bl	8000c28 <__aeabi_d2f>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]
		AllData->Buf.Accz = (AllData->Buf.rxData[7]<<8)|AllData->Buf.rxData[6];
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	b21a      	sxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
 8002966:	b21b      	sxth	r3, r3
 8002968:	4313      	orrs	r3, r2
 800296a:	b21b      	sxth	r3, r3
 800296c:	b29a      	uxth	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
		AllData->Accz = (float) AllData->Buf.Accz/32768*16*g;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002982:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	ee17 0a90 	vmov	r0, s15
 8002996:	f7fd fdf7 	bl	8000588 <__aeabi_f2d>
 800299a:	a38b      	add	r3, pc, #556	@ (adr r3, 8002bc8 <MPU6050ModDataBufDMA+0x3a0>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f7fd fe4a 	bl	8000638 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7fe f93c 	bl	8000c28 <__aeabi_d2f>
 80029b0:	4602      	mov	r2, r0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]
		if(AllData->Accx > 156.8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fde4 	bl	8000588 <__aeabi_f2d>
 80029c0:	a383      	add	r3, pc, #524	@ (adr r3, 8002bd0 <MPU6050ModDataBufDMA+0x3a8>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fe f8c7 	bl	8000b58 <__aeabi_dcmpgt>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <MPU6050ModDataBufDMA+0x1ce>
		{
		  AllData->Accx = AllData->Accx - 313.6;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdd7 	bl	8000588 <__aeabi_f2d>
 80029da:	a37f      	add	r3, pc, #508	@ (adr r3, 8002bd8 <MPU6050ModDataBufDMA+0x3b0>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fc72 	bl	80002c8 <__aeabi_dsub>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f91c 	bl	8000c28 <__aeabi_d2f>
 80029f0:	4602      	mov	r2, r0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
		}
	}
	if(sumB == AllData->Buf.rxData[21] && AllData->Buf.rxData[12] == 0x52)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80029fc:	7bba      	ldrb	r2, [r7, #14]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d17b      	bne.n	8002afa <MPU6050ModDataBufDMA+0x2d2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002a08:	2b52      	cmp	r3, #82	@ 0x52
 8002a0a:	d176      	bne.n	8002afa <MPU6050ModDataBufDMA+0x2d2>
	{
		AllData->Buf.AngAccx = (AllData->Buf.rxData[14]<<8)|AllData->Buf.rxData[13];
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
		AllData->AngAccx = (float) AllData->Buf.AngAccx/32768*2000;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a38:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a40:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002be4 <MPU6050ModDataBufDMA+0x3bc>
 8002a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edc3 7a03 	vstr	s15, [r3, #12]
		AllData->Buf.AngAccy = (AllData->Buf.rxData[16]<<8)|AllData->Buf.rxData[15];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002a5e:	b21b      	sxth	r3, r3
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
		AllData->AngAccy = (float) AllData->Buf.AngAccy/32768*2000;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a7a:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a82:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002be4 <MPU6050ModDataBufDMA+0x3bc>
 8002a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	edc3 7a04 	vstr	s15, [r3, #16]
		AllData->Buf.AngAccz = (AllData->Buf.rxData[18]<<8)|AllData->Buf.rxData[17];
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
		AllData->AngAccz = (float) AllData->Buf.AngAccz/32768*2000;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	@ 0x94
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002abc:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002be4 <MPU6050ModDataBufDMA+0x3bc>
 8002ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	edc3 7a05 	vstr	s15, [r3, #20]

		if(AllData->AngAccx > 2000)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ad8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002be4 <MPU6050ModDataBufDMA+0x3bc>
 8002adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae4:	dd09      	ble.n	8002afa <MPU6050ModDataBufDMA+0x2d2>
		{
		  AllData->AngAccx = AllData->AngAccx - 4000;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aec:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002be8 <MPU6050ModDataBufDMA+0x3c0>
 8002af0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	edc3 7a03 	vstr	s15, [r3, #12]
		}
	}
	if(sumC == AllData->Buf.rxData[32] && AllData->Buf.rxData[23] == 0x53)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002b00:	7b7a      	ldrb	r2, [r7, #13]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	f040 80a5 	bne.w	8002c52 <MPU6050ModDataBufDMA+0x42a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002b0e:	2b53      	cmp	r3, #83	@ 0x53
 8002b10:	f040 809f 	bne.w	8002c52 <MPU6050ModDataBufDMA+0x42a>
	{
		AllData->Buf.Angx = (AllData->Buf.rxData[25]<<8)|AllData->Buf.rxData[24];
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002b24:	b21b      	sxth	r3, r3
 8002b26:	4313      	orrs	r3, r2
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
		AllData->Angx = (float) AllData->Buf.Angx/32768*180;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b40:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b48:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002bf0 <MPU6050ModDataBufDMA+0x3c8>
 8002b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edc3 7a06 	vstr	s15, [r3, #24]
		AllData->Buf.Angy = (AllData->Buf.rxData[27]<<8)|AllData->Buf.rxData[26];
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	b21a      	sxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
		AllData->Angy = (float) AllData->Buf.Angy/32768*180;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b82:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002be0 <MPU6050ModDataBufDMA+0x3b8>
 8002b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b8a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002bf0 <MPU6050ModDataBufDMA+0x3c8>
 8002b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	edc3 7a07 	vstr	s15, [r3, #28]
		AllData->Buf.Angz = (AllData->Buf.rxData[29]<<8)|AllData->Buf.rxData[28];
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
		AllData->Angz = (float) AllData->Buf.Angz/32768*180;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	e01a      	b.n	8002bf8 <MPU6050ModDataBufDMA+0x3d0>
 8002bc2:	bf00      	nop
 8002bc4:	f3af 8000 	nop.w
 8002bc8:	9999999a 	.word	0x9999999a
 8002bcc:	40239999 	.word	0x40239999
 8002bd0:	9999999a 	.word	0x9999999a
 8002bd4:	40639999 	.word	0x40639999
 8002bd8:	9999999a 	.word	0x9999999a
 8002bdc:	40739999 	.word	0x40739999
 8002be0:	47000000 	.word	0x47000000
 8002be4:	44fa0000 	.word	0x44fa0000
 8002be8:	457a0000 	.word	0x457a0000
 8002bec:	47000000 	.word	0x47000000
 8002bf0:	43340000 	.word	0x43340000
 8002bf4:	43b40000 	.word	0x43b40000
 8002bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bfc:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8002bec <MPU6050ModDataBufDMA+0x3c4>
 8002c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c04:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8002bf0 <MPU6050ModDataBufDMA+0x3c8>
 8002c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	edc3 7a08 	vstr	s15, [r3, #32]

		AllData->Angx = AllData->Angx - AllData->AngxZero;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	edc3 7a06 	vstr	s15, [r3, #24]
		if(AllData->Angx > 180)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c2e:	ed1f 7a10 	vldr	s14, [pc, #-64]	@ 8002bf0 <MPU6050ModDataBufDMA+0x3c8>
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dc00      	bgt.n	8002c3e <MPU6050ModDataBufDMA+0x416>
		  AllData->Angx = AllData->Angx - 360;
		}
//		AllData->Angx = low_pass_filter(AllData->Angx,Joint);
	}

}
 8002c3c:	e009      	b.n	8002c52 <MPU6050ModDataBufDMA+0x42a>
		  AllData->Angx = AllData->Angx - 360;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c44:	ed1f 7a15 	vldr	s14, [pc, #-84]	@ 8002bf4 <MPU6050ModDataBufDMA+0x3cc>
 8002c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop

08002c5c <FootDataBufDMA>:

void FootDataBufDMA(struct DataUnionBuf *AllData)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	if(AllData->HexBufSumFoot[0] == 0x64 && AllData->HexBufSumFoot[33] == 0x65)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7b9b      	ldrb	r3, [r3, #14]
 8002c68:	2b64      	cmp	r3, #100	@ 0x64
 8002c6a:	d144      	bne.n	8002cf6 <FootDataBufDMA+0x9a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002c72:	2b65      	cmp	r3, #101	@ 0x65
 8002c74:	d13f      	bne.n	8002cf6 <FootDataBufDMA+0x9a>
	{
		for(int i=0;i<8;i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e039      	b.n	8002cf0 <FootDataBufDMA+0x94>
		{
			for(int j=0;j<4;j++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	e010      	b.n	8002ca4 <FootDataBufDMA+0x48>
			{
				AllData->DataUnionBufReceive.HexBuf[j] = AllData->HexBufSumFoot[4*i+j+1];
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	7b99      	ldrb	r1, [r3, #14]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4413      	add	r3, r2
 8002c98:	3340      	adds	r3, #64	@ 0x40
 8002c9a:	460a      	mov	r2, r1
 8002c9c:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<4;j++)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	ddeb      	ble.n	8002c82 <FootDataBufDMA+0x26>
			}
			if(150 < AllData->DataUnionBufReceive.FloatBuf && AllData->DataUnionBufReceive.FloatBuf < 4096)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002cb0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002d04 <FootDataBufDMA+0xa8>
 8002cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	dd15      	ble.n	8002cea <FootDataBufDMA+0x8e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002cc4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002d08 <FootDataBufDMA+0xac>
 8002cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	d50b      	bpl.n	8002cea <FootDataBufDMA+0x8e>
			{
				AllData->Data[AllData->Point[i]] = AllData->DataUnionBufReceive.FloatBuf;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	3232      	adds	r2, #50	@ 0x32
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	3312      	adds	r3, #18
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	601a      	str	r2, [r3, #0]
		for(int i=0;i<8;i++)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3301      	adds	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b07      	cmp	r3, #7
 8002cf4:	ddc2      	ble.n	8002c7c <FootDataBufDMA+0x20>
			}
		}
	}
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	43160000 	.word	0x43160000
 8002d08:	45800000 	.word	0x45800000

08002d0c <low_pass_filter_init>:
*修改日期:	20231129
 * 参数		| 介绍
 * ---------+--------------------------------------
 * 无		| 无
*******************************************************************************/
void low_pass_filter_init(void){
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
    float b = 2.0 * pi * fc * Ts;
 8002d12:	4b20      	ldr	r3, [pc, #128]	@ (8002d94 <low_pass_filter_init+0x88>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc36 	bl	8000588 <__aeabi_f2d>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	f7fd fad4 	bl	80002cc <__adddf3>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d98 <low_pass_filter_init+0x8c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc29 	bl	8000588 <__aeabi_f2d>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f7fd fc7b 	bl	8000638 <__aeabi_dmul>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <low_pass_filter_init+0x90>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fc1a 	bl	8000588 <__aeabi_f2d>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4620      	mov	r0, r4
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	f7fd fc6c 	bl	8000638 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff5e 	bl	8000c28 <__aeabi_d2f>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	607b      	str	r3, [r7, #4]
    alpha = b / (b + 1);
 8002d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d7c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <low_pass_filter_init+0x94>)
 8002d86:	edc3 7a00 	vstr	s15, [r3]
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20001c60 	.word	0x20001c60
 8002d98:	20001c58 	.word	0x20001c58
 8002d9c:	20001c5c 	.word	0x20001c5c
 8002da0:	20009a24 	.word	0x20009a24

08002da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return 1;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_kill>:

int _kill(int pid, int sig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dbe:	f005 f821 	bl	8007e04 <__errno>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2216      	movs	r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ffe7 	bl	8002db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <_exit+0x12>

08002dea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e00a      	b.n	8002e12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dfc:	f3af 8000 	nop.w
 8002e00:	4601      	mov	r1, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	60ba      	str	r2, [r7, #8]
 8002e08:	b2ca      	uxtb	r2, r1
 8002e0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dbf0      	blt.n	8002dfc <_read+0x12>
  }

  return len;
 8002e1a:	687b      	ldr	r3, [r7, #4]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e009      	b.n	8002e4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	60ba      	str	r2, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fbc8 	bl	80015d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3301      	adds	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbf1      	blt.n	8002e36 <_write+0x12>
  }
  return len;
 8002e52:	687b      	ldr	r3, [r7, #4]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_close>:

int _close(int file)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e84:	605a      	str	r2, [r3, #4]
  return 0;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_isatty>:

int _isatty(int file)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <_sbrk+0x5c>)
 8002ece:	4b15      	ldr	r3, [pc, #84]	@ (8002f24 <_sbrk+0x60>)
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed8:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <_sbrk+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <_sbrk+0x64>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	@ (8002f2c <_sbrk+0x68>)
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d207      	bcs.n	8002f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef4:	f004 ff86 	bl	8007e04 <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	220c      	movs	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e009      	b.n	8002f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <_sbrk+0x64>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <_sbrk+0x64>)
 8002f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f16:	68fb      	ldr	r3, [r7, #12]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20020000 	.word	0x20020000
 8002f24:	00000400 	.word	0x00000400
 8002f28:	20009a28 	.word	0x20009a28
 8002f2c:	20009f58 	.word	0x20009f58

08002f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <SystemInit+0x20>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	4a05      	ldr	r2, [pc, #20]	@ (8002f50 <SystemInit+0x20>)
 8002f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <MX_UART4_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <MX_UART4_Init+0x4c>)
 8002f8c:	f002 f8d6 	bl	800513c <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f96:	f7ff f8e3 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20009a2c 	.word	0x20009a2c
 8002fa4:	40004c00 	.word	0x40004c00

08002fa8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <MX_UART5_Init+0x50>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 460800;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fb4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8002fb8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002fde:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <MX_UART5_Init+0x4c>)
 8002fe0:	f002 f8ac 	bl	800513c <HAL_UART_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002fea:	f7ff f8b9 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20009a70 	.word	0x20009a70
 8002ff8:	40005000 	.word	0x40005000

08002ffc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003002:	4a12      	ldr	r2, [pc, #72]	@ (800304c <MX_USART1_UART_Init+0x50>)
 8003004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800300c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800300e:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800301a:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003022:	220c      	movs	r2, #12
 8003024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003026:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003032:	4805      	ldr	r0, [pc, #20]	@ (8003048 <MX_USART1_UART_Init+0x4c>)
 8003034:	f002 f882 	bl	800513c <HAL_UART_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800303e:	f7ff f88f 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20009ab4 	.word	0x20009ab4
 800304c:	40011000 	.word	0x40011000

08003050 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 8003056:	4a11      	ldr	r2, [pc, #68]	@ (800309c <MX_USART2_UART_Init+0x4c>)
 8003058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800305a:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 800305c:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <MX_USART2_UART_Init+0x50>)
 800305e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003060:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 8003074:	220c      	movs	r2, #12
 8003076:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003084:	4804      	ldr	r0, [pc, #16]	@ (8003098 <MX_USART2_UART_Init+0x48>)
 8003086:	f002 f859 	bl	800513c <HAL_UART_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8003090:	f7ff f866 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20009af8 	.word	0x20009af8
 800309c:	40004400 	.word	0x40004400
 80030a0:	0007a120 	.word	0x0007a120

080030a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030aa:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <MX_USART3_UART_Init+0x50>)
 80030ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030ae:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030b6:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030ca:	220c      	movs	r2, #12
 80030cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d4:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030da:	4805      	ldr	r0, [pc, #20]	@ (80030f0 <MX_USART3_UART_Init+0x4c>)
 80030dc:	f002 f82e 	bl	800513c <HAL_UART_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030e6:	f7ff f83b 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20009b3c 	.word	0x20009b3c
 80030f4:	40004800 	.word	0x40004800

080030f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80030fc:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 80030fe:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <MX_USART6_UART_Init+0x4c>)
 8003100:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 500000;
 8003102:	4b0f      	ldr	r3, [pc, #60]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 8003104:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <MX_USART6_UART_Init+0x50>)
 8003106:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800310e:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 8003116:	2200      	movs	r2, #0
 8003118:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800311a:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 800311c:	220c      	movs	r2, #12
 800311e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 8003128:	2200      	movs	r2, #0
 800312a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800312c:	4804      	ldr	r0, [pc, #16]	@ (8003140 <MX_USART6_UART_Init+0x48>)
 800312e:	f002 f805 	bl	800513c <HAL_UART_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8003138:	f7ff f812 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20009b80 	.word	0x20009b80
 8003144:	40011400 	.word	0x40011400
 8003148:	0007a120 	.word	0x0007a120

0800314c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b094      	sub	sp, #80	@ 0x50
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a77      	ldr	r2, [pc, #476]	@ (8003348 <HAL_UART_MspInit+0x1fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d163      	bne.n	8003236 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003172:	4b76      	ldr	r3, [pc, #472]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	4a75      	ldr	r2, [pc, #468]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003178:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800317c:	6413      	str	r3, [r2, #64]	@ 0x40
 800317e:	4b73      	ldr	r3, [pc, #460]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
 800318e:	4b6f      	ldr	r3, [pc, #444]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	4a6e      	ldr	r2, [pc, #440]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6313      	str	r3, [r2, #48]	@ 0x30
 800319a:	4b6c      	ldr	r3, [pc, #432]	@ (800334c <HAL_UART_MspInit+0x200>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031a6:	2303      	movs	r3, #3
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031b6:	2308      	movs	r3, #8
 80031b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031be:	4619      	mov	r1, r3
 80031c0:	4863      	ldr	r0, [pc, #396]	@ (8003350 <HAL_UART_MspInit+0x204>)
 80031c2:	f001 f875 	bl	80042b0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80031c6:	4b63      	ldr	r3, [pc, #396]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031c8:	4a63      	ldr	r2, [pc, #396]	@ (8003358 <HAL_UART_MspInit+0x20c>)
 80031ca:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80031cc:	4b61      	ldr	r3, [pc, #388]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031d2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d4:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031da:	4b5e      	ldr	r3, [pc, #376]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ee:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80031f4:	4b57      	ldr	r3, [pc, #348]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80031fa:	4b56      	ldr	r3, [pc, #344]	@ (8003354 <HAL_UART_MspInit+0x208>)
 80031fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003200:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003202:	4b54      	ldr	r3, [pc, #336]	@ (8003354 <HAL_UART_MspInit+0x208>)
 8003204:	2200      	movs	r2, #0
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003208:	4852      	ldr	r0, [pc, #328]	@ (8003354 <HAL_UART_MspInit+0x208>)
 800320a:	f000 fc4f 	bl	8003aac <HAL_DMA_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003214:	f7fe ffa4 	bl	8002160 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4e      	ldr	r2, [pc, #312]	@ (8003354 <HAL_UART_MspInit+0x208>)
 800321c:	639a      	str	r2, [r3, #56]	@ 0x38
 800321e:	4a4d      	ldr	r2, [pc, #308]	@ (8003354 <HAL_UART_MspInit+0x208>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8003224:	2200      	movs	r2, #0
 8003226:	2102      	movs	r1, #2
 8003228:	2034      	movs	r0, #52	@ 0x34
 800322a:	f000 fc08 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800322e:	2034      	movs	r0, #52	@ 0x34
 8003230:	f000 fc21 	bl	8003a76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003234:	e25a      	b.n	80036ec <HAL_UART_MspInit+0x5a0>
  else if(uartHandle->Instance==UART5)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a48      	ldr	r2, [pc, #288]	@ (800335c <HAL_UART_MspInit+0x210>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f040 8097 	bne.w	8003370 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	633b      	str	r3, [r7, #48]	@ 0x30
 8003246:	4b41      	ldr	r3, [pc, #260]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	4a40      	ldr	r2, [pc, #256]	@ (800334c <HAL_UART_MspInit+0x200>)
 800324c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003250:	6413      	str	r3, [r2, #64]	@ 0x40
 8003252:	4b3e      	ldr	r3, [pc, #248]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003262:	4b3a      	ldr	r3, [pc, #232]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	4a39      	ldr	r2, [pc, #228]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	6313      	str	r3, [r2, #48]	@ 0x30
 800326e:	4b37      	ldr	r3, [pc, #220]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327e:	4b33      	ldr	r3, [pc, #204]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a32      	ldr	r2, [pc, #200]	@ (800334c <HAL_UART_MspInit+0x200>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b30      	ldr	r3, [pc, #192]	@ (800334c <HAL_UART_MspInit+0x200>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032a8:	2308      	movs	r3, #8
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032b0:	4619      	mov	r1, r3
 80032b2:	482b      	ldr	r0, [pc, #172]	@ (8003360 <HAL_UART_MspInit+0x214>)
 80032b4:	f000 fffc 	bl	80042b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032b8:	2304      	movs	r3, #4
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80032c8:	2308      	movs	r3, #8
 80032ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032d0:	4619      	mov	r1, r3
 80032d2:	4824      	ldr	r0, [pc, #144]	@ (8003364 <HAL_UART_MspInit+0x218>)
 80032d4:	f000 ffec 	bl	80042b0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80032d8:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 80032da:	4a24      	ldr	r2, [pc, #144]	@ (800336c <HAL_UART_MspInit+0x220>)
 80032dc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80032de:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 80032e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032e4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 80032f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032f8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 8003302:	2200      	movs	r2, #0
 8003304:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003306:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 8003308:	2200      	movs	r2, #0
 800330a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800330c:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 800330e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003312:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003314:	4b14      	ldr	r3, [pc, #80]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800331a:	4813      	ldr	r0, [pc, #76]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 800331c:	f000 fbc6 	bl	8003aac <HAL_DMA_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8003326:	f7fe ff1b 	bl	8002160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0e      	ldr	r2, [pc, #56]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003330:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <HAL_UART_MspInit+0x21c>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 2, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2102      	movs	r1, #2
 800333a:	2035      	movs	r0, #53	@ 0x35
 800333c:	f000 fb7f 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003340:	2035      	movs	r0, #53	@ 0x35
 8003342:	f000 fb98 	bl	8003a76 <HAL_NVIC_EnableIRQ>
}
 8003346:	e1d1      	b.n	80036ec <HAL_UART_MspInit+0x5a0>
 8003348:	40004c00 	.word	0x40004c00
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000
 8003354:	20009bc4 	.word	0x20009bc4
 8003358:	40026040 	.word	0x40026040
 800335c:	40005000 	.word	0x40005000
 8003360:	40020800 	.word	0x40020800
 8003364:	40020c00 	.word	0x40020c00
 8003368:	20009c24 	.word	0x20009c24
 800336c:	40026010 	.word	0x40026010
  else if(uartHandle->Instance==USART1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a9d      	ldr	r2, [pc, #628]	@ (80035ec <HAL_UART_MspInit+0x4a0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d164      	bne.n	8003444 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
 800337e:	4b9c      	ldr	r3, [pc, #624]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	4a9b      	ldr	r2, [pc, #620]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003384:	f043 0310 	orr.w	r3, r3, #16
 8003388:	6453      	str	r3, [r2, #68]	@ 0x44
 800338a:	4b99      	ldr	r3, [pc, #612]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	4b95      	ldr	r3, [pc, #596]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	4a94      	ldr	r2, [pc, #592]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a6:	4b92      	ldr	r3, [pc, #584]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	623b      	str	r3, [r7, #32]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033c4:	2307      	movs	r3, #7
 80033c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033cc:	4619      	mov	r1, r3
 80033ce:	4889      	ldr	r0, [pc, #548]	@ (80035f4 <HAL_UART_MspInit+0x4a8>)
 80033d0:	f000 ff6e 	bl	80042b0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80033d4:	4b88      	ldr	r3, [pc, #544]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033d6:	4a89      	ldr	r2, [pc, #548]	@ (80035fc <HAL_UART_MspInit+0x4b0>)
 80033d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80033da:	4b87      	ldr	r3, [pc, #540]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e2:	4b85      	ldr	r3, [pc, #532]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e8:	4b83      	ldr	r3, [pc, #524]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ee:	4b82      	ldr	r3, [pc, #520]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f6:	4b80      	ldr	r3, [pc, #512]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fc:	4b7e      	ldr	r3, [pc, #504]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003402:	4b7d      	ldr	r3, [pc, #500]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 8003404:	2200      	movs	r2, #0
 8003406:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003408:	4b7b      	ldr	r3, [pc, #492]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 800340a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800340e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003410:	4b79      	ldr	r3, [pc, #484]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003416:	4878      	ldr	r0, [pc, #480]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 8003418:	f000 fb48 	bl	8003aac <HAL_DMA_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_MspInit+0x2da>
      Error_Handler();
 8003422:	f7fe fe9d 	bl	8002160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a73      	ldr	r2, [pc, #460]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38
 800342c:	4a72      	ldr	r2, [pc, #456]	@ (80035f8 <HAL_UART_MspInit+0x4ac>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2102      	movs	r1, #2
 8003436:	2025      	movs	r0, #37	@ 0x25
 8003438:	f000 fb01 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800343c:	2025      	movs	r0, #37	@ 0x25
 800343e:	f000 fb1a 	bl	8003a76 <HAL_NVIC_EnableIRQ>
}
 8003442:	e153      	b.n	80036ec <HAL_UART_MspInit+0x5a0>
  else if(uartHandle->Instance==USART2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6d      	ldr	r2, [pc, #436]	@ (8003600 <HAL_UART_MspInit+0x4b4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d163      	bne.n	8003516 <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	4b67      	ldr	r3, [pc, #412]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	4a66      	ldr	r2, [pc, #408]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345c:	6413      	str	r3, [r2, #64]	@ 0x40
 800345e:	4b64      	ldr	r3, [pc, #400]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	4b60      	ldr	r3, [pc, #384]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	4a5f      	ldr	r2, [pc, #380]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6313      	str	r3, [r2, #48]	@ 0x30
 800347a:	4b5d      	ldr	r3, [pc, #372]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003486:	230c      	movs	r3, #12
 8003488:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348a:	2302      	movs	r3, #2
 800348c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003496:	2307      	movs	r3, #7
 8003498:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800349e:	4619      	mov	r1, r3
 80034a0:	4854      	ldr	r0, [pc, #336]	@ (80035f4 <HAL_UART_MspInit+0x4a8>)
 80034a2:	f000 ff05 	bl	80042b0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80034a6:	4b57      	ldr	r3, [pc, #348]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034a8:	4a57      	ldr	r2, [pc, #348]	@ (8003608 <HAL_UART_MspInit+0x4bc>)
 80034aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80034ac:	4b55      	ldr	r3, [pc, #340]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b4:	4b53      	ldr	r3, [pc, #332]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034b6:	2240      	movs	r2, #64	@ 0x40
 80034b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ba:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034c0:	4b50      	ldr	r3, [pc, #320]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80034da:	4b4a      	ldr	r3, [pc, #296]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e2:	4b48      	ldr	r3, [pc, #288]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034e8:	4846      	ldr	r0, [pc, #280]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034ea:	f000 fadf 	bl	8003aac <HAL_DMA_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 80034f4:	f7fe fe34 	bl	8002160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a42      	ldr	r2, [pc, #264]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80034fe:	4a41      	ldr	r2, [pc, #260]	@ (8003604 <HAL_UART_MspInit+0x4b8>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	2026      	movs	r0, #38	@ 0x26
 800350a:	f000 fa98 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800350e:	2026      	movs	r0, #38	@ 0x26
 8003510:	f000 fab1 	bl	8003a76 <HAL_NVIC_EnableIRQ>
}
 8003514:	e0ea      	b.n	80036ec <HAL_UART_MspInit+0x5a0>
  else if(uartHandle->Instance==USART3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3c      	ldr	r2, [pc, #240]	@ (800360c <HAL_UART_MspInit+0x4c0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d17d      	bne.n	800361c <HAL_UART_MspInit+0x4d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	4b32      	ldr	r3, [pc, #200]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 800352a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800352e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003530:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6313      	str	r3, [r2, #48]	@ 0x30
 800354c:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <HAL_UART_MspInit+0x4a4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003558:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800356a:	2307      	movs	r3, #7
 800356c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003572:	4619      	mov	r1, r3
 8003574:	4826      	ldr	r0, [pc, #152]	@ (8003610 <HAL_UART_MspInit+0x4c4>)
 8003576:	f000 fe9b 	bl	80042b0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800357a:	4b26      	ldr	r3, [pc, #152]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 800357c:	4a26      	ldr	r2, [pc, #152]	@ (8003618 <HAL_UART_MspInit+0x4cc>)
 800357e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 8003582:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003586:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003588:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003594:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 8003596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800359a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80035ae:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035b4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b6:	4b17      	ldr	r3, [pc, #92]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80035bc:	4815      	ldr	r0, [pc, #84]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035be:	f000 fa75 	bl	8003aac <HAL_DMA_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_UART_MspInit+0x480>
      Error_Handler();
 80035c8:	f7fe fdca 	bl	8002160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a11      	ldr	r2, [pc, #68]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80035d2:	4a10      	ldr	r2, [pc, #64]	@ (8003614 <HAL_UART_MspInit+0x4c8>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80035d8:	2200      	movs	r2, #0
 80035da:	2102      	movs	r1, #2
 80035dc:	2027      	movs	r0, #39	@ 0x27
 80035de:	f000 fa2e 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035e2:	2027      	movs	r0, #39	@ 0x27
 80035e4:	f000 fa47 	bl	8003a76 <HAL_NVIC_EnableIRQ>
}
 80035e8:	e080      	b.n	80036ec <HAL_UART_MspInit+0x5a0>
 80035ea:	bf00      	nop
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	20009c84 	.word	0x20009c84
 80035fc:	40026440 	.word	0x40026440
 8003600:	40004400 	.word	0x40004400
 8003604:	20009ce4 	.word	0x20009ce4
 8003608:	400260a0 	.word	0x400260a0
 800360c:	40004800 	.word	0x40004800
 8003610:	40020800 	.word	0x40020800
 8003614:	20009d44 	.word	0x20009d44
 8003618:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a34      	ldr	r2, [pc, #208]	@ (80036f4 <HAL_UART_MspInit+0x5a8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d162      	bne.n	80036ec <HAL_UART_MspInit+0x5a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	4b33      	ldr	r3, [pc, #204]	@ (80036f8 <HAL_UART_MspInit+0x5ac>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	4a32      	ldr	r2, [pc, #200]	@ (80036f8 <HAL_UART_MspInit+0x5ac>)
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	6453      	str	r3, [r2, #68]	@ 0x44
 8003636:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_UART_MspInit+0x5ac>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <HAL_UART_MspInit+0x5ac>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	4a2b      	ldr	r2, [pc, #172]	@ (80036f8 <HAL_UART_MspInit+0x5ac>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6313      	str	r3, [r2, #48]	@ 0x30
 8003652:	4b29      	ldr	r3, [pc, #164]	@ (80036f8 <HAL_UART_MspInit+0x5ac>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800365e:	23c0      	movs	r3, #192	@ 0xc0
 8003660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366a:	2303      	movs	r3, #3
 800366c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800366e:	2308      	movs	r3, #8
 8003670:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003672:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003676:	4619      	mov	r1, r3
 8003678:	4820      	ldr	r0, [pc, #128]	@ (80036fc <HAL_UART_MspInit+0x5b0>)
 800367a:	f000 fe19 	bl	80042b0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800367e:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 8003680:	4a20      	ldr	r2, [pc, #128]	@ (8003704 <HAL_UART_MspInit+0x5b8>)
 8003682:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003684:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 8003686:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800368a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368c:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 800369a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800369e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80036ac:	4b14      	ldr	r3, [pc, #80]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80036b2:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036b8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ba:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036bc:	2200      	movs	r2, #0
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80036c0:	480f      	ldr	r0, [pc, #60]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036c2:	f000 f9f3 	bl	8003aac <HAL_DMA_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_MspInit+0x584>
      Error_Handler();
 80036cc:	f7fe fd48 	bl	8002160 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80036d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003700 <HAL_UART_MspInit+0x5b4>)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 2, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	2102      	movs	r1, #2
 80036e0:	2047      	movs	r0, #71	@ 0x47
 80036e2:	f000 f9ac 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80036e6:	2047      	movs	r0, #71	@ 0x47
 80036e8:	f000 f9c5 	bl	8003a76 <HAL_NVIC_EnableIRQ>
}
 80036ec:	bf00      	nop
 80036ee:	3750      	adds	r7, #80	@ 0x50
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40011400 	.word	0x40011400
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40020800 	.word	0x40020800
 8003700:	20009da4 	.word	0x20009da4
 8003704:	40026428 	.word	0x40026428

08003708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800370c:	480d      	ldr	r0, [pc, #52]	@ (8003744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370e:	490e      	ldr	r1, [pc, #56]	@ (8003748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003710:	4a0e      	ldr	r2, [pc, #56]	@ (800374c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0b      	ldr	r2, [pc, #44]	@ (8003750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003724:	4c0b      	ldr	r4, [pc, #44]	@ (8003754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003732:	f7ff fbfd 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003736:	f004 fb6b 	bl	8007e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800373a:	f7fd fd0d 	bl	8001158 <main>
  bx  lr    
 800373e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003748:	20001e38 	.word	0x20001e38
  ldr r2, =_sidata
 800374c:	0800bf24 	.word	0x0800bf24
  ldr r2, =_sbss
 8003750:	20001e38 	.word	0x20001e38
  ldr r4, =_ebss
 8003754:	20009f54 	.word	0x20009f54

08003758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC_IRQHandler>
	...

0800375c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003760:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <HAL_Init+0x40>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <HAL_Init+0x40>)
 8003766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800376a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <HAL_Init+0x40>)
 8003772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a07      	ldr	r2, [pc, #28]	@ (800379c <HAL_Init+0x40>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003784:	2003      	movs	r0, #3
 8003786:	f000 f94f 	bl	8003a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800378a:	200f      	movs	r0, #15
 800378c:	f000 f808 	bl	80037a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003790:	f7fe fcec 	bl	800216c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023c00 	.word	0x40023c00

080037a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a8:	4b12      	ldr	r3, [pc, #72]	@ (80037f4 <HAL_InitTick+0x54>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b12      	ldr	r3, [pc, #72]	@ (80037f8 <HAL_InitTick+0x58>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f967 	bl	8003a92 <HAL_SYSTICK_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00e      	b.n	80037ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d80a      	bhi.n	80037ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d4:	2200      	movs	r2, #0
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f000 f92f 	bl	8003a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e0:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <HAL_InitTick+0x5c>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20001c64 	.word	0x20001c64
 80037f8:	20001c6c 	.word	0x20001c6c
 80037fc:	20001c68 	.word	0x20001c68

08003800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003804:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_IncTick+0x20>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_IncTick+0x24>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4413      	add	r3, r2
 8003810:	4a04      	ldr	r2, [pc, #16]	@ (8003824 <HAL_IncTick+0x24>)
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20001c6c 	.word	0x20001c6c
 8003824:	20009e04 	.word	0x20009e04

08003828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return uwTick;
 800382c:	4b03      	ldr	r3, [pc, #12]	@ (800383c <HAL_GetTick+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20009e04 	.word	0x20009e04

08003840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff ffee 	bl	8003828 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d005      	beq.n	8003866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_Delay+0x44>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003866:	bf00      	nop
 8003868:	f7ff ffde 	bl	8003828 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d8f7      	bhi.n	8003868 <HAL_Delay+0x28>
  {
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20001c6c 	.word	0x20001c6c

08003888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003898:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <__NVIC_SetPriorityGrouping+0x44>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038a4:	4013      	ands	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ba:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <__NVIC_SetPriorityGrouping+0x44>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60d3      	str	r3, [r2, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <__NVIC_GetPriorityGrouping+0x18>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f003 0307 	and.w	r3, r3, #7
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db0b      	blt.n	8003916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	4907      	ldr	r1, [pc, #28]	@ (8003924 <__NVIC_EnableIRQ+0x38>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2001      	movs	r0, #1
 800390e:	fa00 f202 	lsl.w	r2, r0, r2
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	@ (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	@ (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	@ 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1c3 0307 	rsb	r3, r3, #7
 8003996:	2b04      	cmp	r3, #4
 8003998:	bf28      	it	cs
 800399a:	2304      	movcs	r3, #4
 800399c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d902      	bls.n	80039ac <NVIC_EncodePriority+0x30>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3b03      	subs	r3, #3
 80039aa:	e000      	b.n	80039ae <NVIC_EncodePriority+0x32>
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43d9      	mvns	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	4313      	orrs	r3, r2
         );
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	@ 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039f4:	d301      	bcc.n	80039fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00f      	b.n	8003a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003a24 <SysTick_Config+0x40>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a02:	210f      	movs	r1, #15
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	f7ff ff8e 	bl	8003928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <SysTick_Config+0x40>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a12:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <SysTick_Config+0x40>)
 8003a14:	2207      	movs	r2, #7
 8003a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000e010 	.word	0xe000e010

08003a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff29 	bl	8003888 <__NVIC_SetPriorityGrouping>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a50:	f7ff ff3e 	bl	80038d0 <__NVIC_GetPriorityGrouping>
 8003a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	6978      	ldr	r0, [r7, #20]
 8003a5c:	f7ff ff8e 	bl	800397c <NVIC_EncodePriority>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff5d 	bl	8003928 <__NVIC_SetPriority>
}
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff31 	bl	80038ec <__NVIC_EnableIRQ>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ffa2 	bl	80039e4 <SysTick_Config>
 8003aa0:	4603      	mov	r3, r0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff feb6 	bl	8003828 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e099      	b.n	8003bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae8:	e00f      	b.n	8003b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aea:	f7ff fe9d 	bl	8003828 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d908      	bls.n	8003b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e078      	b.n	8003bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e8      	bne.n	8003aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4b38      	ldr	r3, [pc, #224]	@ (8003c04 <HAL_DMA_Init+0x158>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d107      	bne.n	8003b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0307 	bic.w	r3, r3, #7
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d117      	bne.n	8003bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fb01 	bl	80041b8 <DMA_CheckFifoParam>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2240      	movs	r2, #64	@ 0x40
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e016      	b.n	8003bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fab8 	bl	800414c <DMA_CalcBaseAndBitshift>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	223f      	movs	r2, #63	@ 0x3f
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	f010803f 	.word	0xf010803f

08003c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_DMA_Start_IT+0x26>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e040      	b.n	8003cb0 <HAL_DMA_Start_IT+0xa8>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d12f      	bne.n	8003ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa4a 	bl	80040f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	223f      	movs	r2, #63	@ 0x3f
 8003c62:	409a      	lsls	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0216 	orr.w	r2, r2, #22
 8003c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e005      	b.n	8003cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
 8003cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cc6:	f7ff fdaf 	bl	8003828 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d008      	beq.n	8003cea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2280      	movs	r2, #128	@ 0x80
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e052      	b.n	8003d90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0216 	bic.w	r2, r2, #22
 8003cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <HAL_DMA_Abort+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0208 	bic.w	r2, r2, #8
 8003d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d3a:	e013      	b.n	8003d64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d3c:	f7ff fd74 	bl	8003828 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d90c      	bls.n	8003d64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e015      	b.n	8003d90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e4      	bne.n	8003d3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	223f      	movs	r2, #63	@ 0x3f
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2280      	movs	r2, #128	@ 0x80
 8003db0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00c      	b.n	8003dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2205      	movs	r2, #5
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003de8:	4b8e      	ldr	r3, [pc, #568]	@ (8004024 <HAL_DMA_IRQHandler+0x248>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a8e      	ldr	r2, [pc, #568]	@ (8004028 <HAL_DMA_IRQHandler+0x24c>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0a9b      	lsrs	r3, r3, #10
 8003df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	2208      	movs	r2, #8
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01a      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e34:	2208      	movs	r2, #8
 8003e36:	409a      	lsls	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	f043 0202 	orr.w	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e82:	2204      	movs	r2, #4
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eac:	f043 0204 	orr.w	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb8:	2210      	movs	r2, #16
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d043      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03c      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d024      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	e01f      	b.n	8003f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	e016      	b.n	8003f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0208 	bic.w	r2, r2, #8
 8003f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	2220      	movs	r2, #32
 8003f52:	409a      	lsls	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 808f 	beq.w	800407c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8087 	beq.w	800407c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	2220      	movs	r2, #32
 8003f74:	409a      	lsls	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d136      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0216 	bic.w	r2, r2, #22
 8003f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_DMA_IRQHandler+0x1da>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0208 	bic.w	r2, r2, #8
 8003fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	223f      	movs	r2, #63	@ 0x3f
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d07e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
        }
        return;
 8003ff2:	e079      	b.n	80040e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01d      	beq.n	800403e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10d      	bne.n	800402c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	2b00      	cmp	r3, #0
 8004016:	d031      	beq.n	800407c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
 8004020:	e02c      	b.n	800407c <HAL_DMA_IRQHandler+0x2a0>
 8004022:	bf00      	nop
 8004024:	20001c64 	.word	0x20001c64
 8004028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d023      	beq.n	800407c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
 800403c:	e01e      	b.n	800407c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10f      	bne.n	800406c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0210 	bic.w	r2, r2, #16
 800405a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	2b00      	cmp	r3, #0
 8004082:	d032      	beq.n	80040ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2205      	movs	r2, #5
 8004094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d307      	bcc.n	80040c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f2      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x2cc>
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
 80040e6:	e000      	b.n	80040ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80040e8:	bf00      	nop
    }
  }
}
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800410c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d108      	bne.n	8004130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800412e:	e007      	b.n	8004140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	3b10      	subs	r3, #16
 800415c:	4a14      	ldr	r2, [pc, #80]	@ (80041b0 <DMA_CalcBaseAndBitshift+0x64>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004166:	4a13      	ldr	r2, [pc, #76]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d909      	bls.n	800418e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	659a      	str	r2, [r3, #88]	@ 0x58
 800418c:	e007      	b.n	800419e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	aaaaaaab 	.word	0xaaaaaaab
 80041b4:	0800bac0 	.word	0x0800bac0

080041b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11f      	bne.n	8004212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d856      	bhi.n	8004286 <DMA_CheckFifoParam+0xce>
 80041d8:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <DMA_CheckFifoParam+0x28>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	08004203 	.word	0x08004203
 80041e8:	080041f1 	.word	0x080041f1
 80041ec:	08004287 	.word	0x08004287
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d046      	beq.n	800428a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004200:	e043      	b.n	800428a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800420a:	d140      	bne.n	800428e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004210:	e03d      	b.n	800428e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800421a:	d121      	bne.n	8004260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d837      	bhi.n	8004292 <DMA_CheckFifoParam+0xda>
 8004222:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <DMA_CheckFifoParam+0x70>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	0800423f 	.word	0x0800423f
 8004230:	08004239 	.word	0x08004239
 8004234:	08004251 	.word	0x08004251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e030      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d025      	beq.n	8004296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424e:	e022      	b.n	8004296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004258:	d11f      	bne.n	800429a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800425e:	e01c      	b.n	800429a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d903      	bls.n	800426e <DMA_CheckFifoParam+0xb6>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d003      	beq.n	8004274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800426c:	e018      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      break;
 8004272:	e015      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00e      	beq.n	800429e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e00b      	b.n	800429e <DMA_CheckFifoParam+0xe6>
      break;
 8004286:	bf00      	nop
 8004288:	e00a      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 800428a:	bf00      	nop
 800428c:	e008      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 800428e:	bf00      	nop
 8004290:	e006      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e004      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
    }
  } 
  
  return status; 
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	@ 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	e165      	b.n	8004598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042cc:	2201      	movs	r2, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	f040 8154 	bne.w	8004592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d005      	beq.n	8004302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d130      	bne.n	8004364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	2203      	movs	r2, #3
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004338:	2201      	movs	r2, #1
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 0201 	and.w	r2, r3, #1
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b03      	cmp	r3, #3
 800436e:	d017      	beq.n	80043a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2203      	movs	r2, #3
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d123      	bne.n	80043f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	08da      	lsrs	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3208      	adds	r2, #8
 80043b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	220f      	movs	r2, #15
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	08da      	lsrs	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3208      	adds	r2, #8
 80043ee:	69b9      	ldr	r1, [r7, #24]
 80043f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2203      	movs	r2, #3
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0203 	and.w	r2, r3, #3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80ae 	beq.w	8004592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	4b5d      	ldr	r3, [pc, #372]	@ (80045b0 <HAL_GPIO_Init+0x300>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	4a5c      	ldr	r2, [pc, #368]	@ (80045b0 <HAL_GPIO_Init+0x300>)
 8004440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004444:	6453      	str	r3, [r2, #68]	@ 0x44
 8004446:	4b5a      	ldr	r3, [pc, #360]	@ (80045b0 <HAL_GPIO_Init+0x300>)
 8004448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004452:	4a58      	ldr	r2, [pc, #352]	@ (80045b4 <HAL_GPIO_Init+0x304>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a4f      	ldr	r2, [pc, #316]	@ (80045b8 <HAL_GPIO_Init+0x308>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d025      	beq.n	80044ca <HAL_GPIO_Init+0x21a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4e      	ldr	r2, [pc, #312]	@ (80045bc <HAL_GPIO_Init+0x30c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <HAL_GPIO_Init+0x216>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a4d      	ldr	r2, [pc, #308]	@ (80045c0 <HAL_GPIO_Init+0x310>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d019      	beq.n	80044c2 <HAL_GPIO_Init+0x212>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a4c      	ldr	r2, [pc, #304]	@ (80045c4 <HAL_GPIO_Init+0x314>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_GPIO_Init+0x20e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a4b      	ldr	r2, [pc, #300]	@ (80045c8 <HAL_GPIO_Init+0x318>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00d      	beq.n	80044ba <HAL_GPIO_Init+0x20a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4a      	ldr	r2, [pc, #296]	@ (80045cc <HAL_GPIO_Init+0x31c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <HAL_GPIO_Init+0x206>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a49      	ldr	r2, [pc, #292]	@ (80045d0 <HAL_GPIO_Init+0x320>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_GPIO_Init+0x202>
 80044ae:	2306      	movs	r3, #6
 80044b0:	e00c      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044b2:	2307      	movs	r3, #7
 80044b4:	e00a      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044b6:	2305      	movs	r3, #5
 80044b8:	e008      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044ba:	2304      	movs	r3, #4
 80044bc:	e006      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044be:	2303      	movs	r3, #3
 80044c0:	e004      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e002      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_GPIO_Init+0x21c>
 80044ca:	2300      	movs	r3, #0
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f002 0203 	and.w	r2, r2, #3
 80044d2:	0092      	lsls	r2, r2, #2
 80044d4:	4093      	lsls	r3, r2
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044dc:	4935      	ldr	r1, [pc, #212]	@ (80045b4 <HAL_GPIO_Init+0x304>)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	3302      	adds	r3, #2
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ea:	4b3a      	ldr	r3, [pc, #232]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800450e:	4a31      	ldr	r2, [pc, #196]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004514:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800453e:	4b25      	ldr	r3, [pc, #148]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	43db      	mvns	r3, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4013      	ands	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004562:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	43db      	mvns	r3, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4013      	ands	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800458c:	4a11      	ldr	r2, [pc, #68]	@ (80045d4 <HAL_GPIO_Init+0x324>)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3301      	adds	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	f67f ae96 	bls.w	80042cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	3724      	adds	r7, #36	@ 0x24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40013800 	.word	0x40013800
 80045b8:	40020000 	.word	0x40020000
 80045bc:	40020400 	.word	0x40020400
 80045c0:	40020800 	.word	0x40020800
 80045c4:	40020c00 	.word	0x40020c00
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40021400 	.word	0x40021400
 80045d0:	40021800 	.word	0x40021800
 80045d4:	40013c00 	.word	0x40013c00

080045d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4b20      	ldr	r3, [pc, #128]	@ (8004668 <HAL_PWREx_EnableOverDrive+0x90>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004668 <HAL_PWREx_EnableOverDrive+0x90>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004668 <HAL_PWREx_EnableOverDrive+0x90>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_PWREx_EnableOverDrive+0x94>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004604:	f7ff f910 	bl	8003828 <HAL_GetTick>
 8004608:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800460a:	e009      	b.n	8004620 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800460c:	f7ff f90c 	bl	8003828 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800461a:	d901      	bls.n	8004620 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e01f      	b.n	8004660 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004620:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <HAL_PWREx_EnableOverDrive+0x98>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462c:	d1ee      	bne.n	800460c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800462e:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004634:	f7ff f8f8 	bl	8003828 <HAL_GetTick>
 8004638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800463a:	e009      	b.n	8004650 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800463c:	f7ff f8f4 	bl	8003828 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800464a:	d901      	bls.n	8004650 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e007      	b.n	8004660 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004650:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <HAL_PWREx_EnableOverDrive+0x98>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800465c:	d1ee      	bne.n	800463c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	420e0040 	.word	0x420e0040
 8004670:	40007000 	.word	0x40007000
 8004674:	420e0044 	.word	0x420e0044

08004678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0cc      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800468c:	4b68      	ldr	r3, [pc, #416]	@ (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d90c      	bls.n	80046b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b65      	ldr	r3, [pc, #404]	@ (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b63      	ldr	r3, [pc, #396]	@ (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0b8      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046cc:	4b59      	ldr	r3, [pc, #356]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4a58      	ldr	r2, [pc, #352]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e4:	4b53      	ldr	r3, [pc, #332]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a52      	ldr	r2, [pc, #328]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f0:	4b50      	ldr	r3, [pc, #320]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	494d      	ldr	r1, [pc, #308]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d044      	beq.n	8004798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b47      	ldr	r3, [pc, #284]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d119      	bne.n	8004756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d003      	beq.n	8004736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004732:	2b03      	cmp	r3, #3
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004736:	4b3f      	ldr	r3, [pc, #252]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e06f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004746:	4b3b      	ldr	r3, [pc, #236]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e067      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004756:	4b37      	ldr	r3, [pc, #220]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 0203 	bic.w	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4934      	ldr	r1, [pc, #208]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004768:	f7ff f85e 	bl	8003828 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476e:	e00a      	b.n	8004786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004770:	f7ff f85a 	bl	8003828 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e04f      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	4b2b      	ldr	r3, [pc, #172]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 020c 	and.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	429a      	cmp	r2, r3
 8004796:	d1eb      	bne.n	8004770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004798:	4b25      	ldr	r3, [pc, #148]	@ (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d20c      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a6:	4b22      	ldr	r3, [pc, #136]	@ (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b20      	ldr	r3, [pc, #128]	@ (8004830 <HAL_RCC_ClockConfig+0x1b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e032      	b.n	8004826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047cc:	4b19      	ldr	r3, [pc, #100]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4916      	ldr	r1, [pc, #88]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ea:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	490e      	ldr	r1, [pc, #56]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fe:	f000 f855 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 8004802:	4602      	mov	r2, r0
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	490a      	ldr	r1, [pc, #40]	@ (8004838 <HAL_RCC_ClockConfig+0x1c0>)
 8004810:	5ccb      	ldrb	r3, [r1, r3]
 8004812:	fa22 f303 	lsr.w	r3, r2, r3
 8004816:	4a09      	ldr	r2, [pc, #36]	@ (800483c <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe ffbe 	bl	80037a0 <HAL_InitTick>

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40023c00 	.word	0x40023c00
 8004834:	40023800 	.word	0x40023800
 8004838:	0800baa8 	.word	0x0800baa8
 800483c:	20001c64 	.word	0x20001c64
 8004840:	20001c68 	.word	0x20001c68

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20001c64 	.word	0x20001c64

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004860:	f7ff fff0 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0a9b      	lsrs	r3, r3, #10
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4903      	ldr	r1, [pc, #12]	@ (8004880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40023800 	.word	0x40023800
 8004880:	0800bab8 	.word	0x0800bab8

08004884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004888:	f7ff ffdc 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0b5b      	lsrs	r3, r3, #13
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4903      	ldr	r1, [pc, #12]	@ (80048a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	0800bab8 	.word	0x0800bab8

080048ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0a6      	sub	sp, #152	@ 0x98
 80048b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d2:	4bc8      	ldr	r3, [pc, #800]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	f200 817e 	bhi.w	8004bdc <HAL_RCC_GetSysClockFreq+0x330>
 80048e0:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	08004bdd 	.word	0x08004bdd
 80048f0:	08004bdd 	.word	0x08004bdd
 80048f4:	08004bdd 	.word	0x08004bdd
 80048f8:	08004925 	.word	0x08004925
 80048fc:	08004bdd 	.word	0x08004bdd
 8004900:	08004bdd 	.word	0x08004bdd
 8004904:	08004bdd 	.word	0x08004bdd
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004bdd 	.word	0x08004bdd
 8004910:	08004bdd 	.word	0x08004bdd
 8004914:	08004bdd 	.word	0x08004bdd
 8004918:	08004a97 	.word	0x08004a97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800491c:	4bb6      	ldr	r3, [pc, #728]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800491e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8004922:	e15f      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004924:	4bb5      	ldr	r3, [pc, #724]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x350>)
 8004926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800492a:	e15b      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4bb1      	ldr	r3, [pc, #708]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004938:	4bae      	ldr	r3, [pc, #696]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d031      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004944:	4bab      	ldr	r3, [pc, #684]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	2200      	movs	r2, #0
 800494c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800494e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	663b      	str	r3, [r7, #96]	@ 0x60
 8004958:	2300      	movs	r3, #0
 800495a:	667b      	str	r3, [r7, #100]	@ 0x64
 800495c:	4ba7      	ldr	r3, [pc, #668]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x350>)
 800495e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004962:	462a      	mov	r2, r5
 8004964:	fb03 f202 	mul.w	r2, r3, r2
 8004968:	2300      	movs	r3, #0
 800496a:	4621      	mov	r1, r4
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	4aa2      	ldr	r2, [pc, #648]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x350>)
 8004974:	4621      	mov	r1, r4
 8004976:	fba1 1202 	umull	r1, r2, r1, r2
 800497a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800497c:	460a      	mov	r2, r1
 800497e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004980:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004982:	4413      	add	r3, r2
 8004984:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498a:	2200      	movs	r2, #0
 800498c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800498e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004990:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004994:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004998:	f7fc f996 	bl	8000cc8 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049a6:	e064      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a8:	4b92      	ldr	r3, [pc, #584]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	2200      	movs	r2, #0
 80049b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80049b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80049b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049bc:	2300      	movs	r3, #0
 80049be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80049c4:	4622      	mov	r2, r4
 80049c6:	462b      	mov	r3, r5
 80049c8:	f04f 0000 	mov.w	r0, #0
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	0159      	lsls	r1, r3, #5
 80049d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d6:	0150      	lsls	r0, r2, #5
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4621      	mov	r1, r4
 80049de:	1a51      	subs	r1, r2, r1
 80049e0:	6139      	str	r1, [r7, #16]
 80049e2:	4629      	mov	r1, r5
 80049e4:	eb63 0301 	sbc.w	r3, r3, r1
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f6:	4659      	mov	r1, fp
 80049f8:	018b      	lsls	r3, r1, #6
 80049fa:	4651      	mov	r1, sl
 80049fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a00:	4651      	mov	r1, sl
 8004a02:	018a      	lsls	r2, r1, #6
 8004a04:	4651      	mov	r1, sl
 8004a06:	ebb2 0801 	subs.w	r8, r2, r1
 8004a0a:	4659      	mov	r1, fp
 8004a0c:	eb63 0901 	sbc.w	r9, r3, r1
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a24:	4690      	mov	r8, r2
 8004a26:	4699      	mov	r9, r3
 8004a28:	4623      	mov	r3, r4
 8004a2a:	eb18 0303 	adds.w	r3, r8, r3
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	462b      	mov	r3, r5
 8004a32:	eb49 0303 	adc.w	r3, r9, r3
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a44:	4629      	mov	r1, r5
 8004a46:	028b      	lsls	r3, r1, #10
 8004a48:	4621      	mov	r1, r4
 8004a4a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a4e:	4621      	mov	r1, r4
 8004a50:	028a      	lsls	r2, r1, #10
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a64:	f7fc f930 	bl	8000cc8 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a72:	4b60      	ldr	r3, [pc, #384]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8004a84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a94:	e0a6      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a96:	4b57      	ldr	r3, [pc, #348]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b54      	ldr	r3, [pc, #336]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02a      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b51      	ldr	r3, [pc, #324]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x350>)
 8004ac4:	fb03 f201 	mul.w	r2, r3, r1
 8004ac8:	2300      	movs	r3, #0
 8004aca:	fb00 f303 	mul.w	r3, r0, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0x350>)
 8004ad2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ad6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ad8:	460a      	mov	r2, r1
 8004ada:	673a      	str	r2, [r7, #112]	@ 0x70
 8004adc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ade:	4413      	add	r3, r2
 8004ae0:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aea:	637a      	str	r2, [r7, #52]	@ 0x34
 8004aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004af0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004af4:	f7fc f8e8 	bl	8000cc8 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b02:	e05b      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b04:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b32:	0150      	lsls	r0, r2, #5
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b58:	ebb2 040a 	subs.w	r4, r2, sl
 8004b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	18e3      	adds	r3, r4, r3
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	eb45 0303 	adc.w	r3, r5, r3
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8e:	4629      	mov	r1, r5
 8004b90:	028b      	lsls	r3, r1, #10
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b98:	4621      	mov	r1, r4
 8004b9a:	028a      	lsls	r2, r1, #10
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	61fa      	str	r2, [r7, #28]
 8004baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bae:	f7fc f88b 	bl	8000cc8 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0f1b      	lsrs	r3, r3, #28
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8004bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004bda:	e003      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3798      	adds	r7, #152	@ 0x98
 8004bec:	46bd      	mov	sp, r7
 8004bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	017d7840 	.word	0x017d7840

08004c00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e28d      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8083 	beq.w	8004d26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c20:	4b94      	ldr	r3, [pc, #592]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d019      	beq.n	8004c60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c2c:	4b91      	ldr	r3, [pc, #580]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d106      	bne.n	8004c46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c38:	4b8e      	ldr	r3, [pc, #568]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c44:	d00c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c46:	4b8b      	ldr	r3, [pc, #556]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d112      	bne.n	8004c78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c52:	4b88      	ldr	r3, [pc, #544]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	4b84      	ldr	r3, [pc, #528]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05b      	beq.n	8004d24 <HAL_RCC_OscConfig+0x124>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d157      	bne.n	8004d24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e25a      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d106      	bne.n	8004c90 <HAL_RCC_OscConfig+0x90>
 8004c82:	4b7c      	ldr	r3, [pc, #496]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a7b      	ldr	r2, [pc, #492]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e01d      	b.n	8004ccc <HAL_RCC_OscConfig+0xcc>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0xb4>
 8004c9a:	4b76      	ldr	r3, [pc, #472]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a75      	ldr	r2, [pc, #468]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b73      	ldr	r3, [pc, #460]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a72      	ldr	r2, [pc, #456]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e00b      	b.n	8004ccc <HAL_RCC_OscConfig+0xcc>
 8004cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fda8 	bl	8003828 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cdc:	f7fe fda4 	bl	8003828 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	@ 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e21f      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b61      	ldr	r3, [pc, #388]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0xdc>
 8004cfa:	e014      	b.n	8004d26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fd94 	bl	8003828 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fe fd90 	bl	8003828 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	@ 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e20b      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d16:	4b57      	ldr	r3, [pc, #348]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x104>
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d06f      	beq.n	8004e12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d32:	4b50      	ldr	r3, [pc, #320]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d017      	beq.n	8004d6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d105      	bne.n	8004d56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d56:	4b47      	ldr	r3, [pc, #284]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d11c      	bne.n	8004d9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d62:	4b44      	ldr	r3, [pc, #272]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d116      	bne.n	8004d9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	4b41      	ldr	r3, [pc, #260]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_RCC_OscConfig+0x186>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d001      	beq.n	8004d86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e1d3      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d86:	4b3b      	ldr	r3, [pc, #236]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4937      	ldr	r1, [pc, #220]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9a:	e03a      	b.n	8004e12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da4:	4b34      	ldr	r3, [pc, #208]	@ (8004e78 <HAL_RCC_OscConfig+0x278>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fe fd3d 	bl	8003828 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fe fd39 	bl	8003828 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e1b4      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4b28      	ldr	r3, [pc, #160]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4925      	ldr	r1, [pc, #148]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]
 8004de4:	e015      	b.n	8004e12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de6:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <HAL_RCC_OscConfig+0x278>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe fd1c 	bl	8003828 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df4:	f7fe fd18 	bl	8003828 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e193      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d036      	beq.n	8004e8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d016      	beq.n	8004e54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e26:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <HAL_RCC_OscConfig+0x27c>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fe fcfc 	bl	8003828 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e34:	f7fe fcf8 	bl	8003828 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e173      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e46:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x234>
 8004e52:	e01b      	b.n	8004e8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e54:	4b09      	ldr	r3, [pc, #36]	@ (8004e7c <HAL_RCC_OscConfig+0x27c>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7fe fce5 	bl	8003828 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e60:	e00e      	b.n	8004e80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e62:	f7fe fce1 	bl	8003828 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d907      	bls.n	8004e80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e15c      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
 8004e74:	40023800 	.word	0x40023800
 8004e78:	42470000 	.word	0x42470000
 8004e7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	4b8a      	ldr	r3, [pc, #552]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ea      	bne.n	8004e62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8097 	beq.w	8004fc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9e:	4b83      	ldr	r3, [pc, #524]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	4b7f      	ldr	r3, [pc, #508]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eba:	4b7c      	ldr	r3, [pc, #496]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec2:	60bb      	str	r3, [r7, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eca:	4b79      	ldr	r3, [pc, #484]	@ (80050b0 <HAL_RCC_OscConfig+0x4b0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d118      	bne.n	8004f08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed6:	4b76      	ldr	r3, [pc, #472]	@ (80050b0 <HAL_RCC_OscConfig+0x4b0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a75      	ldr	r2, [pc, #468]	@ (80050b0 <HAL_RCC_OscConfig+0x4b0>)
 8004edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee2:	f7fe fca1 	bl	8003828 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eea:	f7fe fc9d 	bl	8003828 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e118      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efc:	4b6c      	ldr	r3, [pc, #432]	@ (80050b0 <HAL_RCC_OscConfig+0x4b0>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x31e>
 8004f10:	4b66      	ldr	r3, [pc, #408]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a65      	ldr	r2, [pc, #404]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1c:	e01c      	b.n	8004f58 <HAL_RCC_OscConfig+0x358>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x340>
 8004f26:	4b61      	ldr	r3, [pc, #388]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2a:	4a60      	ldr	r2, [pc, #384]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	f043 0304 	orr.w	r3, r3, #4
 8004f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f32:	4b5e      	ldr	r3, [pc, #376]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	4a5d      	ldr	r2, [pc, #372]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0x358>
 8004f40:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f44:	4a59      	ldr	r2, [pc, #356]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4c:	4b57      	ldr	r3, [pc, #348]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f50:	4a56      	ldr	r2, [pc, #344]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f52:	f023 0304 	bic.w	r3, r3, #4
 8004f56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d015      	beq.n	8004f8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fe fc62 	bl	8003828 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fe fc5e 	bl	8003828 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e0d7      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ee      	beq.n	8004f68 <HAL_RCC_OscConfig+0x368>
 8004f8a:	e014      	b.n	8004fb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8c:	f7fe fc4c 	bl	8003828 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f94:	f7fe fc48 	bl	8003828 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0c1      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004faa:	4b40      	ldr	r3, [pc, #256]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1ee      	bne.n	8004f94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d105      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80ad 	beq.w	800512c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fd2:	4b36      	ldr	r3, [pc, #216]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d060      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d145      	bne.n	8005072 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	4b33      	ldr	r3, [pc, #204]	@ (80050b4 <HAL_RCC_OscConfig+0x4b4>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe fc1c 	bl	8003828 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7fe fc18 	bl	8003828 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e093      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69da      	ldr	r2, [r3, #28]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	019b      	lsls	r3, r3, #6
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	3b01      	subs	r3, #1
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	061b      	lsls	r3, r3, #24
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503c:	071b      	lsls	r3, r3, #28
 800503e:	491b      	ldr	r1, [pc, #108]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCC_OscConfig+0x4b4>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fe fbed 	bl	8003828 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005052:	f7fe fbe9 	bl	8003828 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e064      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005064:	4b11      	ldr	r3, [pc, #68]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x452>
 8005070:	e05c      	b.n	800512c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <HAL_RCC_OscConfig+0x4b4>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fe fbd6 	bl	8003828 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fe fbd2 	bl	8003828 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e04d      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_RCC_OscConfig+0x4ac>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x480>
 800509e:	e045      	b.n	800512c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e040      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005138 <HAL_RCC_OscConfig+0x538>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d030      	beq.n	8005128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d129      	bne.n	8005128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d122      	bne.n	8005128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d119      	bne.n	8005128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	3b01      	subs	r3, #1
 8005102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d10f      	bne.n	8005128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d107      	bne.n	8005128 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d001      	beq.n	800512c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800

0800513c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e03f      	b.n	80051ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7fd fff2 	bl	800314c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2224      	movs	r2, #36	@ 0x24
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800517e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 f93b 	bl	80063fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b08a      	sub	sp, #40	@ 0x28
 80051da:	af02      	add	r7, sp, #8
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d17c      	bne.n	80052f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_UART_Transmit+0x2c>
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e075      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_UART_Transmit+0x3e>
 8005210:	2302      	movs	r3, #2
 8005212:	e06e      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2221      	movs	r2, #33	@ 0x21
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522a:	f7fe fafd 	bl	8003828 <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005244:	d108      	bne.n	8005258 <HAL_UART_Transmit+0x82>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e003      	b.n	8005260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005268:	e02a      	b.n	80052c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2180      	movs	r1, #128	@ 0x80
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fdb4 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e036      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	3302      	adds	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	e007      	b.n	80052b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1cf      	bne.n	800526a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	@ 0x40
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fd84 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e006      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	4613      	mov	r3, r2
 8005306:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b20      	cmp	r3, #32
 8005312:	d11d      	bne.n	8005350 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_UART_Receive_IT+0x26>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e016      	b.n	8005352 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UART_Receive_IT+0x38>
 800532e:	2302      	movs	r3, #2
 8005330:	e00f      	b.n	8005352 <HAL_UART_Receive_IT+0x58>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	461a      	mov	r2, r3
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fdb9 	bl	8005ebe <UART_Start_Receive_IT>
 800534c:	4603      	mov	r3, r0
 800534e:	e000      	b.n	8005352 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005350:	2302      	movs	r3, #2
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	@ 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	d165      	bne.n	8005442 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_UART_Transmit_DMA+0x26>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e05e      	b.n	8005444 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_UART_Transmit_DMA+0x38>
 8005390:	2302      	movs	r3, #2
 8005392:	e057      	b.n	8005444 <HAL_UART_Transmit_DMA+0xe8>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2221      	movs	r2, #33	@ 0x21
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c0:	4a22      	ldr	r2, [pc, #136]	@ (800544c <HAL_UART_Transmit_DMA+0xf0>)
 80053c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c8:	4a21      	ldr	r2, [pc, #132]	@ (8005450 <HAL_UART_Transmit_DMA+0xf4>)
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d0:	4a20      	ldr	r2, [pc, #128]	@ (8005454 <HAL_UART_Transmit_DMA+0xf8>)
 80053d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d8:	2200      	movs	r2, #0
 80053da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80053dc:	f107 0308 	add.w	r3, r7, #8
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3304      	adds	r3, #4
 80053f0:	461a      	mov	r2, r3
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	f7fe fc08 	bl	8003c08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005400:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	617b      	str	r3, [r7, #20]
   return(result);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3314      	adds	r3, #20
 8005428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800542a:	627a      	str	r2, [r7, #36]	@ 0x24
 800542c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6a39      	ldr	r1, [r7, #32]
 8005430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	61fb      	str	r3, [r7, #28]
   return(result);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3730      	adds	r7, #48	@ 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	08005b3d 	.word	0x08005b3d
 8005450:	08005bd7 	.word	0x08005bd7
 8005454:	08005d4f 	.word	0x08005d4f

08005458 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b20      	cmp	r3, #32
 8005470:	d11d      	bne.n	80054ae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_UART_Receive_DMA+0x26>
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e016      	b.n	80054b0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_UART_Receive_DMA+0x38>
 800548c:	2302      	movs	r3, #2
 800548e:	e00f      	b.n	80054b0 <HAL_UART_Receive_DMA+0x58>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	461a      	mov	r2, r3
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fd49 	bl	8005f3c <UART_Start_Receive_DMA>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e000      	b.n	80054b0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b090      	sub	sp, #64	@ 0x40
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b80      	cmp	r3, #128	@ 0x80
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b21      	cmp	r3, #33	@ 0x21
 80054e4:	d128      	bne.n	8005538 <HAL_UART_DMAStop+0x80>
 80054e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d025      	beq.n	8005538 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	623b      	str	r3, [r7, #32]
   return(result);
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800550c:	633a      	str	r2, [r7, #48]	@ 0x30
 800550e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe fbc3 	bl	8003cb8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fda0 	bl	8006078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005542:	2b40      	cmp	r3, #64	@ 0x40
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b22      	cmp	r3, #34	@ 0x22
 8005558:	d128      	bne.n	80055ac <HAL_UART_DMAStop+0xf4>
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d025      	beq.n	80055ac <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3314      	adds	r3, #20
 8005566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005580:	61fa      	str	r2, [r7, #28]
 8005582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	69b9      	ldr	r1, [r7, #24]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	617b      	str	r3, [r7, #20]
   return(result);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fb89 	bl	8003cb8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fd8e 	bl	80060c8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3740      	adds	r7, #64	@ 0x40
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b0ba      	sub	sp, #232	@ 0xe8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10f      	bne.n	800561e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fe35 	bl	8006286 <UART_Receive_IT>
      return;
 800561c:	e256      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800561e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80de 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80d1 	beq.w	80057e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
 8005672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f043 0202 	orr.w	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	f043 0204 	orr.w	r2, r3, #4
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d011      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	f043 0208 	orr.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 81ed 	beq.w	8005ac2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fdc0 	bl	8006286 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <HAL_UART_IRQHandler+0x17a>
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d04f      	beq.n	80057d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fcc8 	bl	80060c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b40      	cmp	r3, #64	@ 0x40
 8005744:	d141      	bne.n	80057ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800575c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005760:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005772:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800577e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800578a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1d9      	bne.n	8005746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579e:	4a7d      	ldr	r2, [pc, #500]	@ (8005994 <HAL_UART_IRQHandler+0x3dc>)
 80057a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe faf6 	bl	8003d98 <HAL_DMA_Abort_IT>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	e00e      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9a4 	bl	8005b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c8:	e00a      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9a0 	bl	8005b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e006      	b.n	80057e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f99c 	bl	8005b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80057de:	e170      	b.n	8005ac2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	bf00      	nop
    return;
 80057e2:	e16e      	b.n	8005ac2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 814a 	bne.w	8005a82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8143 	beq.w	8005a82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 813c 	beq.w	8005a82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	f040 80b4 	bne.w	8005998 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800583c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8140 	beq.w	8005ac6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800584a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800584e:	429a      	cmp	r2, r3
 8005850:	f080 8139 	bcs.w	8005ac6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800585a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005866:	f000 8088 	beq.w	800597a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1d9      	bne.n	800586a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e1      	bne.n	80058b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005918:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800591c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594a:	f023 0310 	bic.w	r3, r3, #16
 800594e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800595c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800595e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800596a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e3      	bne.n	8005938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe f99f 	bl	8003cb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005982:	b29b      	uxth	r3, r3
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	b29b      	uxth	r3, r3
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8ca 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005990:	e099      	b.n	8005ac6 <HAL_UART_IRQHandler+0x50e>
 8005992:	bf00      	nop
 8005994:	0800618f 	.word	0x0800618f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 808b 	beq.w	8005aca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8086 	beq.w	8005aca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80059e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80059e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e3      	bne.n	80059be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3314      	adds	r3, #20
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	623b      	str	r3, [r7, #32]
   return(result);
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3314      	adds	r3, #20
 8005a16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a22:	e841 2300 	strex	r3, r2, [r1]
 8005a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1e3      	bne.n	80059f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0310 	bic.w	r3, r3, #16
 8005a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a60:	61fa      	str	r2, [r7, #28]
 8005a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69b9      	ldr	r1, [r7, #24]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e3      	bne.n	8005a3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f852 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a80:	e023      	b.n	8005aca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x4ea>
 8005a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fb8b 	bl	80061b6 <UART_Transmit_IT>
    return;
 8005aa0:	e014      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <HAL_UART_IRQHandler+0x514>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fbcb 	bl	8006256 <UART_EndTransmit_IT>
    return;
 8005ac0:	e004      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
    return;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
      return;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_UART_IRQHandler+0x514>
      return;
 8005aca:	bf00      	nop
  }
}
 8005acc:	37e8      	adds	r7, #232	@ 0xe8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop

08005ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b090      	sub	sp, #64	@ 0x40
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d137      	bne.n	8005bc8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3314      	adds	r3, #20
 8005b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e5      	bne.n	8005b5e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bb2:	61fa      	str	r2, [r7, #28]
 8005bb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bc6:	e002      	b.n	8005bce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005bc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005bca:	f7ff ff83 	bl	8005ad4 <HAL_UART_TxCpltCallback>
}
 8005bce:	bf00      	nop
 8005bd0:	3740      	adds	r7, #64	@ 0x40
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff ff7f 	bl	8005ae8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b09c      	sub	sp, #112	@ 0x70
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d172      	bne.n	8005cf4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c10:	2200      	movs	r2, #0
 8005c12:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005c34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e5      	bne.n	8005c14 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c68:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c6a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c92:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d119      	bne.n	8005cf4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ce0:	61fa      	str	r2, [r7, #28]
 8005ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	69b9      	ldr	r1, [r7, #24]
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	617b      	str	r3, [r7, #20]
   return(result);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d106      	bne.n	8005d0a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d00:	4619      	mov	r1, r3
 8005d02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d04:	f7ff ff0e 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d08:	e002      	b.n	8005d10 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005d0c:	f7fb fc74 	bl	80015f8 <HAL_UART_RxCpltCallback>
}
 8005d10:	bf00      	nop
 8005d12:	3770      	adds	r7, #112	@ 0x70
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d108      	bne.n	8005d40 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	4619      	mov	r1, r3
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff fef3 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d3e:	e002      	b.n	8005d46 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff fedb 	bl	8005afc <HAL_UART_RxHalfCpltCallback>
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6a:	2b80      	cmp	r3, #128	@ 0x80
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b21      	cmp	r3, #33	@ 0x21
 8005d80:	d108      	bne.n	8005d94 <UART_DMAError+0x46>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d8e:	68b8      	ldr	r0, [r7, #8]
 8005d90:	f000 f972 	bl	8006078 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	bf0c      	ite	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	2300      	movne	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b22      	cmp	r3, #34	@ 0x22
 8005db4:	d108      	bne.n	8005dc8 <UART_DMAError+0x7a>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005dc2:	68b8      	ldr	r0, [r7, #8]
 8005dc4:	f000 f980 	bl	80060c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	f043 0210 	orr.w	r2, r3, #16
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd4:	68b8      	ldr	r0, [r7, #8]
 8005dd6:	f7ff fe9b 	bl	8005b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b090      	sub	sp, #64	@ 0x40
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df2:	e050      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d04c      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e02:	f7fd fd11 	bl	8003828 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d241      	bcs.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e32:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e34:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e5      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	613b      	str	r3, [r7, #16]
   return(result);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e66:	623a      	str	r2, [r7, #32]
 8005e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	69f9      	ldr	r1, [r7, #28]
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d09f      	beq.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3740      	adds	r7, #64	@ 0x40
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	88fa      	ldrh	r2, [r7, #6]
 8005ed6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2222      	movs	r2, #34	@ 0x22
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0220 	orr.w	r2, r2, #32
 8005f2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b098      	sub	sp, #96	@ 0x60
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2222      	movs	r2, #34	@ 0x22
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	4a40      	ldr	r2, [pc, #256]	@ (800606c <UART_Start_Receive_DMA+0x130>)
 8005f6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f70:	4a3f      	ldr	r2, [pc, #252]	@ (8006070 <UART_Start_Receive_DMA+0x134>)
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	4a3e      	ldr	r2, [pc, #248]	@ (8006074 <UART_Start_Receive_DMA+0x138>)
 8005f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	2200      	movs	r2, #0
 8005f82:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	f7fd fe34 	bl	8003c08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d019      	beq.n	8005ffa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fe6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e5      	bne.n	8005fc6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	657b      	str	r3, [r7, #84]	@ 0x54
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800601a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3314      	adds	r3, #20
 8006034:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	617b      	str	r3, [r7, #20]
   return(result);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006044:	653b      	str	r3, [r7, #80]	@ 0x50
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3314      	adds	r3, #20
 800604c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800604e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6a39      	ldr	r1, [r7, #32]
 8006054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	61fb      	str	r3, [r7, #28]
   return(result);
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3760      	adds	r7, #96	@ 0x60
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	08005bf3 	.word	0x08005bf3
 8006070:	08005d19 	.word	0x08005d19
 8006074:	08005d4f 	.word	0x08005d4f

08006078 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b089      	sub	sp, #36	@ 0x24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	61ba      	str	r2, [r7, #24]
 80060a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a4:	6979      	ldr	r1, [r7, #20]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	e841 2300 	strex	r3, r2, [r1]
 80060ac:	613b      	str	r3, [r7, #16]
   return(result);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e5      	bne.n	8006080 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80060bc:	bf00      	nop
 80060be:	3724      	adds	r7, #36	@ 0x24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b095      	sub	sp, #84	@ 0x54
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80060f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e5      	bne.n	80060d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	61fb      	str	r3, [r7, #28]
   return(result);
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800612a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613c:	2b01      	cmp	r3, #1
 800613e:	d119      	bne.n	8006174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f023 0310 	bic.w	r3, r3, #16
 8006156:	647b      	str	r3, [r7, #68]	@ 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006160:	61ba      	str	r2, [r7, #24]
 8006162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6979      	ldr	r1, [r7, #20]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	613b      	str	r3, [r7, #16]
   return(result);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006182:	bf00      	nop
 8006184:	3754      	adds	r7, #84	@ 0x54
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fcb1 	bl	8005b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b21      	cmp	r3, #33	@ 0x21
 80061c8:	d13e      	bne.n	8006248 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d2:	d114      	bne.n	80061fe <UART_Transmit_IT+0x48>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d110      	bne.n	80061fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	621a      	str	r2, [r3, #32]
 80061fc:	e008      	b.n	8006210 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6211      	str	r1, [r2, #32]
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29b      	uxth	r3, r3
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	4619      	mov	r1, r3
 800621e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10f      	bne.n	8006244 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006232:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006242:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800626c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff fc2c 	bl	8005ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b08c      	sub	sp, #48	@ 0x30
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b22      	cmp	r3, #34	@ 0x22
 8006298:	f040 80ab 	bne.w	80063f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a4:	d117      	bne.n	80062d6 <UART_Receive_IT+0x50>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d113      	bne.n	80062d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	1c9a      	adds	r2, r3, #2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80062d4:	e026      	b.n	8006324 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e8:	d007      	beq.n	80062fa <UART_Receive_IT+0x74>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <UART_Receive_IT+0x82>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e008      	b.n	800631a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29b      	uxth	r3, r3
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4619      	mov	r1, r3
 8006332:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006334:	2b00      	cmp	r3, #0
 8006336:	d15a      	bne.n	80063ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0220 	bic.w	r2, r2, #32
 8006346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	2b01      	cmp	r3, #1
 8006376:	d135      	bne.n	80063e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	613b      	str	r3, [r7, #16]
   return(result);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f023 0310 	bic.w	r3, r3, #16
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639e:	623a      	str	r2, [r7, #32]
 80063a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	69f9      	ldr	r1, [r7, #28]
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e5      	bne.n	800637e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d10a      	bne.n	80063d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fba1 	bl	8005b24 <HAL_UARTEx_RxEventCallback>
 80063e2:	e002      	b.n	80063ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7fb f907 	bl	80015f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e002      	b.n	80063f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e000      	b.n	80063f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
  }
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3730      	adds	r7, #48	@ 0x30
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006400:	b0c0      	sub	sp, #256	@ 0x100
 8006402:	af00      	add	r7, sp, #0
 8006404:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	68d9      	ldr	r1, [r3, #12]
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	ea40 0301 	orr.w	r3, r0, r1
 8006424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	431a      	orrs	r2, r3
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	431a      	orrs	r2, r3
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006454:	f021 010c 	bic.w	r1, r1, #12
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006462:	430b      	orrs	r3, r1
 8006464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006476:	6999      	ldr	r1, [r3, #24]
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	ea40 0301 	orr.w	r3, r0, r1
 8006482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b8f      	ldr	r3, [pc, #572]	@ (80066c8 <UART_SetConfig+0x2cc>)
 800648c:	429a      	cmp	r2, r3
 800648e:	d005      	beq.n	800649c <UART_SetConfig+0xa0>
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b8d      	ldr	r3, [pc, #564]	@ (80066cc <UART_SetConfig+0x2d0>)
 8006498:	429a      	cmp	r2, r3
 800649a:	d104      	bne.n	80064a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe f9f2 	bl	8004884 <HAL_RCC_GetPCLK2Freq>
 80064a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064a4:	e003      	b.n	80064ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064a6:	f7fe f9d9 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 80064aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b8:	f040 810c 	bne.w	80066d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064ce:	4622      	mov	r2, r4
 80064d0:	462b      	mov	r3, r5
 80064d2:	1891      	adds	r1, r2, r2
 80064d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064d6:	415b      	adcs	r3, r3
 80064d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064de:	4621      	mov	r1, r4
 80064e0:	eb12 0801 	adds.w	r8, r2, r1
 80064e4:	4629      	mov	r1, r5
 80064e6:	eb43 0901 	adc.w	r9, r3, r1
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064fe:	4690      	mov	r8, r2
 8006500:	4699      	mov	r9, r3
 8006502:	4623      	mov	r3, r4
 8006504:	eb18 0303 	adds.w	r3, r8, r3
 8006508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800650c:	462b      	mov	r3, r5
 800650e:	eb49 0303 	adc.w	r3, r9, r3
 8006512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006522:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800652a:	460b      	mov	r3, r1
 800652c:	18db      	adds	r3, r3, r3
 800652e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006530:	4613      	mov	r3, r2
 8006532:	eb42 0303 	adc.w	r3, r2, r3
 8006536:	657b      	str	r3, [r7, #84]	@ 0x54
 8006538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800653c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006540:	f7fa fbc2 	bl	8000cc8 <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4b61      	ldr	r3, [pc, #388]	@ (80066d0 <UART_SetConfig+0x2d4>)
 800654a:	fba3 2302 	umull	r2, r3, r3, r2
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	011c      	lsls	r4, r3, #4
 8006552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006556:	2200      	movs	r2, #0
 8006558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800655c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	1891      	adds	r1, r2, r2
 800656a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800656c:	415b      	adcs	r3, r3
 800656e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006574:	4641      	mov	r1, r8
 8006576:	eb12 0a01 	adds.w	sl, r2, r1
 800657a:	4649      	mov	r1, r9
 800657c:	eb43 0b01 	adc.w	fp, r3, r1
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800658c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006594:	4692      	mov	sl, r2
 8006596:	469b      	mov	fp, r3
 8006598:	4643      	mov	r3, r8
 800659a:	eb1a 0303 	adds.w	r3, sl, r3
 800659e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065a2:	464b      	mov	r3, r9
 80065a4:	eb4b 0303 	adc.w	r3, fp, r3
 80065a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065c0:	460b      	mov	r3, r1
 80065c2:	18db      	adds	r3, r3, r3
 80065c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065c6:	4613      	mov	r3, r2
 80065c8:	eb42 0303 	adc.w	r3, r2, r3
 80065cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065d6:	f7fa fb77 	bl	8000cc8 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <UART_SetConfig+0x2d4>)
 80065e2:	fba3 2301 	umull	r2, r3, r3, r1
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	2264      	movs	r2, #100	@ 0x64
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	1acb      	subs	r3, r1, r3
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065f6:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <UART_SetConfig+0x2d4>)
 80065f8:	fba3 2302 	umull	r2, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006604:	441c      	add	r4, r3
 8006606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006610:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	1891      	adds	r1, r2, r2
 800661e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006620:	415b      	adcs	r3, r3
 8006622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006628:	4641      	mov	r1, r8
 800662a:	1851      	adds	r1, r2, r1
 800662c:	6339      	str	r1, [r7, #48]	@ 0x30
 800662e:	4649      	mov	r1, r9
 8006630:	414b      	adcs	r3, r1
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006640:	4659      	mov	r1, fp
 8006642:	00cb      	lsls	r3, r1, #3
 8006644:	4651      	mov	r1, sl
 8006646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800664a:	4651      	mov	r1, sl
 800664c:	00ca      	lsls	r2, r1, #3
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	4603      	mov	r3, r0
 8006654:	4642      	mov	r2, r8
 8006656:	189b      	adds	r3, r3, r2
 8006658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800665c:	464b      	mov	r3, r9
 800665e:	460a      	mov	r2, r1
 8006660:	eb42 0303 	adc.w	r3, r2, r3
 8006664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006674:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800667c:	460b      	mov	r3, r1
 800667e:	18db      	adds	r3, r3, r3
 8006680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006682:	4613      	mov	r3, r2
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800668a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800668e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006692:	f7fa fb19 	bl	8000cc8 <__aeabi_uldivmod>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <UART_SetConfig+0x2d4>)
 800669c:	fba3 1302 	umull	r1, r3, r3, r2
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	2164      	movs	r1, #100	@ 0x64
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	3332      	adds	r3, #50	@ 0x32
 80066ae:	4a08      	ldr	r2, [pc, #32]	@ (80066d0 <UART_SetConfig+0x2d4>)
 80066b0:	fba2 2303 	umull	r2, r3, r2, r3
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	f003 0207 	and.w	r2, r3, #7
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4422      	add	r2, r4
 80066c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066c4:	e106      	b.n	80068d4 <UART_SetConfig+0x4d8>
 80066c6:	bf00      	nop
 80066c8:	40011000 	.word	0x40011000
 80066cc:	40011400 	.word	0x40011400
 80066d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066e6:	4642      	mov	r2, r8
 80066e8:	464b      	mov	r3, r9
 80066ea:	1891      	adds	r1, r2, r2
 80066ec:	6239      	str	r1, [r7, #32]
 80066ee:	415b      	adcs	r3, r3
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066f6:	4641      	mov	r1, r8
 80066f8:	1854      	adds	r4, r2, r1
 80066fa:	4649      	mov	r1, r9
 80066fc:	eb43 0501 	adc.w	r5, r3, r1
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	00eb      	lsls	r3, r5, #3
 800670a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800670e:	00e2      	lsls	r2, r4, #3
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	4643      	mov	r3, r8
 8006716:	18e3      	adds	r3, r4, r3
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800671c:	464b      	mov	r3, r9
 800671e:	eb45 0303 	adc.w	r3, r5, r3
 8006722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006732:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006742:	4629      	mov	r1, r5
 8006744:	008b      	lsls	r3, r1, #2
 8006746:	4621      	mov	r1, r4
 8006748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800674c:	4621      	mov	r1, r4
 800674e:	008a      	lsls	r2, r1, #2
 8006750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006754:	f7fa fab8 	bl	8000cc8 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4b60      	ldr	r3, [pc, #384]	@ (80068e0 <UART_SetConfig+0x4e4>)
 800675e:	fba3 2302 	umull	r2, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	011c      	lsls	r4, r3, #4
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676a:	2200      	movs	r2, #0
 800676c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006770:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	1891      	adds	r1, r2, r2
 800677e:	61b9      	str	r1, [r7, #24]
 8006780:	415b      	adcs	r3, r3
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006788:	4641      	mov	r1, r8
 800678a:	1851      	adds	r1, r2, r1
 800678c:	6139      	str	r1, [r7, #16]
 800678e:	4649      	mov	r1, r9
 8006790:	414b      	adcs	r3, r1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a0:	4659      	mov	r1, fp
 80067a2:	00cb      	lsls	r3, r1, #3
 80067a4:	4651      	mov	r1, sl
 80067a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067aa:	4651      	mov	r1, sl
 80067ac:	00ca      	lsls	r2, r1, #3
 80067ae:	4610      	mov	r0, r2
 80067b0:	4619      	mov	r1, r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	4642      	mov	r2, r8
 80067b6:	189b      	adds	r3, r3, r2
 80067b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067bc:	464b      	mov	r3, r9
 80067be:	460a      	mov	r2, r1
 80067c0:	eb42 0303 	adc.w	r3, r2, r3
 80067c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067e0:	4649      	mov	r1, r9
 80067e2:	008b      	lsls	r3, r1, #2
 80067e4:	4641      	mov	r1, r8
 80067e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ea:	4641      	mov	r1, r8
 80067ec:	008a      	lsls	r2, r1, #2
 80067ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067f2:	f7fa fa69 	bl	8000cc8 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	4b38      	ldr	r3, [pc, #224]	@ (80068e0 <UART_SetConfig+0x4e4>)
 80067fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2264      	movs	r2, #100	@ 0x64
 8006806:	fb02 f303 	mul.w	r3, r2, r3
 800680a:	1acb      	subs	r3, r1, r3
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	3332      	adds	r3, #50	@ 0x32
 8006810:	4a33      	ldr	r2, [pc, #204]	@ (80068e0 <UART_SetConfig+0x4e4>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800681c:	441c      	add	r4, r3
 800681e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006822:	2200      	movs	r2, #0
 8006824:	673b      	str	r3, [r7, #112]	@ 0x70
 8006826:	677a      	str	r2, [r7, #116]	@ 0x74
 8006828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800682c:	4642      	mov	r2, r8
 800682e:	464b      	mov	r3, r9
 8006830:	1891      	adds	r1, r2, r2
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	415b      	adcs	r3, r3
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800683c:	4641      	mov	r1, r8
 800683e:	1851      	adds	r1, r2, r1
 8006840:	6039      	str	r1, [r7, #0]
 8006842:	4649      	mov	r1, r9
 8006844:	414b      	adcs	r3, r1
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006854:	4659      	mov	r1, fp
 8006856:	00cb      	lsls	r3, r1, #3
 8006858:	4651      	mov	r1, sl
 800685a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685e:	4651      	mov	r1, sl
 8006860:	00ca      	lsls	r2, r1, #3
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	4603      	mov	r3, r0
 8006868:	4642      	mov	r2, r8
 800686a:	189b      	adds	r3, r3, r2
 800686c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800686e:	464b      	mov	r3, r9
 8006870:	460a      	mov	r2, r1
 8006872:	eb42 0303 	adc.w	r3, r2, r3
 8006876:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	663b      	str	r3, [r7, #96]	@ 0x60
 8006882:	667a      	str	r2, [r7, #100]	@ 0x64
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006890:	4649      	mov	r1, r9
 8006892:	008b      	lsls	r3, r1, #2
 8006894:	4641      	mov	r1, r8
 8006896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800689a:	4641      	mov	r1, r8
 800689c:	008a      	lsls	r2, r1, #2
 800689e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068a2:	f7fa fa11 	bl	8000cc8 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4b0d      	ldr	r3, [pc, #52]	@ (80068e0 <UART_SetConfig+0x4e4>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	@ 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	3332      	adds	r3, #50	@ 0x32
 80068be:	4a08      	ldr	r2, [pc, #32]	@ (80068e0 <UART_SetConfig+0x4e4>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 020f 	and.w	r2, r3, #15
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4422      	add	r2, r4
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	bf00      	nop
 80068d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068da:	46bd      	mov	sp, r7
 80068dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e0:	51eb851f 	.word	0x51eb851f

080068e4 <_calloc_r>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	fba1 5402 	umull	r5, r4, r1, r2
 80068ea:	b93c      	cbnz	r4, 80068fc <_calloc_r+0x18>
 80068ec:	4629      	mov	r1, r5
 80068ee:	f000 f837 	bl	8006960 <_malloc_r>
 80068f2:	4606      	mov	r6, r0
 80068f4:	b928      	cbnz	r0, 8006902 <_calloc_r+0x1e>
 80068f6:	2600      	movs	r6, #0
 80068f8:	4630      	mov	r0, r6
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	220c      	movs	r2, #12
 80068fe:	6002      	str	r2, [r0, #0]
 8006900:	e7f9      	b.n	80068f6 <_calloc_r+0x12>
 8006902:	462a      	mov	r2, r5
 8006904:	4621      	mov	r1, r4
 8006906:	f001 fa1b 	bl	8007d40 <memset>
 800690a:	e7f5      	b.n	80068f8 <_calloc_r+0x14>

0800690c <malloc>:
 800690c:	4b02      	ldr	r3, [pc, #8]	@ (8006918 <malloc+0xc>)
 800690e:	4601      	mov	r1, r0
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	f000 b825 	b.w	8006960 <_malloc_r>
 8006916:	bf00      	nop
 8006918:	20001c7c 	.word	0x20001c7c

0800691c <sbrk_aligned>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4e0f      	ldr	r6, [pc, #60]	@ (800695c <sbrk_aligned+0x40>)
 8006920:	460c      	mov	r4, r1
 8006922:	6831      	ldr	r1, [r6, #0]
 8006924:	4605      	mov	r5, r0
 8006926:	b911      	cbnz	r1, 800692e <sbrk_aligned+0x12>
 8006928:	f001 fa4a 	bl	8007dc0 <_sbrk_r>
 800692c:	6030      	str	r0, [r6, #0]
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f001 fa45 	bl	8007dc0 <_sbrk_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d103      	bne.n	8006942 <sbrk_aligned+0x26>
 800693a:	f04f 34ff 	mov.w	r4, #4294967295
 800693e:	4620      	mov	r0, r4
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	1cc4      	adds	r4, r0, #3
 8006944:	f024 0403 	bic.w	r4, r4, #3
 8006948:	42a0      	cmp	r0, r4
 800694a:	d0f8      	beq.n	800693e <sbrk_aligned+0x22>
 800694c:	1a21      	subs	r1, r4, r0
 800694e:	4628      	mov	r0, r5
 8006950:	f001 fa36 	bl	8007dc0 <_sbrk_r>
 8006954:	3001      	adds	r0, #1
 8006956:	d1f2      	bne.n	800693e <sbrk_aligned+0x22>
 8006958:	e7ef      	b.n	800693a <sbrk_aligned+0x1e>
 800695a:	bf00      	nop
 800695c:	20009e08 	.word	0x20009e08

08006960 <_malloc_r>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	1ccd      	adds	r5, r1, #3
 8006966:	f025 0503 	bic.w	r5, r5, #3
 800696a:	3508      	adds	r5, #8
 800696c:	2d0c      	cmp	r5, #12
 800696e:	bf38      	it	cc
 8006970:	250c      	movcc	r5, #12
 8006972:	2d00      	cmp	r5, #0
 8006974:	4606      	mov	r6, r0
 8006976:	db01      	blt.n	800697c <_malloc_r+0x1c>
 8006978:	42a9      	cmp	r1, r5
 800697a:	d904      	bls.n	8006986 <_malloc_r+0x26>
 800697c:	230c      	movs	r3, #12
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	2000      	movs	r0, #0
 8006982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a5c <_malloc_r+0xfc>
 800698a:	f000 f869 	bl	8006a60 <__malloc_lock>
 800698e:	f8d8 3000 	ldr.w	r3, [r8]
 8006992:	461c      	mov	r4, r3
 8006994:	bb44      	cbnz	r4, 80069e8 <_malloc_r+0x88>
 8006996:	4629      	mov	r1, r5
 8006998:	4630      	mov	r0, r6
 800699a:	f7ff ffbf 	bl	800691c <sbrk_aligned>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	4604      	mov	r4, r0
 80069a2:	d158      	bne.n	8006a56 <_malloc_r+0xf6>
 80069a4:	f8d8 4000 	ldr.w	r4, [r8]
 80069a8:	4627      	mov	r7, r4
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	d143      	bne.n	8006a36 <_malloc_r+0xd6>
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	d04b      	beq.n	8006a4a <_malloc_r+0xea>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	4639      	mov	r1, r7
 80069b6:	4630      	mov	r0, r6
 80069b8:	eb04 0903 	add.w	r9, r4, r3
 80069bc:	f001 fa00 	bl	8007dc0 <_sbrk_r>
 80069c0:	4581      	cmp	r9, r0
 80069c2:	d142      	bne.n	8006a4a <_malloc_r+0xea>
 80069c4:	6821      	ldr	r1, [r4, #0]
 80069c6:	1a6d      	subs	r5, r5, r1
 80069c8:	4629      	mov	r1, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ffa6 	bl	800691c <sbrk_aligned>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d03a      	beq.n	8006a4a <_malloc_r+0xea>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	442b      	add	r3, r5
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	f8d8 3000 	ldr.w	r3, [r8]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	bb62      	cbnz	r2, 8006a3c <_malloc_r+0xdc>
 80069e2:	f8c8 7000 	str.w	r7, [r8]
 80069e6:	e00f      	b.n	8006a08 <_malloc_r+0xa8>
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	1b52      	subs	r2, r2, r5
 80069ec:	d420      	bmi.n	8006a30 <_malloc_r+0xd0>
 80069ee:	2a0b      	cmp	r2, #11
 80069f0:	d917      	bls.n	8006a22 <_malloc_r+0xc2>
 80069f2:	1961      	adds	r1, r4, r5
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	6025      	str	r5, [r4, #0]
 80069f8:	bf18      	it	ne
 80069fa:	6059      	strne	r1, [r3, #4]
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	bf08      	it	eq
 8006a00:	f8c8 1000 	streq.w	r1, [r8]
 8006a04:	5162      	str	r2, [r4, r5]
 8006a06:	604b      	str	r3, [r1, #4]
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f000 f82f 	bl	8006a6c <__malloc_unlock>
 8006a0e:	f104 000b 	add.w	r0, r4, #11
 8006a12:	1d23      	adds	r3, r4, #4
 8006a14:	f020 0007 	bic.w	r0, r0, #7
 8006a18:	1ac2      	subs	r2, r0, r3
 8006a1a:	bf1c      	itt	ne
 8006a1c:	1a1b      	subne	r3, r3, r0
 8006a1e:	50a3      	strne	r3, [r4, r2]
 8006a20:	e7af      	b.n	8006982 <_malloc_r+0x22>
 8006a22:	6862      	ldr	r2, [r4, #4]
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	bf0c      	ite	eq
 8006a28:	f8c8 2000 	streq.w	r2, [r8]
 8006a2c:	605a      	strne	r2, [r3, #4]
 8006a2e:	e7eb      	b.n	8006a08 <_malloc_r+0xa8>
 8006a30:	4623      	mov	r3, r4
 8006a32:	6864      	ldr	r4, [r4, #4]
 8006a34:	e7ae      	b.n	8006994 <_malloc_r+0x34>
 8006a36:	463c      	mov	r4, r7
 8006a38:	687f      	ldr	r7, [r7, #4]
 8006a3a:	e7b6      	b.n	80069aa <_malloc_r+0x4a>
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d1fb      	bne.n	8006a3c <_malloc_r+0xdc>
 8006a44:	2300      	movs	r3, #0
 8006a46:	6053      	str	r3, [r2, #4]
 8006a48:	e7de      	b.n	8006a08 <_malloc_r+0xa8>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 f80c 	bl	8006a6c <__malloc_unlock>
 8006a54:	e794      	b.n	8006980 <_malloc_r+0x20>
 8006a56:	6005      	str	r5, [r0, #0]
 8006a58:	e7d6      	b.n	8006a08 <_malloc_r+0xa8>
 8006a5a:	bf00      	nop
 8006a5c:	20009e0c 	.word	0x20009e0c

08006a60 <__malloc_lock>:
 8006a60:	4801      	ldr	r0, [pc, #4]	@ (8006a68 <__malloc_lock+0x8>)
 8006a62:	f001 b9fa 	b.w	8007e5a <__retarget_lock_acquire_recursive>
 8006a66:	bf00      	nop
 8006a68:	20009f50 	.word	0x20009f50

08006a6c <__malloc_unlock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	@ (8006a74 <__malloc_unlock+0x8>)
 8006a6e:	f001 b9f5 	b.w	8007e5c <__retarget_lock_release_recursive>
 8006a72:	bf00      	nop
 8006a74:	20009f50 	.word	0x20009f50

08006a78 <__cvt>:
 8006a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7c:	ec57 6b10 	vmov	r6, r7, d0
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	460c      	mov	r4, r1
 8006a84:	4619      	mov	r1, r3
 8006a86:	463b      	mov	r3, r7
 8006a88:	bfbb      	ittet	lt
 8006a8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a8e:	461f      	movlt	r7, r3
 8006a90:	2300      	movge	r3, #0
 8006a92:	232d      	movlt	r3, #45	@ 0x2d
 8006a94:	700b      	strb	r3, [r1, #0]
 8006a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a9c:	4691      	mov	r9, r2
 8006a9e:	f023 0820 	bic.w	r8, r3, #32
 8006aa2:	bfbc      	itt	lt
 8006aa4:	4632      	movlt	r2, r6
 8006aa6:	4616      	movlt	r6, r2
 8006aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aac:	d005      	beq.n	8006aba <__cvt+0x42>
 8006aae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ab2:	d100      	bne.n	8006ab6 <__cvt+0x3e>
 8006ab4:	3401      	adds	r4, #1
 8006ab6:	2102      	movs	r1, #2
 8006ab8:	e000      	b.n	8006abc <__cvt+0x44>
 8006aba:	2103      	movs	r1, #3
 8006abc:	ab03      	add	r3, sp, #12
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	ab02      	add	r3, sp, #8
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	ec47 6b10 	vmov	d0, r6, r7
 8006ac8:	4653      	mov	r3, sl
 8006aca:	4622      	mov	r2, r4
 8006acc:	f001 fa58 	bl	8007f80 <_dtoa_r>
 8006ad0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	d119      	bne.n	8006b0c <__cvt+0x94>
 8006ad8:	f019 0f01 	tst.w	r9, #1
 8006adc:	d00e      	beq.n	8006afc <__cvt+0x84>
 8006ade:	eb00 0904 	add.w	r9, r0, r4
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7fa f80d 	bl	8000b08 <__aeabi_dcmpeq>
 8006aee:	b108      	cbz	r0, 8006af4 <__cvt+0x7c>
 8006af0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006af4:	2230      	movs	r2, #48	@ 0x30
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	454b      	cmp	r3, r9
 8006afa:	d31e      	bcc.n	8006b3a <__cvt+0xc2>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b00:	1b5b      	subs	r3, r3, r5
 8006b02:	4628      	mov	r0, r5
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	b004      	add	sp, #16
 8006b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b10:	eb00 0904 	add.w	r9, r0, r4
 8006b14:	d1e5      	bne.n	8006ae2 <__cvt+0x6a>
 8006b16:	7803      	ldrb	r3, [r0, #0]
 8006b18:	2b30      	cmp	r3, #48	@ 0x30
 8006b1a:	d10a      	bne.n	8006b32 <__cvt+0xba>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2300      	movs	r3, #0
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 fff0 	bl	8000b08 <__aeabi_dcmpeq>
 8006b28:	b918      	cbnz	r0, 8006b32 <__cvt+0xba>
 8006b2a:	f1c4 0401 	rsb	r4, r4, #1
 8006b2e:	f8ca 4000 	str.w	r4, [sl]
 8006b32:	f8da 3000 	ldr.w	r3, [sl]
 8006b36:	4499      	add	r9, r3
 8006b38:	e7d3      	b.n	8006ae2 <__cvt+0x6a>
 8006b3a:	1c59      	adds	r1, r3, #1
 8006b3c:	9103      	str	r1, [sp, #12]
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	e7d9      	b.n	8006af6 <__cvt+0x7e>

08006b42 <__exponent>:
 8006b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b44:	2900      	cmp	r1, #0
 8006b46:	bfba      	itte	lt
 8006b48:	4249      	neglt	r1, r1
 8006b4a:	232d      	movlt	r3, #45	@ 0x2d
 8006b4c:	232b      	movge	r3, #43	@ 0x2b
 8006b4e:	2909      	cmp	r1, #9
 8006b50:	7002      	strb	r2, [r0, #0]
 8006b52:	7043      	strb	r3, [r0, #1]
 8006b54:	dd29      	ble.n	8006baa <__exponent+0x68>
 8006b56:	f10d 0307 	add.w	r3, sp, #7
 8006b5a:	461d      	mov	r5, r3
 8006b5c:	270a      	movs	r7, #10
 8006b5e:	461a      	mov	r2, r3
 8006b60:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b64:	fb07 1416 	mls	r4, r7, r6, r1
 8006b68:	3430      	adds	r4, #48	@ 0x30
 8006b6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b6e:	460c      	mov	r4, r1
 8006b70:	2c63      	cmp	r4, #99	@ 0x63
 8006b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b76:	4631      	mov	r1, r6
 8006b78:	dcf1      	bgt.n	8006b5e <__exponent+0x1c>
 8006b7a:	3130      	adds	r1, #48	@ 0x30
 8006b7c:	1e94      	subs	r4, r2, #2
 8006b7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b82:	1c41      	adds	r1, r0, #1
 8006b84:	4623      	mov	r3, r4
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	d30a      	bcc.n	8006ba0 <__exponent+0x5e>
 8006b8a:	f10d 0309 	add.w	r3, sp, #9
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	42ac      	cmp	r4, r5
 8006b92:	bf88      	it	hi
 8006b94:	2300      	movhi	r3, #0
 8006b96:	3302      	adds	r3, #2
 8006b98:	4403      	add	r3, r0
 8006b9a:	1a18      	subs	r0, r3, r0
 8006b9c:	b003      	add	sp, #12
 8006b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ba4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ba8:	e7ed      	b.n	8006b86 <__exponent+0x44>
 8006baa:	2330      	movs	r3, #48	@ 0x30
 8006bac:	3130      	adds	r1, #48	@ 0x30
 8006bae:	7083      	strb	r3, [r0, #2]
 8006bb0:	70c1      	strb	r1, [r0, #3]
 8006bb2:	1d03      	adds	r3, r0, #4
 8006bb4:	e7f1      	b.n	8006b9a <__exponent+0x58>
	...

08006bb8 <_printf_float>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b08d      	sub	sp, #52	@ 0x34
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	461f      	mov	r7, r3
 8006bc8:	4605      	mov	r5, r0
 8006bca:	f001 f8c1 	bl	8007d50 <_localeconv_r>
 8006bce:	6803      	ldr	r3, [r0, #0]
 8006bd0:	9304      	str	r3, [sp, #16]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7f9 fb6c 	bl	80002b0 <strlen>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006be0:	9005      	str	r0, [sp, #20]
 8006be2:	3307      	adds	r3, #7
 8006be4:	f023 0307 	bic.w	r3, r3, #7
 8006be8:	f103 0208 	add.w	r2, r3, #8
 8006bec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8006bf4:	f8c8 2000 	str.w	r2, [r8]
 8006bf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c00:	9307      	str	r3, [sp, #28]
 8006c02:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8006e80 <_printf_float+0x2c8>)
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	f7f9 ffaa 	bl	8000b6c <__aeabi_dcmpun>
 8006c18:	bb70      	cbnz	r0, 8006c78 <_printf_float+0xc0>
 8006c1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c1e:	4b98      	ldr	r3, [pc, #608]	@ (8006e80 <_printf_float+0x2c8>)
 8006c20:	f04f 32ff 	mov.w	r2, #4294967295
 8006c24:	f7f9 ff84 	bl	8000b30 <__aeabi_dcmple>
 8006c28:	bb30      	cbnz	r0, 8006c78 <_printf_float+0xc0>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4640      	mov	r0, r8
 8006c30:	4649      	mov	r1, r9
 8006c32:	f7f9 ff73 	bl	8000b1c <__aeabi_dcmplt>
 8006c36:	b110      	cbz	r0, 8006c3e <_printf_float+0x86>
 8006c38:	232d      	movs	r3, #45	@ 0x2d
 8006c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3e:	4a91      	ldr	r2, [pc, #580]	@ (8006e84 <_printf_float+0x2cc>)
 8006c40:	4b91      	ldr	r3, [pc, #580]	@ (8006e88 <_printf_float+0x2d0>)
 8006c42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c46:	bf94      	ite	ls
 8006c48:	4690      	movls	r8, r2
 8006c4a:	4698      	movhi	r8, r3
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	f02b 0304 	bic.w	r3, fp, #4
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	f04f 0900 	mov.w	r9, #0
 8006c5a:	9700      	str	r7, [sp, #0]
 8006c5c:	4633      	mov	r3, r6
 8006c5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c60:	4621      	mov	r1, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	f000 f9d2 	bl	800700c <_printf_common>
 8006c68:	3001      	adds	r0, #1
 8006c6a:	f040 808d 	bne.w	8006d88 <_printf_float+0x1d0>
 8006c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c72:	b00d      	add	sp, #52	@ 0x34
 8006c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c78:	4642      	mov	r2, r8
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	4649      	mov	r1, r9
 8006c80:	f7f9 ff74 	bl	8000b6c <__aeabi_dcmpun>
 8006c84:	b140      	cbz	r0, 8006c98 <_printf_float+0xe0>
 8006c86:	464b      	mov	r3, r9
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bfbc      	itt	lt
 8006c8c:	232d      	movlt	r3, #45	@ 0x2d
 8006c8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c92:	4a7e      	ldr	r2, [pc, #504]	@ (8006e8c <_printf_float+0x2d4>)
 8006c94:	4b7e      	ldr	r3, [pc, #504]	@ (8006e90 <_printf_float+0x2d8>)
 8006c96:	e7d4      	b.n	8006c42 <_printf_float+0x8a>
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c9e:	9206      	str	r2, [sp, #24]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	d13b      	bne.n	8006d1c <_printf_float+0x164>
 8006ca4:	2306      	movs	r3, #6
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cac:	2300      	movs	r3, #0
 8006cae:	6022      	str	r2, [r4, #0]
 8006cb0:	9303      	str	r3, [sp, #12]
 8006cb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cb8:	ab09      	add	r3, sp, #36	@ 0x24
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	6861      	ldr	r1, [r4, #4]
 8006cbe:	ec49 8b10 	vmov	d0, r8, r9
 8006cc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f7ff fed6 	bl	8006a78 <__cvt>
 8006ccc:	9b06      	ldr	r3, [sp, #24]
 8006cce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cd0:	2b47      	cmp	r3, #71	@ 0x47
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	d129      	bne.n	8006d2a <_printf_float+0x172>
 8006cd6:	1cc8      	adds	r0, r1, #3
 8006cd8:	db02      	blt.n	8006ce0 <_printf_float+0x128>
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	dd41      	ble.n	8006d64 <_printf_float+0x1ac>
 8006ce0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ce4:	fa5f fa8a 	uxtb.w	sl, sl
 8006ce8:	3901      	subs	r1, #1
 8006cea:	4652      	mov	r2, sl
 8006cec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cf2:	f7ff ff26 	bl	8006b42 <__exponent>
 8006cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cf8:	1813      	adds	r3, r2, r0
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	4681      	mov	r9, r0
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	dc02      	bgt.n	8006d08 <_printf_float+0x150>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	07d2      	lsls	r2, r2, #31
 8006d06:	d501      	bpl.n	8006d0c <_printf_float+0x154>
 8006d08:	3301      	adds	r3, #1
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0a2      	beq.n	8006c5a <_printf_float+0xa2>
 8006d14:	232d      	movs	r3, #45	@ 0x2d
 8006d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d1a:	e79e      	b.n	8006c5a <_printf_float+0xa2>
 8006d1c:	9a06      	ldr	r2, [sp, #24]
 8006d1e:	2a47      	cmp	r2, #71	@ 0x47
 8006d20:	d1c2      	bne.n	8006ca8 <_printf_float+0xf0>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1c0      	bne.n	8006ca8 <_printf_float+0xf0>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e7bd      	b.n	8006ca6 <_printf_float+0xee>
 8006d2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d2e:	d9db      	bls.n	8006ce8 <_printf_float+0x130>
 8006d30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d34:	d118      	bne.n	8006d68 <_printf_float+0x1b0>
 8006d36:	2900      	cmp	r1, #0
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	dd0b      	ble.n	8006d54 <_printf_float+0x19c>
 8006d3c:	6121      	str	r1, [r4, #16]
 8006d3e:	b913      	cbnz	r3, 8006d46 <_printf_float+0x18e>
 8006d40:	6822      	ldr	r2, [r4, #0]
 8006d42:	07d0      	lsls	r0, r2, #31
 8006d44:	d502      	bpl.n	8006d4c <_printf_float+0x194>
 8006d46:	3301      	adds	r3, #1
 8006d48:	440b      	add	r3, r1
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d4e:	f04f 0900 	mov.w	r9, #0
 8006d52:	e7db      	b.n	8006d0c <_printf_float+0x154>
 8006d54:	b913      	cbnz	r3, 8006d5c <_printf_float+0x1a4>
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	07d2      	lsls	r2, r2, #31
 8006d5a:	d501      	bpl.n	8006d60 <_printf_float+0x1a8>
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	e7f4      	b.n	8006d4a <_printf_float+0x192>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e7f2      	b.n	8006d4a <_printf_float+0x192>
 8006d64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	db05      	blt.n	8006d7a <_printf_float+0x1c2>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	6121      	str	r1, [r4, #16]
 8006d72:	07d8      	lsls	r0, r3, #31
 8006d74:	d5ea      	bpl.n	8006d4c <_printf_float+0x194>
 8006d76:	1c4b      	adds	r3, r1, #1
 8006d78:	e7e7      	b.n	8006d4a <_printf_float+0x192>
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	bfd4      	ite	le
 8006d7e:	f1c1 0202 	rsble	r2, r1, #2
 8006d82:	2201      	movgt	r2, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	e7e0      	b.n	8006d4a <_printf_float+0x192>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	055a      	lsls	r2, r3, #21
 8006d8c:	d407      	bmi.n	8006d9e <_printf_float+0x1e6>
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	4642      	mov	r2, r8
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d12b      	bne.n	8006df4 <_printf_float+0x23c>
 8006d9c:	e767      	b.n	8006c6e <_printf_float+0xb6>
 8006d9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006da2:	f240 80dd 	bls.w	8006f60 <_printf_float+0x3a8>
 8006da6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006daa:	2200      	movs	r2, #0
 8006dac:	2300      	movs	r3, #0
 8006dae:	f7f9 feab 	bl	8000b08 <__aeabi_dcmpeq>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d033      	beq.n	8006e1e <_printf_float+0x266>
 8006db6:	4a37      	ldr	r2, [pc, #220]	@ (8006e94 <_printf_float+0x2dc>)
 8006db8:	2301      	movs	r3, #1
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f af54 	beq.w	8006c6e <_printf_float+0xb6>
 8006dc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dca:	4543      	cmp	r3, r8
 8006dcc:	db02      	blt.n	8006dd4 <_printf_float+0x21c>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	07d8      	lsls	r0, r3, #31
 8006dd2:	d50f      	bpl.n	8006df4 <_printf_float+0x23c>
 8006dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f af45 	beq.w	8006c6e <_printf_float+0xb6>
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dec:	f104 0a1a 	add.w	sl, r4, #26
 8006df0:	45c8      	cmp	r8, r9
 8006df2:	dc09      	bgt.n	8006e08 <_printf_float+0x250>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	079b      	lsls	r3, r3, #30
 8006df8:	f100 8103 	bmi.w	8007002 <_printf_float+0x44a>
 8006dfc:	68e0      	ldr	r0, [r4, #12]
 8006dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e00:	4298      	cmp	r0, r3
 8006e02:	bfb8      	it	lt
 8006e04:	4618      	movlt	r0, r3
 8006e06:	e734      	b.n	8006c72 <_printf_float+0xba>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f af2b 	beq.w	8006c6e <_printf_float+0xb6>
 8006e18:	f109 0901 	add.w	r9, r9, #1
 8006e1c:	e7e8      	b.n	8006df0 <_printf_float+0x238>
 8006e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dc39      	bgt.n	8006e98 <_printf_float+0x2e0>
 8006e24:	4a1b      	ldr	r2, [pc, #108]	@ (8006e94 <_printf_float+0x2dc>)
 8006e26:	2301      	movs	r3, #1
 8006e28:	4631      	mov	r1, r6
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f43f af1d 	beq.w	8006c6e <_printf_float+0xb6>
 8006e34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e38:	ea59 0303 	orrs.w	r3, r9, r3
 8006e3c:	d102      	bne.n	8006e44 <_printf_float+0x28c>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	07d9      	lsls	r1, r3, #31
 8006e42:	d5d7      	bpl.n	8006df4 <_printf_float+0x23c>
 8006e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f af0d 	beq.w	8006c6e <_printf_float+0xb6>
 8006e54:	f04f 0a00 	mov.w	sl, #0
 8006e58:	f104 0b1a 	add.w	fp, r4, #26
 8006e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5e:	425b      	negs	r3, r3
 8006e60:	4553      	cmp	r3, sl
 8006e62:	dc01      	bgt.n	8006e68 <_printf_float+0x2b0>
 8006e64:	464b      	mov	r3, r9
 8006e66:	e793      	b.n	8006d90 <_printf_float+0x1d8>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	465a      	mov	r2, fp
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f aefb 	beq.w	8006c6e <_printf_float+0xb6>
 8006e78:	f10a 0a01 	add.w	sl, sl, #1
 8006e7c:	e7ee      	b.n	8006e5c <_printf_float+0x2a4>
 8006e7e:	bf00      	nop
 8006e80:	7fefffff 	.word	0x7fefffff
 8006e84:	0800bac8 	.word	0x0800bac8
 8006e88:	0800bacc 	.word	0x0800bacc
 8006e8c:	0800bad0 	.word	0x0800bad0
 8006e90:	0800bad4 	.word	0x0800bad4
 8006e94:	0800be68 	.word	0x0800be68
 8006e98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e9e:	4553      	cmp	r3, sl
 8006ea0:	bfa8      	it	ge
 8006ea2:	4653      	movge	r3, sl
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	4699      	mov	r9, r3
 8006ea8:	dc36      	bgt.n	8006f18 <_printf_float+0x360>
 8006eaa:	f04f 0b00 	mov.w	fp, #0
 8006eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eb2:	f104 021a 	add.w	r2, r4, #26
 8006eb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eb8:	9306      	str	r3, [sp, #24]
 8006eba:	eba3 0309 	sub.w	r3, r3, r9
 8006ebe:	455b      	cmp	r3, fp
 8006ec0:	dc31      	bgt.n	8006f26 <_printf_float+0x36e>
 8006ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec4:	459a      	cmp	sl, r3
 8006ec6:	dc3a      	bgt.n	8006f3e <_printf_float+0x386>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	07da      	lsls	r2, r3, #31
 8006ecc:	d437      	bmi.n	8006f3e <_printf_float+0x386>
 8006ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed0:	ebaa 0903 	sub.w	r9, sl, r3
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	ebaa 0303 	sub.w	r3, sl, r3
 8006eda:	4599      	cmp	r9, r3
 8006edc:	bfa8      	it	ge
 8006ede:	4699      	movge	r9, r3
 8006ee0:	f1b9 0f00 	cmp.w	r9, #0
 8006ee4:	dc33      	bgt.n	8006f4e <_printf_float+0x396>
 8006ee6:	f04f 0800 	mov.w	r8, #0
 8006eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eee:	f104 0b1a 	add.w	fp, r4, #26
 8006ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ef8:	eba3 0309 	sub.w	r3, r3, r9
 8006efc:	4543      	cmp	r3, r8
 8006efe:	f77f af79 	ble.w	8006df4 <_printf_float+0x23c>
 8006f02:	2301      	movs	r3, #1
 8006f04:	465a      	mov	r2, fp
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f43f aeae 	beq.w	8006c6e <_printf_float+0xb6>
 8006f12:	f108 0801 	add.w	r8, r8, #1
 8006f16:	e7ec      	b.n	8006ef2 <_printf_float+0x33a>
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	d1c2      	bne.n	8006eaa <_printf_float+0x2f2>
 8006f24:	e6a3      	b.n	8006c6e <_printf_float+0xb6>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	9206      	str	r2, [sp, #24]
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f ae9c 	beq.w	8006c6e <_printf_float+0xb6>
 8006f36:	9a06      	ldr	r2, [sp, #24]
 8006f38:	f10b 0b01 	add.w	fp, fp, #1
 8006f3c:	e7bb      	b.n	8006eb6 <_printf_float+0x2fe>
 8006f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d1c0      	bne.n	8006ece <_printf_float+0x316>
 8006f4c:	e68f      	b.n	8006c6e <_printf_float+0xb6>
 8006f4e:	9a06      	ldr	r2, [sp, #24]
 8006f50:	464b      	mov	r3, r9
 8006f52:	4442      	add	r2, r8
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d1c3      	bne.n	8006ee6 <_printf_float+0x32e>
 8006f5e:	e686      	b.n	8006c6e <_printf_float+0xb6>
 8006f60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f64:	f1ba 0f01 	cmp.w	sl, #1
 8006f68:	dc01      	bgt.n	8006f6e <_printf_float+0x3b6>
 8006f6a:	07db      	lsls	r3, r3, #31
 8006f6c:	d536      	bpl.n	8006fdc <_printf_float+0x424>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4642      	mov	r2, r8
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f43f ae78 	beq.w	8006c6e <_printf_float+0xb6>
 8006f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f ae70 	beq.w	8006c6e <_printf_float+0xb6>
 8006f8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f92:	2200      	movs	r2, #0
 8006f94:	2300      	movs	r3, #0
 8006f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f9a:	f7f9 fdb5 	bl	8000b08 <__aeabi_dcmpeq>
 8006f9e:	b9c0      	cbnz	r0, 8006fd2 <_printf_float+0x41a>
 8006fa0:	4653      	mov	r3, sl
 8006fa2:	f108 0201 	add.w	r2, r8, #1
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	d10c      	bne.n	8006fca <_printf_float+0x412>
 8006fb0:	e65d      	b.n	8006c6e <_printf_float+0xb6>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	465a      	mov	r2, fp
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4628      	mov	r0, r5
 8006fba:	47b8      	blx	r7
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f43f ae56 	beq.w	8006c6e <_printf_float+0xb6>
 8006fc2:	f108 0801 	add.w	r8, r8, #1
 8006fc6:	45d0      	cmp	r8, sl
 8006fc8:	dbf3      	blt.n	8006fb2 <_printf_float+0x3fa>
 8006fca:	464b      	mov	r3, r9
 8006fcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fd0:	e6df      	b.n	8006d92 <_printf_float+0x1da>
 8006fd2:	f04f 0800 	mov.w	r8, #0
 8006fd6:	f104 0b1a 	add.w	fp, r4, #26
 8006fda:	e7f4      	b.n	8006fc6 <_printf_float+0x40e>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4642      	mov	r2, r8
 8006fe0:	e7e1      	b.n	8006fa6 <_printf_float+0x3ee>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	464a      	mov	r2, r9
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f ae3e 	beq.w	8006c6e <_printf_float+0xb6>
 8006ff2:	f108 0801 	add.w	r8, r8, #1
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ffa:	1a5b      	subs	r3, r3, r1
 8006ffc:	4543      	cmp	r3, r8
 8006ffe:	dcf0      	bgt.n	8006fe2 <_printf_float+0x42a>
 8007000:	e6fc      	b.n	8006dfc <_printf_float+0x244>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	f104 0919 	add.w	r9, r4, #25
 800700a:	e7f4      	b.n	8006ff6 <_printf_float+0x43e>

0800700c <_printf_common>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	4616      	mov	r6, r2
 8007012:	4698      	mov	r8, r3
 8007014:	688a      	ldr	r2, [r1, #8]
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800701c:	4293      	cmp	r3, r2
 800701e:	bfb8      	it	lt
 8007020:	4613      	movlt	r3, r2
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007028:	4607      	mov	r7, r0
 800702a:	460c      	mov	r4, r1
 800702c:	b10a      	cbz	r2, 8007032 <_printf_common+0x26>
 800702e:	3301      	adds	r3, #1
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	0699      	lsls	r1, r3, #26
 8007036:	bf42      	ittt	mi
 8007038:	6833      	ldrmi	r3, [r6, #0]
 800703a:	3302      	addmi	r3, #2
 800703c:	6033      	strmi	r3, [r6, #0]
 800703e:	6825      	ldr	r5, [r4, #0]
 8007040:	f015 0506 	ands.w	r5, r5, #6
 8007044:	d106      	bne.n	8007054 <_printf_common+0x48>
 8007046:	f104 0a19 	add.w	sl, r4, #25
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	6832      	ldr	r2, [r6, #0]
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	42ab      	cmp	r3, r5
 8007052:	dc26      	bgt.n	80070a2 <_printf_common+0x96>
 8007054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	3b00      	subs	r3, #0
 800705c:	bf18      	it	ne
 800705e:	2301      	movne	r3, #1
 8007060:	0692      	lsls	r2, r2, #26
 8007062:	d42b      	bmi.n	80070bc <_printf_common+0xb0>
 8007064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007068:	4641      	mov	r1, r8
 800706a:	4638      	mov	r0, r7
 800706c:	47c8      	blx	r9
 800706e:	3001      	adds	r0, #1
 8007070:	d01e      	beq.n	80070b0 <_printf_common+0xa4>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	f003 0306 	and.w	r3, r3, #6
 800707a:	2b04      	cmp	r3, #4
 800707c:	bf02      	ittt	eq
 800707e:	68e5      	ldreq	r5, [r4, #12]
 8007080:	6833      	ldreq	r3, [r6, #0]
 8007082:	1aed      	subeq	r5, r5, r3
 8007084:	68a3      	ldr	r3, [r4, #8]
 8007086:	bf0c      	ite	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	2500      	movne	r5, #0
 800708e:	4293      	cmp	r3, r2
 8007090:	bfc4      	itt	gt
 8007092:	1a9b      	subgt	r3, r3, r2
 8007094:	18ed      	addgt	r5, r5, r3
 8007096:	2600      	movs	r6, #0
 8007098:	341a      	adds	r4, #26
 800709a:	42b5      	cmp	r5, r6
 800709c:	d11a      	bne.n	80070d4 <_printf_common+0xc8>
 800709e:	2000      	movs	r0, #0
 80070a0:	e008      	b.n	80070b4 <_printf_common+0xa8>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4652      	mov	r2, sl
 80070a6:	4641      	mov	r1, r8
 80070a8:	4638      	mov	r0, r7
 80070aa:	47c8      	blx	r9
 80070ac:	3001      	adds	r0, #1
 80070ae:	d103      	bne.n	80070b8 <_printf_common+0xac>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7c6      	b.n	800704a <_printf_common+0x3e>
 80070bc:	18e1      	adds	r1, r4, r3
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	2030      	movs	r0, #48	@ 0x30
 80070c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070c6:	4422      	add	r2, r4
 80070c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d0:	3302      	adds	r3, #2
 80070d2:	e7c7      	b.n	8007064 <_printf_common+0x58>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4622      	mov	r2, r4
 80070d8:	4641      	mov	r1, r8
 80070da:	4638      	mov	r0, r7
 80070dc:	47c8      	blx	r9
 80070de:	3001      	adds	r0, #1
 80070e0:	d0e6      	beq.n	80070b0 <_printf_common+0xa4>
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7d9      	b.n	800709a <_printf_common+0x8e>
	...

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	7e0f      	ldrb	r7, [r1, #24]
 80070ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f0:	2f78      	cmp	r7, #120	@ 0x78
 80070f2:	4691      	mov	r9, r2
 80070f4:	4680      	mov	r8, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	469a      	mov	sl, r3
 80070fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	@ 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d2 	beq.w	80072ae <_printf_i+0x1c6>
 800710a:	2f58      	cmp	r7, #88	@ 0x58
 800710c:	f000 80b9 	beq.w	8007282 <_printf_i+0x19a>
 8007110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a101      	add	r1, pc, #4	@ (adr r1, 8007128 <_printf_i+0x40>)
 8007124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	08007295 	.word	0x08007295
 8007158:	080071bf 	.word	0x080071bf
 800715c:	0800724f 	.word	0x0800724f
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072b7 	.word	0x080072b7
 800716c:	08007111 	.word	0x08007111
 8007170:	080071bf 	.word	0x080071bf
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	08007257 	.word	0x08007257
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6032      	str	r2, [r6, #0]
 8007188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e09d      	b.n	80072d0 <_printf_i+0x1e8>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	6031      	str	r1, [r6, #0]
 800719c:	0606      	lsls	r6, r0, #24
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0xbc>
 80071a0:	681d      	ldr	r5, [r3, #0]
 80071a2:	e003      	b.n	80071ac <_printf_i+0xc4>
 80071a4:	0645      	lsls	r5, r0, #25
 80071a6:	d5fb      	bpl.n	80071a0 <_printf_i+0xb8>
 80071a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	da03      	bge.n	80071b8 <_printf_i+0xd0>
 80071b0:	232d      	movs	r3, #45	@ 0x2d
 80071b2:	426d      	negs	r5, r5
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b8:	4859      	ldr	r0, [pc, #356]	@ (8007320 <_printf_i+0x238>)
 80071ba:	230a      	movs	r3, #10
 80071bc:	e011      	b.n	80071e2 <_printf_i+0xfa>
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	0608      	lsls	r0, r1, #24
 80071c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c8:	d402      	bmi.n	80071d0 <_printf_i+0xe8>
 80071ca:	0649      	lsls	r1, r1, #25
 80071cc:	bf48      	it	mi
 80071ce:	b2ad      	uxthmi	r5, r5
 80071d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071d2:	4853      	ldr	r0, [pc, #332]	@ (8007320 <_printf_i+0x238>)
 80071d4:	6033      	str	r3, [r6, #0]
 80071d6:	bf14      	ite	ne
 80071d8:	230a      	movne	r3, #10
 80071da:	2308      	moveq	r3, #8
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071e2:	6866      	ldr	r6, [r4, #4]
 80071e4:	60a6      	str	r6, [r4, #8]
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	bfa2      	ittt	ge
 80071ea:	6821      	ldrge	r1, [r4, #0]
 80071ec:	f021 0104 	bicge.w	r1, r1, #4
 80071f0:	6021      	strge	r1, [r4, #0]
 80071f2:	b90d      	cbnz	r5, 80071f8 <_printf_i+0x110>
 80071f4:	2e00      	cmp	r6, #0
 80071f6:	d04b      	beq.n	8007290 <_printf_i+0x1a8>
 80071f8:	4616      	mov	r6, r2
 80071fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80071fe:	fb03 5711 	mls	r7, r3, r1, r5
 8007202:	5dc7      	ldrb	r7, [r0, r7]
 8007204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007208:	462f      	mov	r7, r5
 800720a:	42bb      	cmp	r3, r7
 800720c:	460d      	mov	r5, r1
 800720e:	d9f4      	bls.n	80071fa <_printf_i+0x112>
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10b      	bne.n	800722c <_printf_i+0x144>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	07df      	lsls	r7, r3, #31
 8007218:	d508      	bpl.n	800722c <_printf_i+0x144>
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	6861      	ldr	r1, [r4, #4]
 800721e:	4299      	cmp	r1, r3
 8007220:	bfde      	ittt	le
 8007222:	2330      	movle	r3, #48	@ 0x30
 8007224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800722c:	1b92      	subs	r2, r2, r6
 800722e:	6122      	str	r2, [r4, #16]
 8007230:	f8cd a000 	str.w	sl, [sp]
 8007234:	464b      	mov	r3, r9
 8007236:	aa03      	add	r2, sp, #12
 8007238:	4621      	mov	r1, r4
 800723a:	4640      	mov	r0, r8
 800723c:	f7ff fee6 	bl	800700c <_printf_common>
 8007240:	3001      	adds	r0, #1
 8007242:	d14a      	bne.n	80072da <_printf_i+0x1f2>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	b004      	add	sp, #16
 800724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	f043 0320 	orr.w	r3, r3, #32
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	4833      	ldr	r0, [pc, #204]	@ (8007324 <_printf_i+0x23c>)
 8007258:	2778      	movs	r7, #120	@ 0x78
 800725a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	6831      	ldr	r1, [r6, #0]
 8007262:	061f      	lsls	r7, r3, #24
 8007264:	f851 5b04 	ldr.w	r5, [r1], #4
 8007268:	d402      	bmi.n	8007270 <_printf_i+0x188>
 800726a:	065f      	lsls	r7, r3, #25
 800726c:	bf48      	it	mi
 800726e:	b2ad      	uxthmi	r5, r5
 8007270:	6031      	str	r1, [r6, #0]
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	bf44      	itt	mi
 8007276:	f043 0320 	orrmi.w	r3, r3, #32
 800727a:	6023      	strmi	r3, [r4, #0]
 800727c:	b11d      	cbz	r5, 8007286 <_printf_i+0x19e>
 800727e:	2310      	movs	r3, #16
 8007280:	e7ac      	b.n	80071dc <_printf_i+0xf4>
 8007282:	4827      	ldr	r0, [pc, #156]	@ (8007320 <_printf_i+0x238>)
 8007284:	e7e9      	b.n	800725a <_printf_i+0x172>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f023 0320 	bic.w	r3, r3, #32
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	e7f6      	b.n	800727e <_printf_i+0x196>
 8007290:	4616      	mov	r6, r2
 8007292:	e7bd      	b.n	8007210 <_printf_i+0x128>
 8007294:	6833      	ldr	r3, [r6, #0]
 8007296:	6825      	ldr	r5, [r4, #0]
 8007298:	6961      	ldr	r1, [r4, #20]
 800729a:	1d18      	adds	r0, r3, #4
 800729c:	6030      	str	r0, [r6, #0]
 800729e:	062e      	lsls	r6, r5, #24
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	d501      	bpl.n	80072a8 <_printf_i+0x1c0>
 80072a4:	6019      	str	r1, [r3, #0]
 80072a6:	e002      	b.n	80072ae <_printf_i+0x1c6>
 80072a8:	0668      	lsls	r0, r5, #25
 80072aa:	d5fb      	bpl.n	80072a4 <_printf_i+0x1bc>
 80072ac:	8019      	strh	r1, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	4616      	mov	r6, r2
 80072b4:	e7bc      	b.n	8007230 <_printf_i+0x148>
 80072b6:	6833      	ldr	r3, [r6, #0]
 80072b8:	1d1a      	adds	r2, r3, #4
 80072ba:	6032      	str	r2, [r6, #0]
 80072bc:	681e      	ldr	r6, [r3, #0]
 80072be:	6862      	ldr	r2, [r4, #4]
 80072c0:	2100      	movs	r1, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7f8 ffa4 	bl	8000210 <memchr>
 80072c8:	b108      	cbz	r0, 80072ce <_printf_i+0x1e6>
 80072ca:	1b80      	subs	r0, r0, r6
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d8:	e7aa      	b.n	8007230 <_printf_i+0x148>
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d0ad      	beq.n	8007244 <_printf_i+0x15c>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	079b      	lsls	r3, r3, #30
 80072ec:	d413      	bmi.n	8007316 <_printf_i+0x22e>
 80072ee:	68e0      	ldr	r0, [r4, #12]
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	4298      	cmp	r0, r3
 80072f4:	bfb8      	it	lt
 80072f6:	4618      	movlt	r0, r3
 80072f8:	e7a6      	b.n	8007248 <_printf_i+0x160>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4632      	mov	r2, r6
 80072fe:	4649      	mov	r1, r9
 8007300:	4640      	mov	r0, r8
 8007302:	47d0      	blx	sl
 8007304:	3001      	adds	r0, #1
 8007306:	d09d      	beq.n	8007244 <_printf_i+0x15c>
 8007308:	3501      	adds	r5, #1
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	9903      	ldr	r1, [sp, #12]
 800730e:	1a5b      	subs	r3, r3, r1
 8007310:	42ab      	cmp	r3, r5
 8007312:	dcf2      	bgt.n	80072fa <_printf_i+0x212>
 8007314:	e7eb      	b.n	80072ee <_printf_i+0x206>
 8007316:	2500      	movs	r5, #0
 8007318:	f104 0619 	add.w	r6, r4, #25
 800731c:	e7f5      	b.n	800730a <_printf_i+0x222>
 800731e:	bf00      	nop
 8007320:	0800bad8 	.word	0x0800bad8
 8007324:	0800bae9 	.word	0x0800bae9

08007328 <_scanf_float>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b087      	sub	sp, #28
 800732e:	4617      	mov	r7, r2
 8007330:	9303      	str	r3, [sp, #12]
 8007332:	688b      	ldr	r3, [r1, #8]
 8007334:	1e5a      	subs	r2, r3, #1
 8007336:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800733a:	bf81      	itttt	hi
 800733c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007340:	eb03 0b05 	addhi.w	fp, r3, r5
 8007344:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007348:	608b      	strhi	r3, [r1, #8]
 800734a:	680b      	ldr	r3, [r1, #0]
 800734c:	460a      	mov	r2, r1
 800734e:	f04f 0500 	mov.w	r5, #0
 8007352:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007356:	f842 3b1c 	str.w	r3, [r2], #28
 800735a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800735e:	4680      	mov	r8, r0
 8007360:	460c      	mov	r4, r1
 8007362:	bf98      	it	ls
 8007364:	f04f 0b00 	movls.w	fp, #0
 8007368:	9201      	str	r2, [sp, #4]
 800736a:	4616      	mov	r6, r2
 800736c:	46aa      	mov	sl, r5
 800736e:	46a9      	mov	r9, r5
 8007370:	9502      	str	r5, [sp, #8]
 8007372:	68a2      	ldr	r2, [r4, #8]
 8007374:	b152      	cbz	r2, 800738c <_scanf_float+0x64>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b4e      	cmp	r3, #78	@ 0x4e
 800737c:	d864      	bhi.n	8007448 <_scanf_float+0x120>
 800737e:	2b40      	cmp	r3, #64	@ 0x40
 8007380:	d83c      	bhi.n	80073fc <_scanf_float+0xd4>
 8007382:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007386:	b2c8      	uxtb	r0, r1
 8007388:	280e      	cmp	r0, #14
 800738a:	d93a      	bls.n	8007402 <_scanf_float+0xda>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	d003      	beq.n	800739a <_scanf_float+0x72>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800739e:	f1ba 0f01 	cmp.w	sl, #1
 80073a2:	f200 8117 	bhi.w	80075d4 <_scanf_float+0x2ac>
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	429e      	cmp	r6, r3
 80073aa:	f200 8108 	bhi.w	80075be <_scanf_float+0x296>
 80073ae:	2001      	movs	r0, #1
 80073b0:	b007      	add	sp, #28
 80073b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80073ba:	2a0d      	cmp	r2, #13
 80073bc:	d8e6      	bhi.n	800738c <_scanf_float+0x64>
 80073be:	a101      	add	r1, pc, #4	@ (adr r1, 80073c4 <_scanf_float+0x9c>)
 80073c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073c4:	0800750b 	.word	0x0800750b
 80073c8:	0800738d 	.word	0x0800738d
 80073cc:	0800738d 	.word	0x0800738d
 80073d0:	0800738d 	.word	0x0800738d
 80073d4:	0800756b 	.word	0x0800756b
 80073d8:	08007543 	.word	0x08007543
 80073dc:	0800738d 	.word	0x0800738d
 80073e0:	0800738d 	.word	0x0800738d
 80073e4:	08007519 	.word	0x08007519
 80073e8:	0800738d 	.word	0x0800738d
 80073ec:	0800738d 	.word	0x0800738d
 80073f0:	0800738d 	.word	0x0800738d
 80073f4:	0800738d 	.word	0x0800738d
 80073f8:	080074d1 	.word	0x080074d1
 80073fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007400:	e7db      	b.n	80073ba <_scanf_float+0x92>
 8007402:	290e      	cmp	r1, #14
 8007404:	d8c2      	bhi.n	800738c <_scanf_float+0x64>
 8007406:	a001      	add	r0, pc, #4	@ (adr r0, 800740c <_scanf_float+0xe4>)
 8007408:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800740c:	080074c1 	.word	0x080074c1
 8007410:	0800738d 	.word	0x0800738d
 8007414:	080074c1 	.word	0x080074c1
 8007418:	08007557 	.word	0x08007557
 800741c:	0800738d 	.word	0x0800738d
 8007420:	08007469 	.word	0x08007469
 8007424:	080074a7 	.word	0x080074a7
 8007428:	080074a7 	.word	0x080074a7
 800742c:	080074a7 	.word	0x080074a7
 8007430:	080074a7 	.word	0x080074a7
 8007434:	080074a7 	.word	0x080074a7
 8007438:	080074a7 	.word	0x080074a7
 800743c:	080074a7 	.word	0x080074a7
 8007440:	080074a7 	.word	0x080074a7
 8007444:	080074a7 	.word	0x080074a7
 8007448:	2b6e      	cmp	r3, #110	@ 0x6e
 800744a:	d809      	bhi.n	8007460 <_scanf_float+0x138>
 800744c:	2b60      	cmp	r3, #96	@ 0x60
 800744e:	d8b2      	bhi.n	80073b6 <_scanf_float+0x8e>
 8007450:	2b54      	cmp	r3, #84	@ 0x54
 8007452:	d07b      	beq.n	800754c <_scanf_float+0x224>
 8007454:	2b59      	cmp	r3, #89	@ 0x59
 8007456:	d199      	bne.n	800738c <_scanf_float+0x64>
 8007458:	2d07      	cmp	r5, #7
 800745a:	d197      	bne.n	800738c <_scanf_float+0x64>
 800745c:	2508      	movs	r5, #8
 800745e:	e02c      	b.n	80074ba <_scanf_float+0x192>
 8007460:	2b74      	cmp	r3, #116	@ 0x74
 8007462:	d073      	beq.n	800754c <_scanf_float+0x224>
 8007464:	2b79      	cmp	r3, #121	@ 0x79
 8007466:	e7f6      	b.n	8007456 <_scanf_float+0x12e>
 8007468:	6821      	ldr	r1, [r4, #0]
 800746a:	05c8      	lsls	r0, r1, #23
 800746c:	d51b      	bpl.n	80074a6 <_scanf_float+0x17e>
 800746e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007472:	6021      	str	r1, [r4, #0]
 8007474:	f109 0901 	add.w	r9, r9, #1
 8007478:	f1bb 0f00 	cmp.w	fp, #0
 800747c:	d003      	beq.n	8007486 <_scanf_float+0x15e>
 800747e:	3201      	adds	r2, #1
 8007480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007484:	60a2      	str	r2, [r4, #8]
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	3b01      	subs	r3, #1
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	3301      	adds	r3, #1
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3b01      	subs	r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	f340 8087 	ble.w	80075ac <_scanf_float+0x284>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	e765      	b.n	8007372 <_scanf_float+0x4a>
 80074a6:	eb1a 0105 	adds.w	r1, sl, r5
 80074aa:	f47f af6f 	bne.w	800738c <_scanf_float+0x64>
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80074b4:	6022      	str	r2, [r4, #0]
 80074b6:	460d      	mov	r5, r1
 80074b8:	468a      	mov	sl, r1
 80074ba:	f806 3b01 	strb.w	r3, [r6], #1
 80074be:	e7e2      	b.n	8007486 <_scanf_float+0x15e>
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	0610      	lsls	r0, r2, #24
 80074c4:	f57f af62 	bpl.w	800738c <_scanf_float+0x64>
 80074c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	e7f4      	b.n	80074ba <_scanf_float+0x192>
 80074d0:	f1ba 0f00 	cmp.w	sl, #0
 80074d4:	d10e      	bne.n	80074f4 <_scanf_float+0x1cc>
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	d10e      	bne.n	80074fa <_scanf_float+0x1d2>
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074e6:	d108      	bne.n	80074fa <_scanf_float+0x1d2>
 80074e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074ec:	6022      	str	r2, [r4, #0]
 80074ee:	f04f 0a01 	mov.w	sl, #1
 80074f2:	e7e2      	b.n	80074ba <_scanf_float+0x192>
 80074f4:	f1ba 0f02 	cmp.w	sl, #2
 80074f8:	d055      	beq.n	80075a6 <_scanf_float+0x27e>
 80074fa:	2d01      	cmp	r5, #1
 80074fc:	d002      	beq.n	8007504 <_scanf_float+0x1dc>
 80074fe:	2d04      	cmp	r5, #4
 8007500:	f47f af44 	bne.w	800738c <_scanf_float+0x64>
 8007504:	3501      	adds	r5, #1
 8007506:	b2ed      	uxtb	r5, r5
 8007508:	e7d7      	b.n	80074ba <_scanf_float+0x192>
 800750a:	f1ba 0f01 	cmp.w	sl, #1
 800750e:	f47f af3d 	bne.w	800738c <_scanf_float+0x64>
 8007512:	f04f 0a02 	mov.w	sl, #2
 8007516:	e7d0      	b.n	80074ba <_scanf_float+0x192>
 8007518:	b97d      	cbnz	r5, 800753a <_scanf_float+0x212>
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	f47f af38 	bne.w	8007392 <_scanf_float+0x6a>
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007528:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800752c:	f040 8108 	bne.w	8007740 <_scanf_float+0x418>
 8007530:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007534:	6022      	str	r2, [r4, #0]
 8007536:	2501      	movs	r5, #1
 8007538:	e7bf      	b.n	80074ba <_scanf_float+0x192>
 800753a:	2d03      	cmp	r5, #3
 800753c:	d0e2      	beq.n	8007504 <_scanf_float+0x1dc>
 800753e:	2d05      	cmp	r5, #5
 8007540:	e7de      	b.n	8007500 <_scanf_float+0x1d8>
 8007542:	2d02      	cmp	r5, #2
 8007544:	f47f af22 	bne.w	800738c <_scanf_float+0x64>
 8007548:	2503      	movs	r5, #3
 800754a:	e7b6      	b.n	80074ba <_scanf_float+0x192>
 800754c:	2d06      	cmp	r5, #6
 800754e:	f47f af1d 	bne.w	800738c <_scanf_float+0x64>
 8007552:	2507      	movs	r5, #7
 8007554:	e7b1      	b.n	80074ba <_scanf_float+0x192>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	0591      	lsls	r1, r2, #22
 800755a:	f57f af17 	bpl.w	800738c <_scanf_float+0x64>
 800755e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007562:	6022      	str	r2, [r4, #0]
 8007564:	f8cd 9008 	str.w	r9, [sp, #8]
 8007568:	e7a7      	b.n	80074ba <_scanf_float+0x192>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007570:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007574:	d006      	beq.n	8007584 <_scanf_float+0x25c>
 8007576:	0550      	lsls	r0, r2, #21
 8007578:	f57f af08 	bpl.w	800738c <_scanf_float+0x64>
 800757c:	f1b9 0f00 	cmp.w	r9, #0
 8007580:	f000 80de 	beq.w	8007740 <_scanf_float+0x418>
 8007584:	0591      	lsls	r1, r2, #22
 8007586:	bf58      	it	pl
 8007588:	9902      	ldrpl	r1, [sp, #8]
 800758a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800758e:	bf58      	it	pl
 8007590:	eba9 0101 	subpl.w	r1, r9, r1
 8007594:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007598:	bf58      	it	pl
 800759a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800759e:	6022      	str	r2, [r4, #0]
 80075a0:	f04f 0900 	mov.w	r9, #0
 80075a4:	e789      	b.n	80074ba <_scanf_float+0x192>
 80075a6:	f04f 0a03 	mov.w	sl, #3
 80075aa:	e786      	b.n	80074ba <_scanf_float+0x192>
 80075ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075b0:	4639      	mov	r1, r7
 80075b2:	4640      	mov	r0, r8
 80075b4:	4798      	blx	r3
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f aedb 	beq.w	8007372 <_scanf_float+0x4a>
 80075bc:	e6e6      	b.n	800738c <_scanf_float+0x64>
 80075be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c6:	463a      	mov	r2, r7
 80075c8:	4640      	mov	r0, r8
 80075ca:	4798      	blx	r3
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	e6e8      	b.n	80073a6 <_scanf_float+0x7e>
 80075d4:	1e6b      	subs	r3, r5, #1
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	d824      	bhi.n	8007624 <_scanf_float+0x2fc>
 80075da:	2d02      	cmp	r5, #2
 80075dc:	d836      	bhi.n	800764c <_scanf_float+0x324>
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	429e      	cmp	r6, r3
 80075e2:	f67f aee4 	bls.w	80073ae <_scanf_float+0x86>
 80075e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ee:	463a      	mov	r2, r7
 80075f0:	4640      	mov	r0, r8
 80075f2:	4798      	blx	r3
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	e7f0      	b.n	80075de <_scanf_float+0x2b6>
 80075fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007600:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007604:	463a      	mov	r2, r7
 8007606:	4640      	mov	r0, r8
 8007608:	4798      	blx	r3
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007614:	fa5f fa8a 	uxtb.w	sl, sl
 8007618:	f1ba 0f02 	cmp.w	sl, #2
 800761c:	d1ee      	bne.n	80075fc <_scanf_float+0x2d4>
 800761e:	3d03      	subs	r5, #3
 8007620:	b2ed      	uxtb	r5, r5
 8007622:	1b76      	subs	r6, r6, r5
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	05da      	lsls	r2, r3, #23
 8007628:	d530      	bpl.n	800768c <_scanf_float+0x364>
 800762a:	055b      	lsls	r3, r3, #21
 800762c:	d511      	bpl.n	8007652 <_scanf_float+0x32a>
 800762e:	9b01      	ldr	r3, [sp, #4]
 8007630:	429e      	cmp	r6, r3
 8007632:	f67f aebc 	bls.w	80073ae <_scanf_float+0x86>
 8007636:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800763a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800763e:	463a      	mov	r2, r7
 8007640:	4640      	mov	r0, r8
 8007642:	4798      	blx	r3
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	3b01      	subs	r3, #1
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	e7f0      	b.n	800762e <_scanf_float+0x306>
 800764c:	46aa      	mov	sl, r5
 800764e:	46b3      	mov	fp, r6
 8007650:	e7de      	b.n	8007610 <_scanf_float+0x2e8>
 8007652:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	2965      	cmp	r1, #101	@ 0x65
 800765a:	f103 33ff 	add.w	r3, r3, #4294967295
 800765e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	d00c      	beq.n	8007680 <_scanf_float+0x358>
 8007666:	2945      	cmp	r1, #69	@ 0x45
 8007668:	d00a      	beq.n	8007680 <_scanf_float+0x358>
 800766a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800766e:	463a      	mov	r2, r7
 8007670:	4640      	mov	r0, r8
 8007672:	4798      	blx	r3
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800767a:	3b01      	subs	r3, #1
 800767c:	1eb5      	subs	r5, r6, #2
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007684:	463a      	mov	r2, r7
 8007686:	4640      	mov	r0, r8
 8007688:	4798      	blx	r3
 800768a:	462e      	mov	r6, r5
 800768c:	6822      	ldr	r2, [r4, #0]
 800768e:	f012 0210 	ands.w	r2, r2, #16
 8007692:	d001      	beq.n	8007698 <_scanf_float+0x370>
 8007694:	2000      	movs	r0, #0
 8007696:	e68b      	b.n	80073b0 <_scanf_float+0x88>
 8007698:	7032      	strb	r2, [r6, #0]
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a4:	d11c      	bne.n	80076e0 <_scanf_float+0x3b8>
 80076a6:	9b02      	ldr	r3, [sp, #8]
 80076a8:	454b      	cmp	r3, r9
 80076aa:	eba3 0209 	sub.w	r2, r3, r9
 80076ae:	d123      	bne.n	80076f8 <_scanf_float+0x3d0>
 80076b0:	9901      	ldr	r1, [sp, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	4640      	mov	r0, r8
 80076b6:	f002 fd27 	bl	800a108 <_strtod_r>
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	6821      	ldr	r1, [r4, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f011 0f02 	tst.w	r1, #2
 80076c4:	ec57 6b10 	vmov	r6, r7, d0
 80076c8:	f103 0204 	add.w	r2, r3, #4
 80076cc:	d01f      	beq.n	800770e <_scanf_float+0x3e6>
 80076ce:	9903      	ldr	r1, [sp, #12]
 80076d0:	600a      	str	r2, [r1, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	e9c3 6700 	strd	r6, r7, [r3]
 80076d8:	68e3      	ldr	r3, [r4, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60e3      	str	r3, [r4, #12]
 80076de:	e7d9      	b.n	8007694 <_scanf_float+0x36c>
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0e4      	beq.n	80076b0 <_scanf_float+0x388>
 80076e6:	9905      	ldr	r1, [sp, #20]
 80076e8:	230a      	movs	r3, #10
 80076ea:	3101      	adds	r1, #1
 80076ec:	4640      	mov	r0, r8
 80076ee:	f002 fd8b 	bl	800a208 <_strtol_r>
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	9e05      	ldr	r6, [sp, #20]
 80076f6:	1ac2      	subs	r2, r0, r3
 80076f8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80076fc:	429e      	cmp	r6, r3
 80076fe:	bf28      	it	cs
 8007700:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007704:	4910      	ldr	r1, [pc, #64]	@ (8007748 <_scanf_float+0x420>)
 8007706:	4630      	mov	r0, r6
 8007708:	f000 f9f6 	bl	8007af8 <siprintf>
 800770c:	e7d0      	b.n	80076b0 <_scanf_float+0x388>
 800770e:	f011 0f04 	tst.w	r1, #4
 8007712:	9903      	ldr	r1, [sp, #12]
 8007714:	600a      	str	r2, [r1, #0]
 8007716:	d1dc      	bne.n	80076d2 <_scanf_float+0x3aa>
 8007718:	681d      	ldr	r5, [r3, #0]
 800771a:	4632      	mov	r2, r6
 800771c:	463b      	mov	r3, r7
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f9 fa23 	bl	8000b6c <__aeabi_dcmpun>
 8007726:	b128      	cbz	r0, 8007734 <_scanf_float+0x40c>
 8007728:	4808      	ldr	r0, [pc, #32]	@ (800774c <_scanf_float+0x424>)
 800772a:	f000 fb99 	bl	8007e60 <nanf>
 800772e:	ed85 0a00 	vstr	s0, [r5]
 8007732:	e7d1      	b.n	80076d8 <_scanf_float+0x3b0>
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f9 fa76 	bl	8000c28 <__aeabi_d2f>
 800773c:	6028      	str	r0, [r5, #0]
 800773e:	e7cb      	b.n	80076d8 <_scanf_float+0x3b0>
 8007740:	f04f 0900 	mov.w	r9, #0
 8007744:	e629      	b.n	800739a <_scanf_float+0x72>
 8007746:	bf00      	nop
 8007748:	0800bafa 	.word	0x0800bafa
 800774c:	0800beb0 	.word	0x0800beb0

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	@ 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	@ 0x5c
 800776e:	f000 fae7 	bl	8007d40 <memset>
 8007772:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <std+0x58>)
 8007774:	6263      	str	r3, [r4, #36]	@ 0x24
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <std+0x5c>)
 8007778:	62a3      	str	r3, [r4, #40]	@ 0x28
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <std+0x60>)
 800777c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800777e:	4b0d      	ldr	r3, [pc, #52]	@ (80077b4 <std+0x64>)
 8007780:	6323      	str	r3, [r4, #48]	@ 0x30
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <std+0x68>)
 8007784:	6224      	str	r4, [r4, #32]
 8007786:	429c      	cmp	r4, r3
 8007788:	d006      	beq.n	8007798 <std+0x48>
 800778a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800778e:	4294      	cmp	r4, r2
 8007790:	d002      	beq.n	8007798 <std+0x48>
 8007792:	33d0      	adds	r3, #208	@ 0xd0
 8007794:	429c      	cmp	r4, r3
 8007796:	d105      	bne.n	80077a4 <std+0x54>
 8007798:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800779c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a0:	f000 bb5a 	b.w	8007e58 <__retarget_lock_init_recursive>
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	bf00      	nop
 80077a8:	08007b8d 	.word	0x08007b8d
 80077ac:	08007bb3 	.word	0x08007bb3
 80077b0:	08007beb 	.word	0x08007beb
 80077b4:	08007c0f 	.word	0x08007c0f
 80077b8:	20009e10 	.word	0x20009e10

080077bc <stdio_exit_handler>:
 80077bc:	4a02      	ldr	r2, [pc, #8]	@ (80077c8 <stdio_exit_handler+0xc>)
 80077be:	4903      	ldr	r1, [pc, #12]	@ (80077cc <stdio_exit_handler+0x10>)
 80077c0:	4803      	ldr	r0, [pc, #12]	@ (80077d0 <stdio_exit_handler+0x14>)
 80077c2:	f000 b869 	b.w	8007898 <_fwalk_sglue>
 80077c6:	bf00      	nop
 80077c8:	20001c70 	.word	0x20001c70
 80077cc:	0800abf9 	.word	0x0800abf9
 80077d0:	20001c80 	.word	0x20001c80

080077d4 <cleanup_stdio>:
 80077d4:	6841      	ldr	r1, [r0, #4]
 80077d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <cleanup_stdio+0x34>)
 80077d8:	4299      	cmp	r1, r3
 80077da:	b510      	push	{r4, lr}
 80077dc:	4604      	mov	r4, r0
 80077de:	d001      	beq.n	80077e4 <cleanup_stdio+0x10>
 80077e0:	f003 fa0a 	bl	800abf8 <_fflush_r>
 80077e4:	68a1      	ldr	r1, [r4, #8]
 80077e6:	4b09      	ldr	r3, [pc, #36]	@ (800780c <cleanup_stdio+0x38>)
 80077e8:	4299      	cmp	r1, r3
 80077ea:	d002      	beq.n	80077f2 <cleanup_stdio+0x1e>
 80077ec:	4620      	mov	r0, r4
 80077ee:	f003 fa03 	bl	800abf8 <_fflush_r>
 80077f2:	68e1      	ldr	r1, [r4, #12]
 80077f4:	4b06      	ldr	r3, [pc, #24]	@ (8007810 <cleanup_stdio+0x3c>)
 80077f6:	4299      	cmp	r1, r3
 80077f8:	d004      	beq.n	8007804 <cleanup_stdio+0x30>
 80077fa:	4620      	mov	r0, r4
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007800:	f003 b9fa 	b.w	800abf8 <_fflush_r>
 8007804:	bd10      	pop	{r4, pc}
 8007806:	bf00      	nop
 8007808:	20009e10 	.word	0x20009e10
 800780c:	20009e78 	.word	0x20009e78
 8007810:	20009ee0 	.word	0x20009ee0

08007814 <global_stdio_init.part.0>:
 8007814:	b510      	push	{r4, lr}
 8007816:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <global_stdio_init.part.0+0x30>)
 8007818:	4c0b      	ldr	r4, [pc, #44]	@ (8007848 <global_stdio_init.part.0+0x34>)
 800781a:	4a0c      	ldr	r2, [pc, #48]	@ (800784c <global_stdio_init.part.0+0x38>)
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	4620      	mov	r0, r4
 8007820:	2200      	movs	r2, #0
 8007822:	2104      	movs	r1, #4
 8007824:	f7ff ff94 	bl	8007750 <std>
 8007828:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800782c:	2201      	movs	r2, #1
 800782e:	2109      	movs	r1, #9
 8007830:	f7ff ff8e 	bl	8007750 <std>
 8007834:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007838:	2202      	movs	r2, #2
 800783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783e:	2112      	movs	r1, #18
 8007840:	f7ff bf86 	b.w	8007750 <std>
 8007844:	20009f48 	.word	0x20009f48
 8007848:	20009e10 	.word	0x20009e10
 800784c:	080077bd 	.word	0x080077bd

08007850 <__sfp_lock_acquire>:
 8007850:	4801      	ldr	r0, [pc, #4]	@ (8007858 <__sfp_lock_acquire+0x8>)
 8007852:	f000 bb02 	b.w	8007e5a <__retarget_lock_acquire_recursive>
 8007856:	bf00      	nop
 8007858:	20009f51 	.word	0x20009f51

0800785c <__sfp_lock_release>:
 800785c:	4801      	ldr	r0, [pc, #4]	@ (8007864 <__sfp_lock_release+0x8>)
 800785e:	f000 bafd 	b.w	8007e5c <__retarget_lock_release_recursive>
 8007862:	bf00      	nop
 8007864:	20009f51 	.word	0x20009f51

08007868 <__sinit>:
 8007868:	b510      	push	{r4, lr}
 800786a:	4604      	mov	r4, r0
 800786c:	f7ff fff0 	bl	8007850 <__sfp_lock_acquire>
 8007870:	6a23      	ldr	r3, [r4, #32]
 8007872:	b11b      	cbz	r3, 800787c <__sinit+0x14>
 8007874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007878:	f7ff bff0 	b.w	800785c <__sfp_lock_release>
 800787c:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <__sinit+0x28>)
 800787e:	6223      	str	r3, [r4, #32]
 8007880:	4b04      	ldr	r3, [pc, #16]	@ (8007894 <__sinit+0x2c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f5      	bne.n	8007874 <__sinit+0xc>
 8007888:	f7ff ffc4 	bl	8007814 <global_stdio_init.part.0>
 800788c:	e7f2      	b.n	8007874 <__sinit+0xc>
 800788e:	bf00      	nop
 8007890:	080077d5 	.word	0x080077d5
 8007894:	20009f48 	.word	0x20009f48

08007898 <_fwalk_sglue>:
 8007898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800789c:	4607      	mov	r7, r0
 800789e:	4688      	mov	r8, r1
 80078a0:	4614      	mov	r4, r2
 80078a2:	2600      	movs	r6, #0
 80078a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078a8:	f1b9 0901 	subs.w	r9, r9, #1
 80078ac:	d505      	bpl.n	80078ba <_fwalk_sglue+0x22>
 80078ae:	6824      	ldr	r4, [r4, #0]
 80078b0:	2c00      	cmp	r4, #0
 80078b2:	d1f7      	bne.n	80078a4 <_fwalk_sglue+0xc>
 80078b4:	4630      	mov	r0, r6
 80078b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ba:	89ab      	ldrh	r3, [r5, #12]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d907      	bls.n	80078d0 <_fwalk_sglue+0x38>
 80078c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078c4:	3301      	adds	r3, #1
 80078c6:	d003      	beq.n	80078d0 <_fwalk_sglue+0x38>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c0      	blx	r8
 80078ce:	4306      	orrs	r6, r0
 80078d0:	3568      	adds	r5, #104	@ 0x68
 80078d2:	e7e9      	b.n	80078a8 <_fwalk_sglue+0x10>

080078d4 <_puts_r>:
 80078d4:	6a03      	ldr	r3, [r0, #32]
 80078d6:	b570      	push	{r4, r5, r6, lr}
 80078d8:	6884      	ldr	r4, [r0, #8]
 80078da:	4605      	mov	r5, r0
 80078dc:	460e      	mov	r6, r1
 80078de:	b90b      	cbnz	r3, 80078e4 <_puts_r+0x10>
 80078e0:	f7ff ffc2 	bl	8007868 <__sinit>
 80078e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078e6:	07db      	lsls	r3, r3, #31
 80078e8:	d405      	bmi.n	80078f6 <_puts_r+0x22>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	0598      	lsls	r0, r3, #22
 80078ee:	d402      	bmi.n	80078f6 <_puts_r+0x22>
 80078f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078f2:	f000 fab2 	bl	8007e5a <__retarget_lock_acquire_recursive>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	0719      	lsls	r1, r3, #28
 80078fa:	d502      	bpl.n	8007902 <_puts_r+0x2e>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d135      	bne.n	800796e <_puts_r+0x9a>
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f9c5 	bl	8007c94 <__swsetup_r>
 800790a:	b380      	cbz	r0, 800796e <_puts_r+0x9a>
 800790c:	f04f 35ff 	mov.w	r5, #4294967295
 8007910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007912:	07da      	lsls	r2, r3, #31
 8007914:	d405      	bmi.n	8007922 <_puts_r+0x4e>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	059b      	lsls	r3, r3, #22
 800791a:	d402      	bmi.n	8007922 <_puts_r+0x4e>
 800791c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800791e:	f000 fa9d 	bl	8007e5c <__retarget_lock_release_recursive>
 8007922:	4628      	mov	r0, r5
 8007924:	bd70      	pop	{r4, r5, r6, pc}
 8007926:	2b00      	cmp	r3, #0
 8007928:	da04      	bge.n	8007934 <_puts_r+0x60>
 800792a:	69a2      	ldr	r2, [r4, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	dc17      	bgt.n	8007960 <_puts_r+0x8c>
 8007930:	290a      	cmp	r1, #10
 8007932:	d015      	beq.n	8007960 <_puts_r+0x8c>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	6022      	str	r2, [r4, #0]
 800793a:	7019      	strb	r1, [r3, #0]
 800793c:	68a3      	ldr	r3, [r4, #8]
 800793e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007942:	3b01      	subs	r3, #1
 8007944:	60a3      	str	r3, [r4, #8]
 8007946:	2900      	cmp	r1, #0
 8007948:	d1ed      	bne.n	8007926 <_puts_r+0x52>
 800794a:	2b00      	cmp	r3, #0
 800794c:	da11      	bge.n	8007972 <_puts_r+0x9e>
 800794e:	4622      	mov	r2, r4
 8007950:	210a      	movs	r1, #10
 8007952:	4628      	mov	r0, r5
 8007954:	f000 f95f 	bl	8007c16 <__swbuf_r>
 8007958:	3001      	adds	r0, #1
 800795a:	d0d7      	beq.n	800790c <_puts_r+0x38>
 800795c:	250a      	movs	r5, #10
 800795e:	e7d7      	b.n	8007910 <_puts_r+0x3c>
 8007960:	4622      	mov	r2, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f000 f957 	bl	8007c16 <__swbuf_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d1e7      	bne.n	800793c <_puts_r+0x68>
 800796c:	e7ce      	b.n	800790c <_puts_r+0x38>
 800796e:	3e01      	subs	r6, #1
 8007970:	e7e4      	b.n	800793c <_puts_r+0x68>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	220a      	movs	r2, #10
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e7ee      	b.n	800795c <_puts_r+0x88>
	...

08007980 <puts>:
 8007980:	4b02      	ldr	r3, [pc, #8]	@ (800798c <puts+0xc>)
 8007982:	4601      	mov	r1, r0
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	f7ff bfa5 	b.w	80078d4 <_puts_r>
 800798a:	bf00      	nop
 800798c:	20001c7c 	.word	0x20001c7c

08007990 <setvbuf>:
 8007990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007994:	461d      	mov	r5, r3
 8007996:	4b57      	ldr	r3, [pc, #348]	@ (8007af4 <setvbuf+0x164>)
 8007998:	681f      	ldr	r7, [r3, #0]
 800799a:	4604      	mov	r4, r0
 800799c:	460e      	mov	r6, r1
 800799e:	4690      	mov	r8, r2
 80079a0:	b127      	cbz	r7, 80079ac <setvbuf+0x1c>
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	b913      	cbnz	r3, 80079ac <setvbuf+0x1c>
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ff5e 	bl	8007868 <__sinit>
 80079ac:	f1b8 0f02 	cmp.w	r8, #2
 80079b0:	d006      	beq.n	80079c0 <setvbuf+0x30>
 80079b2:	f1b8 0f01 	cmp.w	r8, #1
 80079b6:	f200 809a 	bhi.w	8007aee <setvbuf+0x15e>
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	f2c0 8097 	blt.w	8007aee <setvbuf+0x15e>
 80079c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c2:	07d9      	lsls	r1, r3, #31
 80079c4:	d405      	bmi.n	80079d2 <setvbuf+0x42>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	059a      	lsls	r2, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <setvbuf+0x42>
 80079cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ce:	f000 fa44 	bl	8007e5a <__retarget_lock_acquire_recursive>
 80079d2:	4621      	mov	r1, r4
 80079d4:	4638      	mov	r0, r7
 80079d6:	f003 f90f 	bl	800abf8 <_fflush_r>
 80079da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079dc:	b141      	cbz	r1, 80079f0 <setvbuf+0x60>
 80079de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079e2:	4299      	cmp	r1, r3
 80079e4:	d002      	beq.n	80079ec <setvbuf+0x5c>
 80079e6:	4638      	mov	r0, r7
 80079e8:	f001 f88e 	bl	8008b08 <_free_r>
 80079ec:	2300      	movs	r3, #0
 80079ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80079f0:	2300      	movs	r3, #0
 80079f2:	61a3      	str	r3, [r4, #24]
 80079f4:	6063      	str	r3, [r4, #4]
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	061b      	lsls	r3, r3, #24
 80079fa:	d503      	bpl.n	8007a04 <setvbuf+0x74>
 80079fc:	6921      	ldr	r1, [r4, #16]
 80079fe:	4638      	mov	r0, r7
 8007a00:	f001 f882 	bl	8008b08 <_free_r>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	f1b8 0f02 	cmp.w	r8, #2
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	d061      	beq.n	8007ada <setvbuf+0x14a>
 8007a16:	ab01      	add	r3, sp, #4
 8007a18:	466a      	mov	r2, sp
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f003 f913 	bl	800ac48 <__swhatbuf_r>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	4318      	orrs	r0, r3
 8007a26:	81a0      	strh	r0, [r4, #12]
 8007a28:	bb2d      	cbnz	r5, 8007a76 <setvbuf+0xe6>
 8007a2a:	9d00      	ldr	r5, [sp, #0]
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f7fe ff6d 	bl	800690c <malloc>
 8007a32:	4606      	mov	r6, r0
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d152      	bne.n	8007ade <setvbuf+0x14e>
 8007a38:	f8dd 9000 	ldr.w	r9, [sp]
 8007a3c:	45a9      	cmp	r9, r5
 8007a3e:	d140      	bne.n	8007ac2 <setvbuf+0x132>
 8007a40:	f04f 35ff 	mov.w	r5, #4294967295
 8007a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a48:	f043 0202 	orr.w	r2, r3, #2
 8007a4c:	81a2      	strh	r2, [r4, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	60a2      	str	r2, [r4, #8]
 8007a52:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007a56:	6022      	str	r2, [r4, #0]
 8007a58:	6122      	str	r2, [r4, #16]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	6162      	str	r2, [r4, #20]
 8007a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a60:	07d6      	lsls	r6, r2, #31
 8007a62:	d404      	bmi.n	8007a6e <setvbuf+0xde>
 8007a64:	0598      	lsls	r0, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <setvbuf+0xde>
 8007a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a6a:	f000 f9f7 	bl	8007e5c <__retarget_lock_release_recursive>
 8007a6e:	4628      	mov	r0, r5
 8007a70:	b003      	add	sp, #12
 8007a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d0d8      	beq.n	8007a2c <setvbuf+0x9c>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	b913      	cbnz	r3, 8007a84 <setvbuf+0xf4>
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff fef2 	bl	8007868 <__sinit>
 8007a84:	f1b8 0f01 	cmp.w	r8, #1
 8007a88:	bf08      	it	eq
 8007a8a:	89a3      	ldrheq	r3, [r4, #12]
 8007a8c:	6026      	str	r6, [r4, #0]
 8007a8e:	bf04      	itt	eq
 8007a90:	f043 0301 	orreq.w	r3, r3, #1
 8007a94:	81a3      	strheq	r3, [r4, #12]
 8007a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9a:	f013 0208 	ands.w	r2, r3, #8
 8007a9e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007aa2:	d01e      	beq.n	8007ae2 <setvbuf+0x152>
 8007aa4:	07d9      	lsls	r1, r3, #31
 8007aa6:	bf41      	itttt	mi
 8007aa8:	2200      	movmi	r2, #0
 8007aaa:	426d      	negmi	r5, r5
 8007aac:	60a2      	strmi	r2, [r4, #8]
 8007aae:	61a5      	strmi	r5, [r4, #24]
 8007ab0:	bf58      	it	pl
 8007ab2:	60a5      	strpl	r5, [r4, #8]
 8007ab4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ab6:	07d2      	lsls	r2, r2, #31
 8007ab8:	d401      	bmi.n	8007abe <setvbuf+0x12e>
 8007aba:	059b      	lsls	r3, r3, #22
 8007abc:	d513      	bpl.n	8007ae6 <setvbuf+0x156>
 8007abe:	2500      	movs	r5, #0
 8007ac0:	e7d5      	b.n	8007a6e <setvbuf+0xde>
 8007ac2:	4648      	mov	r0, r9
 8007ac4:	f7fe ff22 	bl	800690c <malloc>
 8007ac8:	4606      	mov	r6, r0
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0b8      	beq.n	8007a40 <setvbuf+0xb0>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	464d      	mov	r5, r9
 8007ad8:	e7cf      	b.n	8007a7a <setvbuf+0xea>
 8007ada:	2500      	movs	r5, #0
 8007adc:	e7b2      	b.n	8007a44 <setvbuf+0xb4>
 8007ade:	46a9      	mov	r9, r5
 8007ae0:	e7f5      	b.n	8007ace <setvbuf+0x13e>
 8007ae2:	60a2      	str	r2, [r4, #8]
 8007ae4:	e7e6      	b.n	8007ab4 <setvbuf+0x124>
 8007ae6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae8:	f000 f9b8 	bl	8007e5c <__retarget_lock_release_recursive>
 8007aec:	e7e7      	b.n	8007abe <setvbuf+0x12e>
 8007aee:	f04f 35ff 	mov.w	r5, #4294967295
 8007af2:	e7bc      	b.n	8007a6e <setvbuf+0xde>
 8007af4:	20001c7c 	.word	0x20001c7c

08007af8 <siprintf>:
 8007af8:	b40e      	push	{r1, r2, r3}
 8007afa:	b500      	push	{lr}
 8007afc:	b09c      	sub	sp, #112	@ 0x70
 8007afe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b00:	9002      	str	r0, [sp, #8]
 8007b02:	9006      	str	r0, [sp, #24]
 8007b04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b08:	4809      	ldr	r0, [pc, #36]	@ (8007b30 <siprintf+0x38>)
 8007b0a:	9107      	str	r1, [sp, #28]
 8007b0c:	9104      	str	r1, [sp, #16]
 8007b0e:	4909      	ldr	r1, [pc, #36]	@ (8007b34 <siprintf+0x3c>)
 8007b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b14:	9105      	str	r1, [sp, #20]
 8007b16:	6800      	ldr	r0, [r0, #0]
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	a902      	add	r1, sp, #8
 8007b1c:	f002 fbd2 	bl	800a2c4 <_svfiprintf_r>
 8007b20:	9b02      	ldr	r3, [sp, #8]
 8007b22:	2200      	movs	r2, #0
 8007b24:	701a      	strb	r2, [r3, #0]
 8007b26:	b01c      	add	sp, #112	@ 0x70
 8007b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b2c:	b003      	add	sp, #12
 8007b2e:	4770      	bx	lr
 8007b30:	20001c7c 	.word	0x20001c7c
 8007b34:	ffff0208 	.word	0xffff0208

08007b38 <siscanf>:
 8007b38:	b40e      	push	{r1, r2, r3}
 8007b3a:	b530      	push	{r4, r5, lr}
 8007b3c:	b09c      	sub	sp, #112	@ 0x70
 8007b3e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007b40:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007b44:	f854 5b04 	ldr.w	r5, [r4], #4
 8007b48:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007b4c:	9002      	str	r0, [sp, #8]
 8007b4e:	9006      	str	r0, [sp, #24]
 8007b50:	f7f8 fbae 	bl	80002b0 <strlen>
 8007b54:	4b0b      	ldr	r3, [pc, #44]	@ (8007b84 <siscanf+0x4c>)
 8007b56:	9003      	str	r0, [sp, #12]
 8007b58:	9007      	str	r0, [sp, #28]
 8007b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b5c:	480a      	ldr	r0, [pc, #40]	@ (8007b88 <siscanf+0x50>)
 8007b5e:	9401      	str	r4, [sp, #4]
 8007b60:	2300      	movs	r3, #0
 8007b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b64:	9314      	str	r3, [sp, #80]	@ 0x50
 8007b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b6a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4623      	mov	r3, r4
 8007b72:	a902      	add	r1, sp, #8
 8007b74:	6800      	ldr	r0, [r0, #0]
 8007b76:	f002 fcf9 	bl	800a56c <__ssvfiscanf_r>
 8007b7a:	b01c      	add	sp, #112	@ 0x70
 8007b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b80:	b003      	add	sp, #12
 8007b82:	4770      	bx	lr
 8007b84:	08007baf 	.word	0x08007baf
 8007b88:	20001c7c 	.word	0x20001c7c

08007b8c <__sread>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	460c      	mov	r4, r1
 8007b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b94:	f000 f902 	bl	8007d9c <_read_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	bfab      	itete	ge
 8007b9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba0:	181b      	addge	r3, r3, r0
 8007ba2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ba6:	bfac      	ite	ge
 8007ba8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007baa:	81a3      	strhlt	r3, [r4, #12]
 8007bac:	bd10      	pop	{r4, pc}

08007bae <__seofread>:
 8007bae:	2000      	movs	r0, #0
 8007bb0:	4770      	bx	lr

08007bb2 <__swrite>:
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	461f      	mov	r7, r3
 8007bb8:	898b      	ldrh	r3, [r1, #12]
 8007bba:	05db      	lsls	r3, r3, #23
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	d505      	bpl.n	8007bd0 <__swrite+0x1e>
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	2302      	movs	r3, #2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f000 f8d4 	bl	8007d78 <_lseek_r>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	4632      	mov	r2, r6
 8007bde:	463b      	mov	r3, r7
 8007be0:	4628      	mov	r0, r5
 8007be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	f000 b8fb 	b.w	8007de0 <_write_r>

08007bea <__sseek>:
 8007bea:	b510      	push	{r4, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf2:	f000 f8c1 	bl	8007d78 <_lseek_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	bf15      	itete	ne
 8007bfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c06:	81a3      	strheq	r3, [r4, #12]
 8007c08:	bf18      	it	ne
 8007c0a:	81a3      	strhne	r3, [r4, #12]
 8007c0c:	bd10      	pop	{r4, pc}

08007c0e <__sclose>:
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 b8a1 	b.w	8007d58 <_close_r>

08007c16 <__swbuf_r>:
 8007c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c18:	460e      	mov	r6, r1
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	b118      	cbz	r0, 8007c28 <__swbuf_r+0x12>
 8007c20:	6a03      	ldr	r3, [r0, #32]
 8007c22:	b90b      	cbnz	r3, 8007c28 <__swbuf_r+0x12>
 8007c24:	f7ff fe20 	bl	8007868 <__sinit>
 8007c28:	69a3      	ldr	r3, [r4, #24]
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	071a      	lsls	r2, r3, #28
 8007c30:	d501      	bpl.n	8007c36 <__swbuf_r+0x20>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	b943      	cbnz	r3, 8007c48 <__swbuf_r+0x32>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 f82b 	bl	8007c94 <__swsetup_r>
 8007c3e:	b118      	cbz	r0, 8007c48 <__swbuf_r+0x32>
 8007c40:	f04f 37ff 	mov.w	r7, #4294967295
 8007c44:	4638      	mov	r0, r7
 8007c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	6922      	ldr	r2, [r4, #16]
 8007c4c:	1a98      	subs	r0, r3, r2
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	b2f6      	uxtb	r6, r6
 8007c52:	4283      	cmp	r3, r0
 8007c54:	4637      	mov	r7, r6
 8007c56:	dc05      	bgt.n	8007c64 <__swbuf_r+0x4e>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f002 ffcc 	bl	800abf8 <_fflush_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1ed      	bne.n	8007c40 <__swbuf_r+0x2a>
 8007c64:	68a3      	ldr	r3, [r4, #8]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	60a3      	str	r3, [r4, #8]
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	6022      	str	r2, [r4, #0]
 8007c70:	701e      	strb	r6, [r3, #0]
 8007c72:	6962      	ldr	r2, [r4, #20]
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d004      	beq.n	8007c84 <__swbuf_r+0x6e>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	07db      	lsls	r3, r3, #31
 8007c7e:	d5e1      	bpl.n	8007c44 <__swbuf_r+0x2e>
 8007c80:	2e0a      	cmp	r6, #10
 8007c82:	d1df      	bne.n	8007c44 <__swbuf_r+0x2e>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f002 ffb6 	bl	800abf8 <_fflush_r>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d0d9      	beq.n	8007c44 <__swbuf_r+0x2e>
 8007c90:	e7d6      	b.n	8007c40 <__swbuf_r+0x2a>
	...

08007c94 <__swsetup_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4b29      	ldr	r3, [pc, #164]	@ (8007d3c <__swsetup_r+0xa8>)
 8007c98:	4605      	mov	r5, r0
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	b118      	cbz	r0, 8007ca8 <__swsetup_r+0x14>
 8007ca0:	6a03      	ldr	r3, [r0, #32]
 8007ca2:	b90b      	cbnz	r3, 8007ca8 <__swsetup_r+0x14>
 8007ca4:	f7ff fde0 	bl	8007868 <__sinit>
 8007ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cac:	0719      	lsls	r1, r3, #28
 8007cae:	d422      	bmi.n	8007cf6 <__swsetup_r+0x62>
 8007cb0:	06da      	lsls	r2, r3, #27
 8007cb2:	d407      	bmi.n	8007cc4 <__swsetup_r+0x30>
 8007cb4:	2209      	movs	r2, #9
 8007cb6:	602a      	str	r2, [r5, #0]
 8007cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc2:	e033      	b.n	8007d2c <__swsetup_r+0x98>
 8007cc4:	0758      	lsls	r0, r3, #29
 8007cc6:	d512      	bpl.n	8007cee <__swsetup_r+0x5a>
 8007cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cca:	b141      	cbz	r1, 8007cde <__swsetup_r+0x4a>
 8007ccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <__swsetup_r+0x46>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 ff17 	bl	8008b08 <_free_r>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f043 0308 	orr.w	r3, r3, #8
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	6923      	ldr	r3, [r4, #16]
 8007cf8:	b94b      	cbnz	r3, 8007d0e <__swsetup_r+0x7a>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d04:	d003      	beq.n	8007d0e <__swsetup_r+0x7a>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f002 ffc3 	bl	800ac94 <__smakebuf_r>
 8007d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d12:	f013 0201 	ands.w	r2, r3, #1
 8007d16:	d00a      	beq.n	8007d2e <__swsetup_r+0x9a>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	60a2      	str	r2, [r4, #8]
 8007d1c:	6962      	ldr	r2, [r4, #20]
 8007d1e:	4252      	negs	r2, r2
 8007d20:	61a2      	str	r2, [r4, #24]
 8007d22:	6922      	ldr	r2, [r4, #16]
 8007d24:	b942      	cbnz	r2, 8007d38 <__swsetup_r+0xa4>
 8007d26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d2a:	d1c5      	bne.n	8007cb8 <__swsetup_r+0x24>
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	0799      	lsls	r1, r3, #30
 8007d30:	bf58      	it	pl
 8007d32:	6962      	ldrpl	r2, [r4, #20]
 8007d34:	60a2      	str	r2, [r4, #8]
 8007d36:	e7f4      	b.n	8007d22 <__swsetup_r+0x8e>
 8007d38:	2000      	movs	r0, #0
 8007d3a:	e7f7      	b.n	8007d2c <__swsetup_r+0x98>
 8007d3c:	20001c7c 	.word	0x20001c7c

08007d40 <memset>:
 8007d40:	4402      	add	r2, r0
 8007d42:	4603      	mov	r3, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_localeconv_r>:
 8007d50:	4800      	ldr	r0, [pc, #0]	@ (8007d54 <_localeconv_r+0x4>)
 8007d52:	4770      	bx	lr
 8007d54:	20001dbc 	.word	0x20001dbc

08007d58 <_close_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	@ (8007d74 <_close_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7fb f87a 	bl	8002e5c <_close>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_close_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_close_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20009f4c 	.word	0x20009f4c

08007d78 <_lseek_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	@ (8007d98 <_lseek_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7fb f88f 	bl	8002eaa <_lseek>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_lseek_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_lseek_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20009f4c 	.word	0x20009f4c

08007d9c <_read_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d07      	ldr	r5, [pc, #28]	@ (8007dbc <_read_r+0x20>)
 8007da0:	4604      	mov	r4, r0
 8007da2:	4608      	mov	r0, r1
 8007da4:	4611      	mov	r1, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	602a      	str	r2, [r5, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f7fb f81d 	bl	8002dea <_read>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_read_r+0x1e>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_read_r+0x1e>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20009f4c 	.word	0x20009f4c

08007dc0 <_sbrk_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d06      	ldr	r5, [pc, #24]	@ (8007ddc <_sbrk_r+0x1c>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	f7fb f87a 	bl	8002ec4 <_sbrk>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_sbrk_r+0x1a>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_sbrk_r+0x1a>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	20009f4c 	.word	0x20009f4c

08007de0 <_write_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d07      	ldr	r5, [pc, #28]	@ (8007e00 <_write_r+0x20>)
 8007de4:	4604      	mov	r4, r0
 8007de6:	4608      	mov	r0, r1
 8007de8:	4611      	mov	r1, r2
 8007dea:	2200      	movs	r2, #0
 8007dec:	602a      	str	r2, [r5, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	f7fb f818 	bl	8002e24 <_write>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d102      	bne.n	8007dfe <_write_r+0x1e>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	b103      	cbz	r3, 8007dfe <_write_r+0x1e>
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	20009f4c 	.word	0x20009f4c

08007e04 <__errno>:
 8007e04:	4b01      	ldr	r3, [pc, #4]	@ (8007e0c <__errno+0x8>)
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20001c7c 	.word	0x20001c7c

08007e10 <__libc_init_array>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	4d0d      	ldr	r5, [pc, #52]	@ (8007e48 <__libc_init_array+0x38>)
 8007e14:	4c0d      	ldr	r4, [pc, #52]	@ (8007e4c <__libc_init_array+0x3c>)
 8007e16:	1b64      	subs	r4, r4, r5
 8007e18:	10a4      	asrs	r4, r4, #2
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	42a6      	cmp	r6, r4
 8007e1e:	d109      	bne.n	8007e34 <__libc_init_array+0x24>
 8007e20:	4d0b      	ldr	r5, [pc, #44]	@ (8007e50 <__libc_init_array+0x40>)
 8007e22:	4c0c      	ldr	r4, [pc, #48]	@ (8007e54 <__libc_init_array+0x44>)
 8007e24:	f003 fe08 	bl	800ba38 <_init>
 8007e28:	1b64      	subs	r4, r4, r5
 8007e2a:	10a4      	asrs	r4, r4, #2
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	42a6      	cmp	r6, r4
 8007e30:	d105      	bne.n	8007e3e <__libc_init_array+0x2e>
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e38:	4798      	blx	r3
 8007e3a:	3601      	adds	r6, #1
 8007e3c:	e7ee      	b.n	8007e1c <__libc_init_array+0xc>
 8007e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e42:	4798      	blx	r3
 8007e44:	3601      	adds	r6, #1
 8007e46:	e7f2      	b.n	8007e2e <__libc_init_array+0x1e>
 8007e48:	0800bf1c 	.word	0x0800bf1c
 8007e4c:	0800bf1c 	.word	0x0800bf1c
 8007e50:	0800bf1c 	.word	0x0800bf1c
 8007e54:	0800bf20 	.word	0x0800bf20

08007e58 <__retarget_lock_init_recursive>:
 8007e58:	4770      	bx	lr

08007e5a <__retarget_lock_acquire_recursive>:
 8007e5a:	4770      	bx	lr

08007e5c <__retarget_lock_release_recursive>:
 8007e5c:	4770      	bx	lr
	...

08007e60 <nanf>:
 8007e60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007e68 <nanf+0x8>
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	7fc00000 	.word	0x7fc00000

08007e6c <quorem>:
 8007e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	6903      	ldr	r3, [r0, #16]
 8007e72:	690c      	ldr	r4, [r1, #16]
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	4607      	mov	r7, r0
 8007e78:	db7e      	blt.n	8007f78 <quorem+0x10c>
 8007e7a:	3c01      	subs	r4, #1
 8007e7c:	f101 0814 	add.w	r8, r1, #20
 8007e80:	00a3      	lsls	r3, r4, #2
 8007e82:	f100 0514 	add.w	r5, r0, #20
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e96:	3301      	adds	r3, #1
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea2:	d32e      	bcc.n	8007f02 <quorem+0x96>
 8007ea4:	f04f 0a00 	mov.w	sl, #0
 8007ea8:	46c4      	mov	ip, r8
 8007eaa:	46ae      	mov	lr, r5
 8007eac:	46d3      	mov	fp, sl
 8007eae:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007eb2:	b298      	uxth	r0, r3
 8007eb4:	fb06 a000 	mla	r0, r6, r0, sl
 8007eb8:	0c02      	lsrs	r2, r0, #16
 8007eba:	0c1b      	lsrs	r3, r3, #16
 8007ebc:	fb06 2303 	mla	r3, r6, r3, r2
 8007ec0:	f8de 2000 	ldr.w	r2, [lr]
 8007ec4:	b280      	uxth	r0, r0
 8007ec6:	b292      	uxth	r2, r2
 8007ec8:	1a12      	subs	r2, r2, r0
 8007eca:	445a      	add	r2, fp
 8007ecc:	f8de 0000 	ldr.w	r0, [lr]
 8007ed0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007eda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ee4:	45e1      	cmp	r9, ip
 8007ee6:	f84e 2b04 	str.w	r2, [lr], #4
 8007eea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007eee:	d2de      	bcs.n	8007eae <quorem+0x42>
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	58eb      	ldr	r3, [r5, r3]
 8007ef4:	b92b      	cbnz	r3, 8007f02 <quorem+0x96>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	429d      	cmp	r5, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	d32f      	bcc.n	8007f60 <quorem+0xf4>
 8007f00:	613c      	str	r4, [r7, #16]
 8007f02:	4638      	mov	r0, r7
 8007f04:	f001 f90e 	bl	8009124 <__mcmp>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	db25      	blt.n	8007f58 <quorem+0xec>
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f14:	f8d1 c000 	ldr.w	ip, [r1]
 8007f18:	fa1f fe82 	uxth.w	lr, r2
 8007f1c:	fa1f f38c 	uxth.w	r3, ip
 8007f20:	eba3 030e 	sub.w	r3, r3, lr
 8007f24:	4403      	add	r3, r0
 8007f26:	0c12      	lsrs	r2, r2, #16
 8007f28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f36:	45c1      	cmp	r9, r8
 8007f38:	f841 3b04 	str.w	r3, [r1], #4
 8007f3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f40:	d2e6      	bcs.n	8007f10 <quorem+0xa4>
 8007f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f4a:	b922      	cbnz	r2, 8007f56 <quorem+0xea>
 8007f4c:	3b04      	subs	r3, #4
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	d30b      	bcc.n	8007f6c <quorem+0x100>
 8007f54:	613c      	str	r4, [r7, #16]
 8007f56:	3601      	adds	r6, #1
 8007f58:	4630      	mov	r0, r6
 8007f5a:	b003      	add	sp, #12
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	3b04      	subs	r3, #4
 8007f64:	2a00      	cmp	r2, #0
 8007f66:	d1cb      	bne.n	8007f00 <quorem+0x94>
 8007f68:	3c01      	subs	r4, #1
 8007f6a:	e7c6      	b.n	8007efa <quorem+0x8e>
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	d1ef      	bne.n	8007f54 <quorem+0xe8>
 8007f74:	3c01      	subs	r4, #1
 8007f76:	e7ea      	b.n	8007f4e <quorem+0xe2>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7ee      	b.n	8007f5a <quorem+0xee>
 8007f7c:	0000      	movs	r0, r0
	...

08007f80 <_dtoa_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	69c7      	ldr	r7, [r0, #28]
 8007f86:	b099      	sub	sp, #100	@ 0x64
 8007f88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f8c:	ec55 4b10 	vmov	r4, r5, d0
 8007f90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007f92:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f94:	4683      	mov	fp, r0
 8007f96:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f9a:	b97f      	cbnz	r7, 8007fbc <_dtoa_r+0x3c>
 8007f9c:	2010      	movs	r0, #16
 8007f9e:	f7fe fcb5 	bl	800690c <malloc>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007fa8:	b920      	cbnz	r0, 8007fb4 <_dtoa_r+0x34>
 8007faa:	4ba7      	ldr	r3, [pc, #668]	@ (8008248 <_dtoa_r+0x2c8>)
 8007fac:	21ef      	movs	r1, #239	@ 0xef
 8007fae:	48a7      	ldr	r0, [pc, #668]	@ (800824c <_dtoa_r+0x2cc>)
 8007fb0:	f002 ff86 	bl	800aec0 <__assert_func>
 8007fb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fb8:	6007      	str	r7, [r0, #0]
 8007fba:	60c7      	str	r7, [r0, #12]
 8007fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fc0:	6819      	ldr	r1, [r3, #0]
 8007fc2:	b159      	cbz	r1, 8007fdc <_dtoa_r+0x5c>
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	604a      	str	r2, [r1, #4]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4093      	lsls	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f000 fe24 	bl	8008c1c <_Bfree>
 8007fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	1e2b      	subs	r3, r5, #0
 8007fde:	bfb9      	ittee	lt
 8007fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007fe4:	9303      	strlt	r3, [sp, #12]
 8007fe6:	2300      	movge	r3, #0
 8007fe8:	6033      	strge	r3, [r6, #0]
 8007fea:	9f03      	ldr	r7, [sp, #12]
 8007fec:	4b98      	ldr	r3, [pc, #608]	@ (8008250 <_dtoa_r+0x2d0>)
 8007fee:	bfbc      	itt	lt
 8007ff0:	2201      	movlt	r2, #1
 8007ff2:	6032      	strlt	r2, [r6, #0]
 8007ff4:	43bb      	bics	r3, r7
 8007ff6:	d112      	bne.n	800801e <_dtoa_r+0x9e>
 8007ff8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ffa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008004:	4323      	orrs	r3, r4
 8008006:	f000 854d 	beq.w	8008aa4 <_dtoa_r+0xb24>
 800800a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800800c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008264 <_dtoa_r+0x2e4>
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 854f 	beq.w	8008ab4 <_dtoa_r+0xb34>
 8008016:	f10a 0303 	add.w	r3, sl, #3
 800801a:	f000 bd49 	b.w	8008ab0 <_dtoa_r+0xb30>
 800801e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008022:	2200      	movs	r2, #0
 8008024:	ec51 0b17 	vmov	r0, r1, d7
 8008028:	2300      	movs	r3, #0
 800802a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800802e:	f7f8 fd6b 	bl	8000b08 <__aeabi_dcmpeq>
 8008032:	4680      	mov	r8, r0
 8008034:	b158      	cbz	r0, 800804e <_dtoa_r+0xce>
 8008036:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008038:	2301      	movs	r3, #1
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800803e:	b113      	cbz	r3, 8008046 <_dtoa_r+0xc6>
 8008040:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008042:	4b84      	ldr	r3, [pc, #528]	@ (8008254 <_dtoa_r+0x2d4>)
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008268 <_dtoa_r+0x2e8>
 800804a:	f000 bd33 	b.w	8008ab4 <_dtoa_r+0xb34>
 800804e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008052:	aa16      	add	r2, sp, #88	@ 0x58
 8008054:	a917      	add	r1, sp, #92	@ 0x5c
 8008056:	4658      	mov	r0, fp
 8008058:	f001 f984 	bl	8009364 <__d2b>
 800805c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008060:	4681      	mov	r9, r0
 8008062:	2e00      	cmp	r6, #0
 8008064:	d077      	beq.n	8008156 <_dtoa_r+0x1d6>
 8008066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008068:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800806c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800807c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008080:	4619      	mov	r1, r3
 8008082:	2200      	movs	r2, #0
 8008084:	4b74      	ldr	r3, [pc, #464]	@ (8008258 <_dtoa_r+0x2d8>)
 8008086:	f7f8 f91f 	bl	80002c8 <__aeabi_dsub>
 800808a:	a369      	add	r3, pc, #420	@ (adr r3, 8008230 <_dtoa_r+0x2b0>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 fad2 	bl	8000638 <__aeabi_dmul>
 8008094:	a368      	add	r3, pc, #416	@ (adr r3, 8008238 <_dtoa_r+0x2b8>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 f917 	bl	80002cc <__adddf3>
 800809e:	4604      	mov	r4, r0
 80080a0:	4630      	mov	r0, r6
 80080a2:	460d      	mov	r5, r1
 80080a4:	f7f8 fa5e 	bl	8000564 <__aeabi_i2d>
 80080a8:	a365      	add	r3, pc, #404	@ (adr r3, 8008240 <_dtoa_r+0x2c0>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 fac3 	bl	8000638 <__aeabi_dmul>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 f907 	bl	80002cc <__adddf3>
 80080be:	4604      	mov	r4, r0
 80080c0:	460d      	mov	r5, r1
 80080c2:	f7f8 fd69 	bl	8000b98 <__aeabi_d2iz>
 80080c6:	2200      	movs	r2, #0
 80080c8:	4607      	mov	r7, r0
 80080ca:	2300      	movs	r3, #0
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80080d4:	b140      	cbz	r0, 80080e8 <_dtoa_r+0x168>
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7f8 fa44 	bl	8000564 <__aeabi_i2d>
 80080dc:	4622      	mov	r2, r4
 80080de:	462b      	mov	r3, r5
 80080e0:	f7f8 fd12 	bl	8000b08 <__aeabi_dcmpeq>
 80080e4:	b900      	cbnz	r0, 80080e8 <_dtoa_r+0x168>
 80080e6:	3f01      	subs	r7, #1
 80080e8:	2f16      	cmp	r7, #22
 80080ea:	d851      	bhi.n	8008190 <_dtoa_r+0x210>
 80080ec:	4b5b      	ldr	r3, [pc, #364]	@ (800825c <_dtoa_r+0x2dc>)
 80080ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080fa:	f7f8 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d048      	beq.n	8008194 <_dtoa_r+0x214>
 8008102:	3f01      	subs	r7, #1
 8008104:	2300      	movs	r3, #0
 8008106:	9312      	str	r3, [sp, #72]	@ 0x48
 8008108:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800810a:	1b9b      	subs	r3, r3, r6
 800810c:	1e5a      	subs	r2, r3, #1
 800810e:	bf44      	itt	mi
 8008110:	f1c3 0801 	rsbmi	r8, r3, #1
 8008114:	2300      	movmi	r3, #0
 8008116:	9208      	str	r2, [sp, #32]
 8008118:	bf54      	ite	pl
 800811a:	f04f 0800 	movpl.w	r8, #0
 800811e:	9308      	strmi	r3, [sp, #32]
 8008120:	2f00      	cmp	r7, #0
 8008122:	db39      	blt.n	8008198 <_dtoa_r+0x218>
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008128:	443b      	add	r3, r7
 800812a:	9308      	str	r3, [sp, #32]
 800812c:	2300      	movs	r3, #0
 800812e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	2b09      	cmp	r3, #9
 8008134:	d864      	bhi.n	8008200 <_dtoa_r+0x280>
 8008136:	2b05      	cmp	r3, #5
 8008138:	bfc4      	itt	gt
 800813a:	3b04      	subgt	r3, #4
 800813c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800813e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008140:	f1a3 0302 	sub.w	r3, r3, #2
 8008144:	bfcc      	ite	gt
 8008146:	2400      	movgt	r4, #0
 8008148:	2401      	movle	r4, #1
 800814a:	2b03      	cmp	r3, #3
 800814c:	d863      	bhi.n	8008216 <_dtoa_r+0x296>
 800814e:	e8df f003 	tbb	[pc, r3]
 8008152:	372a      	.short	0x372a
 8008154:	5535      	.short	0x5535
 8008156:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800815a:	441e      	add	r6, r3
 800815c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008160:	2b20      	cmp	r3, #32
 8008162:	bfc1      	itttt	gt
 8008164:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008168:	409f      	lslgt	r7, r3
 800816a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800816e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008172:	bfd6      	itet	le
 8008174:	f1c3 0320 	rsble	r3, r3, #32
 8008178:	ea47 0003 	orrgt.w	r0, r7, r3
 800817c:	fa04 f003 	lslle.w	r0, r4, r3
 8008180:	f7f8 f9e0 	bl	8000544 <__aeabi_ui2d>
 8008184:	2201      	movs	r2, #1
 8008186:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800818a:	3e01      	subs	r6, #1
 800818c:	9214      	str	r2, [sp, #80]	@ 0x50
 800818e:	e777      	b.n	8008080 <_dtoa_r+0x100>
 8008190:	2301      	movs	r3, #1
 8008192:	e7b8      	b.n	8008106 <_dtoa_r+0x186>
 8008194:	9012      	str	r0, [sp, #72]	@ 0x48
 8008196:	e7b7      	b.n	8008108 <_dtoa_r+0x188>
 8008198:	427b      	negs	r3, r7
 800819a:	930a      	str	r3, [sp, #40]	@ 0x28
 800819c:	2300      	movs	r3, #0
 800819e:	eba8 0807 	sub.w	r8, r8, r7
 80081a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081a4:	e7c4      	b.n	8008130 <_dtoa_r+0x1b0>
 80081a6:	2300      	movs	r3, #0
 80081a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc35      	bgt.n	800821c <_dtoa_r+0x29c>
 80081b0:	2301      	movs	r3, #1
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	9307      	str	r3, [sp, #28]
 80081b6:	461a      	mov	r2, r3
 80081b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80081ba:	e00b      	b.n	80081d4 <_dtoa_r+0x254>
 80081bc:	2301      	movs	r3, #1
 80081be:	e7f3      	b.n	80081a8 <_dtoa_r+0x228>
 80081c0:	2300      	movs	r3, #0
 80081c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	bfb8      	it	lt
 80081d2:	2301      	movlt	r3, #1
 80081d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80081d8:	2100      	movs	r1, #0
 80081da:	2204      	movs	r2, #4
 80081dc:	f102 0514 	add.w	r5, r2, #20
 80081e0:	429d      	cmp	r5, r3
 80081e2:	d91f      	bls.n	8008224 <_dtoa_r+0x2a4>
 80081e4:	6041      	str	r1, [r0, #4]
 80081e6:	4658      	mov	r0, fp
 80081e8:	f000 fcd8 	bl	8008b9c <_Balloc>
 80081ec:	4682      	mov	sl, r0
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d13c      	bne.n	800826c <_dtoa_r+0x2ec>
 80081f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008260 <_dtoa_r+0x2e0>)
 80081f4:	4602      	mov	r2, r0
 80081f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80081fa:	e6d8      	b.n	8007fae <_dtoa_r+0x2e>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e7e0      	b.n	80081c2 <_dtoa_r+0x242>
 8008200:	2401      	movs	r4, #1
 8008202:	2300      	movs	r3, #0
 8008204:	9309      	str	r3, [sp, #36]	@ 0x24
 8008206:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008208:	f04f 33ff 	mov.w	r3, #4294967295
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	2200      	movs	r2, #0
 8008212:	2312      	movs	r3, #18
 8008214:	e7d0      	b.n	80081b8 <_dtoa_r+0x238>
 8008216:	2301      	movs	r3, #1
 8008218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800821a:	e7f5      	b.n	8008208 <_dtoa_r+0x288>
 800821c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	e7d7      	b.n	80081d4 <_dtoa_r+0x254>
 8008224:	3101      	adds	r1, #1
 8008226:	0052      	lsls	r2, r2, #1
 8008228:	e7d8      	b.n	80081dc <_dtoa_r+0x25c>
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w
 8008230:	636f4361 	.word	0x636f4361
 8008234:	3fd287a7 	.word	0x3fd287a7
 8008238:	8b60c8b3 	.word	0x8b60c8b3
 800823c:	3fc68a28 	.word	0x3fc68a28
 8008240:	509f79fb 	.word	0x509f79fb
 8008244:	3fd34413 	.word	0x3fd34413
 8008248:	0800bb0c 	.word	0x0800bb0c
 800824c:	0800bb23 	.word	0x0800bb23
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	0800be69 	.word	0x0800be69
 8008258:	3ff80000 	.word	0x3ff80000
 800825c:	0800bc20 	.word	0x0800bc20
 8008260:	0800bb7b 	.word	0x0800bb7b
 8008264:	0800bb08 	.word	0x0800bb08
 8008268:	0800be68 	.word	0x0800be68
 800826c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008270:	6018      	str	r0, [r3, #0]
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	2b0e      	cmp	r3, #14
 8008276:	f200 80a4 	bhi.w	80083c2 <_dtoa_r+0x442>
 800827a:	2c00      	cmp	r4, #0
 800827c:	f000 80a1 	beq.w	80083c2 <_dtoa_r+0x442>
 8008280:	2f00      	cmp	r7, #0
 8008282:	dd33      	ble.n	80082ec <_dtoa_r+0x36c>
 8008284:	4bad      	ldr	r3, [pc, #692]	@ (800853c <_dtoa_r+0x5bc>)
 8008286:	f007 020f 	and.w	r2, r7, #15
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	ed93 7b00 	vldr	d7, [r3]
 8008292:	05f8      	lsls	r0, r7, #23
 8008294:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008298:	ea4f 1427 	mov.w	r4, r7, asr #4
 800829c:	d516      	bpl.n	80082cc <_dtoa_r+0x34c>
 800829e:	4ba8      	ldr	r3, [pc, #672]	@ (8008540 <_dtoa_r+0x5c0>)
 80082a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082a8:	f7f8 faf0 	bl	800088c <__aeabi_ddiv>
 80082ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b0:	f004 040f 	and.w	r4, r4, #15
 80082b4:	2603      	movs	r6, #3
 80082b6:	4da2      	ldr	r5, [pc, #648]	@ (8008540 <_dtoa_r+0x5c0>)
 80082b8:	b954      	cbnz	r4, 80082d0 <_dtoa_r+0x350>
 80082ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c2:	f7f8 fae3 	bl	800088c <__aeabi_ddiv>
 80082c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ca:	e028      	b.n	800831e <_dtoa_r+0x39e>
 80082cc:	2602      	movs	r6, #2
 80082ce:	e7f2      	b.n	80082b6 <_dtoa_r+0x336>
 80082d0:	07e1      	lsls	r1, r4, #31
 80082d2:	d508      	bpl.n	80082e6 <_dtoa_r+0x366>
 80082d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082dc:	f7f8 f9ac 	bl	8000638 <__aeabi_dmul>
 80082e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082e4:	3601      	adds	r6, #1
 80082e6:	1064      	asrs	r4, r4, #1
 80082e8:	3508      	adds	r5, #8
 80082ea:	e7e5      	b.n	80082b8 <_dtoa_r+0x338>
 80082ec:	f000 80d2 	beq.w	8008494 <_dtoa_r+0x514>
 80082f0:	427c      	negs	r4, r7
 80082f2:	4b92      	ldr	r3, [pc, #584]	@ (800853c <_dtoa_r+0x5bc>)
 80082f4:	4d92      	ldr	r5, [pc, #584]	@ (8008540 <_dtoa_r+0x5c0>)
 80082f6:	f004 020f 	and.w	r2, r4, #15
 80082fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008306:	f7f8 f997 	bl	8000638 <__aeabi_dmul>
 800830a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800830e:	1124      	asrs	r4, r4, #4
 8008310:	2300      	movs	r3, #0
 8008312:	2602      	movs	r6, #2
 8008314:	2c00      	cmp	r4, #0
 8008316:	f040 80b2 	bne.w	800847e <_dtoa_r+0x4fe>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1d3      	bne.n	80082c6 <_dtoa_r+0x346>
 800831e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008320:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80b7 	beq.w	8008498 <_dtoa_r+0x518>
 800832a:	4b86      	ldr	r3, [pc, #536]	@ (8008544 <_dtoa_r+0x5c4>)
 800832c:	2200      	movs	r2, #0
 800832e:	4620      	mov	r0, r4
 8008330:	4629      	mov	r1, r5
 8008332:	f7f8 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f000 80ae 	beq.w	8008498 <_dtoa_r+0x518>
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80aa 	beq.w	8008498 <_dtoa_r+0x518>
 8008344:	9b00      	ldr	r3, [sp, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dd37      	ble.n	80083ba <_dtoa_r+0x43a>
 800834a:	1e7b      	subs	r3, r7, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	4620      	mov	r0, r4
 8008350:	4b7d      	ldr	r3, [pc, #500]	@ (8008548 <_dtoa_r+0x5c8>)
 8008352:	2200      	movs	r2, #0
 8008354:	4629      	mov	r1, r5
 8008356:	f7f8 f96f 	bl	8000638 <__aeabi_dmul>
 800835a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800835e:	9c00      	ldr	r4, [sp, #0]
 8008360:	3601      	adds	r6, #1
 8008362:	4630      	mov	r0, r6
 8008364:	f7f8 f8fe 	bl	8000564 <__aeabi_i2d>
 8008368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836c:	f7f8 f964 	bl	8000638 <__aeabi_dmul>
 8008370:	4b76      	ldr	r3, [pc, #472]	@ (800854c <_dtoa_r+0x5cc>)
 8008372:	2200      	movs	r2, #0
 8008374:	f7f7 ffaa 	bl	80002cc <__adddf3>
 8008378:	4605      	mov	r5, r0
 800837a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800837e:	2c00      	cmp	r4, #0
 8008380:	f040 808d 	bne.w	800849e <_dtoa_r+0x51e>
 8008384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008388:	4b71      	ldr	r3, [pc, #452]	@ (8008550 <_dtoa_r+0x5d0>)
 800838a:	2200      	movs	r2, #0
 800838c:	f7f7 ff9c 	bl	80002c8 <__aeabi_dsub>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008398:	462a      	mov	r2, r5
 800839a:	4633      	mov	r3, r6
 800839c:	f7f8 fbdc 	bl	8000b58 <__aeabi_dcmpgt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f040 828b 	bne.w	80088bc <_dtoa_r+0x93c>
 80083a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083aa:	462a      	mov	r2, r5
 80083ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083b0:	f7f8 fbb4 	bl	8000b1c <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f040 8128 	bne.w	800860a <_dtoa_r+0x68a>
 80083ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80083be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80083c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f2c0 815a 	blt.w	800867e <_dtoa_r+0x6fe>
 80083ca:	2f0e      	cmp	r7, #14
 80083cc:	f300 8157 	bgt.w	800867e <_dtoa_r+0x6fe>
 80083d0:	4b5a      	ldr	r3, [pc, #360]	@ (800853c <_dtoa_r+0x5bc>)
 80083d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083d6:	ed93 7b00 	vldr	d7, [r3]
 80083da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083dc:	2b00      	cmp	r3, #0
 80083de:	ed8d 7b00 	vstr	d7, [sp]
 80083e2:	da03      	bge.n	80083ec <_dtoa_r+0x46c>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f340 8101 	ble.w	80085ee <_dtoa_r+0x66e>
 80083ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083f0:	4656      	mov	r6, sl
 80083f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 fa47 	bl	800088c <__aeabi_ddiv>
 80083fe:	f7f8 fbcb 	bl	8000b98 <__aeabi_d2iz>
 8008402:	4680      	mov	r8, r0
 8008404:	f7f8 f8ae 	bl	8000564 <__aeabi_i2d>
 8008408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800840c:	f7f8 f914 	bl	8000638 <__aeabi_dmul>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800841c:	f7f7 ff54 	bl	80002c8 <__aeabi_dsub>
 8008420:	f806 4b01 	strb.w	r4, [r6], #1
 8008424:	9d07      	ldr	r5, [sp, #28]
 8008426:	eba6 040a 	sub.w	r4, r6, sl
 800842a:	42a5      	cmp	r5, r4
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	f040 8117 	bne.w	8008662 <_dtoa_r+0x6e2>
 8008434:	f7f7 ff4a 	bl	80002cc <__adddf3>
 8008438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800843c:	4604      	mov	r4, r0
 800843e:	460d      	mov	r5, r1
 8008440:	f7f8 fb8a 	bl	8000b58 <__aeabi_dcmpgt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 80f9 	bne.w	800863c <_dtoa_r+0x6bc>
 800844a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800844e:	4620      	mov	r0, r4
 8008450:	4629      	mov	r1, r5
 8008452:	f7f8 fb59 	bl	8000b08 <__aeabi_dcmpeq>
 8008456:	b118      	cbz	r0, 8008460 <_dtoa_r+0x4e0>
 8008458:	f018 0f01 	tst.w	r8, #1
 800845c:	f040 80ee 	bne.w	800863c <_dtoa_r+0x6bc>
 8008460:	4649      	mov	r1, r9
 8008462:	4658      	mov	r0, fp
 8008464:	f000 fbda 	bl	8008c1c <_Bfree>
 8008468:	2300      	movs	r3, #0
 800846a:	7033      	strb	r3, [r6, #0]
 800846c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800846e:	3701      	adds	r7, #1
 8008470:	601f      	str	r7, [r3, #0]
 8008472:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 831d 	beq.w	8008ab4 <_dtoa_r+0xb34>
 800847a:	601e      	str	r6, [r3, #0]
 800847c:	e31a      	b.n	8008ab4 <_dtoa_r+0xb34>
 800847e:	07e2      	lsls	r2, r4, #31
 8008480:	d505      	bpl.n	800848e <_dtoa_r+0x50e>
 8008482:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008486:	f7f8 f8d7 	bl	8000638 <__aeabi_dmul>
 800848a:	3601      	adds	r6, #1
 800848c:	2301      	movs	r3, #1
 800848e:	1064      	asrs	r4, r4, #1
 8008490:	3508      	adds	r5, #8
 8008492:	e73f      	b.n	8008314 <_dtoa_r+0x394>
 8008494:	2602      	movs	r6, #2
 8008496:	e742      	b.n	800831e <_dtoa_r+0x39e>
 8008498:	9c07      	ldr	r4, [sp, #28]
 800849a:	9704      	str	r7, [sp, #16]
 800849c:	e761      	b.n	8008362 <_dtoa_r+0x3e2>
 800849e:	4b27      	ldr	r3, [pc, #156]	@ (800853c <_dtoa_r+0x5bc>)
 80084a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084aa:	4454      	add	r4, sl
 80084ac:	2900      	cmp	r1, #0
 80084ae:	d053      	beq.n	8008558 <_dtoa_r+0x5d8>
 80084b0:	4928      	ldr	r1, [pc, #160]	@ (8008554 <_dtoa_r+0x5d4>)
 80084b2:	2000      	movs	r0, #0
 80084b4:	f7f8 f9ea 	bl	800088c <__aeabi_ddiv>
 80084b8:	4633      	mov	r3, r6
 80084ba:	462a      	mov	r2, r5
 80084bc:	f7f7 ff04 	bl	80002c8 <__aeabi_dsub>
 80084c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084c4:	4656      	mov	r6, sl
 80084c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ca:	f7f8 fb65 	bl	8000b98 <__aeabi_d2iz>
 80084ce:	4605      	mov	r5, r0
 80084d0:	f7f8 f848 	bl	8000564 <__aeabi_i2d>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084dc:	f7f7 fef4 	bl	80002c8 <__aeabi_dsub>
 80084e0:	3530      	adds	r5, #48	@ 0x30
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084ea:	f806 5b01 	strb.w	r5, [r6], #1
 80084ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084f2:	f7f8 fb13 	bl	8000b1c <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d171      	bne.n	80085de <_dtoa_r+0x65e>
 80084fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084fe:	4911      	ldr	r1, [pc, #68]	@ (8008544 <_dtoa_r+0x5c4>)
 8008500:	2000      	movs	r0, #0
 8008502:	f7f7 fee1 	bl	80002c8 <__aeabi_dsub>
 8008506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800850a:	f7f8 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8095 	bne.w	800863e <_dtoa_r+0x6be>
 8008514:	42a6      	cmp	r6, r4
 8008516:	f43f af50 	beq.w	80083ba <_dtoa_r+0x43a>
 800851a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800851e:	4b0a      	ldr	r3, [pc, #40]	@ (8008548 <_dtoa_r+0x5c8>)
 8008520:	2200      	movs	r2, #0
 8008522:	f7f8 f889 	bl	8000638 <__aeabi_dmul>
 8008526:	4b08      	ldr	r3, [pc, #32]	@ (8008548 <_dtoa_r+0x5c8>)
 8008528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800852c:	2200      	movs	r2, #0
 800852e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008532:	f7f8 f881 	bl	8000638 <__aeabi_dmul>
 8008536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800853a:	e7c4      	b.n	80084c6 <_dtoa_r+0x546>
 800853c:	0800bc20 	.word	0x0800bc20
 8008540:	0800bbf8 	.word	0x0800bbf8
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	40240000 	.word	0x40240000
 800854c:	401c0000 	.word	0x401c0000
 8008550:	40140000 	.word	0x40140000
 8008554:	3fe00000 	.word	0x3fe00000
 8008558:	4631      	mov	r1, r6
 800855a:	4628      	mov	r0, r5
 800855c:	f7f8 f86c 	bl	8000638 <__aeabi_dmul>
 8008560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008564:	9415      	str	r4, [sp, #84]	@ 0x54
 8008566:	4656      	mov	r6, sl
 8008568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800856c:	f7f8 fb14 	bl	8000b98 <__aeabi_d2iz>
 8008570:	4605      	mov	r5, r0
 8008572:	f7f7 fff7 	bl	8000564 <__aeabi_i2d>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800857e:	f7f7 fea3 	bl	80002c8 <__aeabi_dsub>
 8008582:	3530      	adds	r5, #48	@ 0x30
 8008584:	f806 5b01 	strb.w	r5, [r6], #1
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	42a6      	cmp	r6, r4
 800858e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008592:	f04f 0200 	mov.w	r2, #0
 8008596:	d124      	bne.n	80085e2 <_dtoa_r+0x662>
 8008598:	4bac      	ldr	r3, [pc, #688]	@ (800884c <_dtoa_r+0x8cc>)
 800859a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800859e:	f7f7 fe95 	bl	80002cc <__adddf3>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085aa:	f7f8 fad5 	bl	8000b58 <__aeabi_dcmpgt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d145      	bne.n	800863e <_dtoa_r+0x6be>
 80085b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085b6:	49a5      	ldr	r1, [pc, #660]	@ (800884c <_dtoa_r+0x8cc>)
 80085b8:	2000      	movs	r0, #0
 80085ba:	f7f7 fe85 	bl	80002c8 <__aeabi_dsub>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c6:	f7f8 faa9 	bl	8000b1c <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f43f aef5 	beq.w	80083ba <_dtoa_r+0x43a>
 80085d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80085d2:	1e73      	subs	r3, r6, #1
 80085d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80085d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085da:	2b30      	cmp	r3, #48	@ 0x30
 80085dc:	d0f8      	beq.n	80085d0 <_dtoa_r+0x650>
 80085de:	9f04      	ldr	r7, [sp, #16]
 80085e0:	e73e      	b.n	8008460 <_dtoa_r+0x4e0>
 80085e2:	4b9b      	ldr	r3, [pc, #620]	@ (8008850 <_dtoa_r+0x8d0>)
 80085e4:	f7f8 f828 	bl	8000638 <__aeabi_dmul>
 80085e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ec:	e7bc      	b.n	8008568 <_dtoa_r+0x5e8>
 80085ee:	d10c      	bne.n	800860a <_dtoa_r+0x68a>
 80085f0:	4b98      	ldr	r3, [pc, #608]	@ (8008854 <_dtoa_r+0x8d4>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f8:	f7f8 f81e 	bl	8000638 <__aeabi_dmul>
 80085fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008600:	f7f8 faa0 	bl	8000b44 <__aeabi_dcmpge>
 8008604:	2800      	cmp	r0, #0
 8008606:	f000 8157 	beq.w	80088b8 <_dtoa_r+0x938>
 800860a:	2400      	movs	r4, #0
 800860c:	4625      	mov	r5, r4
 800860e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008610:	43db      	mvns	r3, r3
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	4656      	mov	r6, sl
 8008616:	2700      	movs	r7, #0
 8008618:	4621      	mov	r1, r4
 800861a:	4658      	mov	r0, fp
 800861c:	f000 fafe 	bl	8008c1c <_Bfree>
 8008620:	2d00      	cmp	r5, #0
 8008622:	d0dc      	beq.n	80085de <_dtoa_r+0x65e>
 8008624:	b12f      	cbz	r7, 8008632 <_dtoa_r+0x6b2>
 8008626:	42af      	cmp	r7, r5
 8008628:	d003      	beq.n	8008632 <_dtoa_r+0x6b2>
 800862a:	4639      	mov	r1, r7
 800862c:	4658      	mov	r0, fp
 800862e:	f000 faf5 	bl	8008c1c <_Bfree>
 8008632:	4629      	mov	r1, r5
 8008634:	4658      	mov	r0, fp
 8008636:	f000 faf1 	bl	8008c1c <_Bfree>
 800863a:	e7d0      	b.n	80085de <_dtoa_r+0x65e>
 800863c:	9704      	str	r7, [sp, #16]
 800863e:	4633      	mov	r3, r6
 8008640:	461e      	mov	r6, r3
 8008642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008646:	2a39      	cmp	r2, #57	@ 0x39
 8008648:	d107      	bne.n	800865a <_dtoa_r+0x6da>
 800864a:	459a      	cmp	sl, r3
 800864c:	d1f8      	bne.n	8008640 <_dtoa_r+0x6c0>
 800864e:	9a04      	ldr	r2, [sp, #16]
 8008650:	3201      	adds	r2, #1
 8008652:	9204      	str	r2, [sp, #16]
 8008654:	2230      	movs	r2, #48	@ 0x30
 8008656:	f88a 2000 	strb.w	r2, [sl]
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	3201      	adds	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e7bd      	b.n	80085de <_dtoa_r+0x65e>
 8008662:	4b7b      	ldr	r3, [pc, #492]	@ (8008850 <_dtoa_r+0x8d0>)
 8008664:	2200      	movs	r2, #0
 8008666:	f7f7 ffe7 	bl	8000638 <__aeabi_dmul>
 800866a:	2200      	movs	r2, #0
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	460d      	mov	r5, r1
 8008672:	f7f8 fa49 	bl	8000b08 <__aeabi_dcmpeq>
 8008676:	2800      	cmp	r0, #0
 8008678:	f43f aebb 	beq.w	80083f2 <_dtoa_r+0x472>
 800867c:	e6f0      	b.n	8008460 <_dtoa_r+0x4e0>
 800867e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008680:	2a00      	cmp	r2, #0
 8008682:	f000 80db 	beq.w	800883c <_dtoa_r+0x8bc>
 8008686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008688:	2a01      	cmp	r2, #1
 800868a:	f300 80bf 	bgt.w	800880c <_dtoa_r+0x88c>
 800868e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008690:	2a00      	cmp	r2, #0
 8008692:	f000 80b7 	beq.w	8008804 <_dtoa_r+0x884>
 8008696:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800869a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800869c:	4646      	mov	r6, r8
 800869e:	9a08      	ldr	r2, [sp, #32]
 80086a0:	2101      	movs	r1, #1
 80086a2:	441a      	add	r2, r3
 80086a4:	4658      	mov	r0, fp
 80086a6:	4498      	add	r8, r3
 80086a8:	9208      	str	r2, [sp, #32]
 80086aa:	f000 fbb5 	bl	8008e18 <__i2b>
 80086ae:	4605      	mov	r5, r0
 80086b0:	b15e      	cbz	r6, 80086ca <_dtoa_r+0x74a>
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dd08      	ble.n	80086ca <_dtoa_r+0x74a>
 80086b8:	42b3      	cmp	r3, r6
 80086ba:	9a08      	ldr	r2, [sp, #32]
 80086bc:	bfa8      	it	ge
 80086be:	4633      	movge	r3, r6
 80086c0:	eba8 0803 	sub.w	r8, r8, r3
 80086c4:	1af6      	subs	r6, r6, r3
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	9308      	str	r3, [sp, #32]
 80086ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086cc:	b1f3      	cbz	r3, 800870c <_dtoa_r+0x78c>
 80086ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 80b7 	beq.w	8008844 <_dtoa_r+0x8c4>
 80086d6:	b18c      	cbz	r4, 80086fc <_dtoa_r+0x77c>
 80086d8:	4629      	mov	r1, r5
 80086da:	4622      	mov	r2, r4
 80086dc:	4658      	mov	r0, fp
 80086de:	f000 fc5b 	bl	8008f98 <__pow5mult>
 80086e2:	464a      	mov	r2, r9
 80086e4:	4601      	mov	r1, r0
 80086e6:	4605      	mov	r5, r0
 80086e8:	4658      	mov	r0, fp
 80086ea:	f000 fbab 	bl	8008e44 <__multiply>
 80086ee:	4649      	mov	r1, r9
 80086f0:	9004      	str	r0, [sp, #16]
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 fa92 	bl	8008c1c <_Bfree>
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	4699      	mov	r9, r3
 80086fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fe:	1b1a      	subs	r2, r3, r4
 8008700:	d004      	beq.n	800870c <_dtoa_r+0x78c>
 8008702:	4649      	mov	r1, r9
 8008704:	4658      	mov	r0, fp
 8008706:	f000 fc47 	bl	8008f98 <__pow5mult>
 800870a:	4681      	mov	r9, r0
 800870c:	2101      	movs	r1, #1
 800870e:	4658      	mov	r0, fp
 8008710:	f000 fb82 	bl	8008e18 <__i2b>
 8008714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008716:	4604      	mov	r4, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 81cf 	beq.w	8008abc <_dtoa_r+0xb3c>
 800871e:	461a      	mov	r2, r3
 8008720:	4601      	mov	r1, r0
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fc38 	bl	8008f98 <__pow5mult>
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	2b01      	cmp	r3, #1
 800872c:	4604      	mov	r4, r0
 800872e:	f300 8095 	bgt.w	800885c <_dtoa_r+0x8dc>
 8008732:	9b02      	ldr	r3, [sp, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f040 8087 	bne.w	8008848 <_dtoa_r+0x8c8>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8089 	bne.w	8008858 <_dtoa_r+0x8d8>
 8008746:	9b03      	ldr	r3, [sp, #12]
 8008748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800874c:	0d1b      	lsrs	r3, r3, #20
 800874e:	051b      	lsls	r3, r3, #20
 8008750:	b12b      	cbz	r3, 800875e <_dtoa_r+0x7de>
 8008752:	9b08      	ldr	r3, [sp, #32]
 8008754:	3301      	adds	r3, #1
 8008756:	9308      	str	r3, [sp, #32]
 8008758:	f108 0801 	add.w	r8, r8, #1
 800875c:	2301      	movs	r3, #1
 800875e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 81b0 	beq.w	8008ac8 <_dtoa_r+0xb48>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800876e:	6918      	ldr	r0, [r3, #16]
 8008770:	f000 fb06 	bl	8008d80 <__hi0bits>
 8008774:	f1c0 0020 	rsb	r0, r0, #32
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	4418      	add	r0, r3
 800877c:	f010 001f 	ands.w	r0, r0, #31
 8008780:	d077      	beq.n	8008872 <_dtoa_r+0x8f2>
 8008782:	f1c0 0320 	rsb	r3, r0, #32
 8008786:	2b04      	cmp	r3, #4
 8008788:	dd6b      	ble.n	8008862 <_dtoa_r+0x8e2>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	f1c0 001c 	rsb	r0, r0, #28
 8008790:	4403      	add	r3, r0
 8008792:	4480      	add	r8, r0
 8008794:	4406      	add	r6, r0
 8008796:	9308      	str	r3, [sp, #32]
 8008798:	f1b8 0f00 	cmp.w	r8, #0
 800879c:	dd05      	ble.n	80087aa <_dtoa_r+0x82a>
 800879e:	4649      	mov	r1, r9
 80087a0:	4642      	mov	r2, r8
 80087a2:	4658      	mov	r0, fp
 80087a4:	f000 fc52 	bl	800904c <__lshift>
 80087a8:	4681      	mov	r9, r0
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd05      	ble.n	80087bc <_dtoa_r+0x83c>
 80087b0:	4621      	mov	r1, r4
 80087b2:	461a      	mov	r2, r3
 80087b4:	4658      	mov	r0, fp
 80087b6:	f000 fc49 	bl	800904c <__lshift>
 80087ba:	4604      	mov	r4, r0
 80087bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d059      	beq.n	8008876 <_dtoa_r+0x8f6>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4648      	mov	r0, r9
 80087c6:	f000 fcad 	bl	8009124 <__mcmp>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	da53      	bge.n	8008876 <_dtoa_r+0x8f6>
 80087ce:	1e7b      	subs	r3, r7, #1
 80087d0:	9304      	str	r3, [sp, #16]
 80087d2:	4649      	mov	r1, r9
 80087d4:	2300      	movs	r3, #0
 80087d6:	220a      	movs	r2, #10
 80087d8:	4658      	mov	r0, fp
 80087da:	f000 fa41 	bl	8008c60 <__multadd>
 80087de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087e0:	4681      	mov	r9, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 8172 	beq.w	8008acc <_dtoa_r+0xb4c>
 80087e8:	2300      	movs	r3, #0
 80087ea:	4629      	mov	r1, r5
 80087ec:	220a      	movs	r2, #10
 80087ee:	4658      	mov	r0, fp
 80087f0:	f000 fa36 	bl	8008c60 <__multadd>
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	4605      	mov	r5, r0
 80087fa:	dc67      	bgt.n	80088cc <_dtoa_r+0x94c>
 80087fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fe:	2b02      	cmp	r3, #2
 8008800:	dc41      	bgt.n	8008886 <_dtoa_r+0x906>
 8008802:	e063      	b.n	80088cc <_dtoa_r+0x94c>
 8008804:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800880a:	e746      	b.n	800869a <_dtoa_r+0x71a>
 800880c:	9b07      	ldr	r3, [sp, #28]
 800880e:	1e5c      	subs	r4, r3, #1
 8008810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008812:	42a3      	cmp	r3, r4
 8008814:	bfbf      	itttt	lt
 8008816:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008818:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800881a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800881c:	1ae3      	sublt	r3, r4, r3
 800881e:	bfb4      	ite	lt
 8008820:	18d2      	addlt	r2, r2, r3
 8008822:	1b1c      	subge	r4, r3, r4
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	bfbc      	itt	lt
 8008828:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800882a:	2400      	movlt	r4, #0
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfb5      	itete	lt
 8008830:	eba8 0603 	sublt.w	r6, r8, r3
 8008834:	9b07      	ldrge	r3, [sp, #28]
 8008836:	2300      	movlt	r3, #0
 8008838:	4646      	movge	r6, r8
 800883a:	e730      	b.n	800869e <_dtoa_r+0x71e>
 800883c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800883e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008840:	4646      	mov	r6, r8
 8008842:	e735      	b.n	80086b0 <_dtoa_r+0x730>
 8008844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008846:	e75c      	b.n	8008702 <_dtoa_r+0x782>
 8008848:	2300      	movs	r3, #0
 800884a:	e788      	b.n	800875e <_dtoa_r+0x7de>
 800884c:	3fe00000 	.word	0x3fe00000
 8008850:	40240000 	.word	0x40240000
 8008854:	40140000 	.word	0x40140000
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	e780      	b.n	800875e <_dtoa_r+0x7de>
 800885c:	2300      	movs	r3, #0
 800885e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008860:	e782      	b.n	8008768 <_dtoa_r+0x7e8>
 8008862:	d099      	beq.n	8008798 <_dtoa_r+0x818>
 8008864:	9a08      	ldr	r2, [sp, #32]
 8008866:	331c      	adds	r3, #28
 8008868:	441a      	add	r2, r3
 800886a:	4498      	add	r8, r3
 800886c:	441e      	add	r6, r3
 800886e:	9208      	str	r2, [sp, #32]
 8008870:	e792      	b.n	8008798 <_dtoa_r+0x818>
 8008872:	4603      	mov	r3, r0
 8008874:	e7f6      	b.n	8008864 <_dtoa_r+0x8e4>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	9704      	str	r7, [sp, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dc20      	bgt.n	80088c0 <_dtoa_r+0x940>
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008882:	2b02      	cmp	r3, #2
 8008884:	dd1e      	ble.n	80088c4 <_dtoa_r+0x944>
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f47f aec0 	bne.w	800860e <_dtoa_r+0x68e>
 800888e:	4621      	mov	r1, r4
 8008890:	2205      	movs	r2, #5
 8008892:	4658      	mov	r0, fp
 8008894:	f000 f9e4 	bl	8008c60 <__multadd>
 8008898:	4601      	mov	r1, r0
 800889a:	4604      	mov	r4, r0
 800889c:	4648      	mov	r0, r9
 800889e:	f000 fc41 	bl	8009124 <__mcmp>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f77f aeb3 	ble.w	800860e <_dtoa_r+0x68e>
 80088a8:	4656      	mov	r6, sl
 80088aa:	2331      	movs	r3, #49	@ 0x31
 80088ac:	f806 3b01 	strb.w	r3, [r6], #1
 80088b0:	9b04      	ldr	r3, [sp, #16]
 80088b2:	3301      	adds	r3, #1
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	e6ae      	b.n	8008616 <_dtoa_r+0x696>
 80088b8:	9c07      	ldr	r4, [sp, #28]
 80088ba:	9704      	str	r7, [sp, #16]
 80088bc:	4625      	mov	r5, r4
 80088be:	e7f3      	b.n	80088a8 <_dtoa_r+0x928>
 80088c0:	9b07      	ldr	r3, [sp, #28]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8104 	beq.w	8008ad4 <_dtoa_r+0xb54>
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	dd05      	ble.n	80088dc <_dtoa_r+0x95c>
 80088d0:	4629      	mov	r1, r5
 80088d2:	4632      	mov	r2, r6
 80088d4:	4658      	mov	r0, fp
 80088d6:	f000 fbb9 	bl	800904c <__lshift>
 80088da:	4605      	mov	r5, r0
 80088dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d05a      	beq.n	8008998 <_dtoa_r+0xa18>
 80088e2:	6869      	ldr	r1, [r5, #4]
 80088e4:	4658      	mov	r0, fp
 80088e6:	f000 f959 	bl	8008b9c <_Balloc>
 80088ea:	4606      	mov	r6, r0
 80088ec:	b928      	cbnz	r0, 80088fa <_dtoa_r+0x97a>
 80088ee:	4b84      	ldr	r3, [pc, #528]	@ (8008b00 <_dtoa_r+0xb80>)
 80088f0:	4602      	mov	r2, r0
 80088f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088f6:	f7ff bb5a 	b.w	8007fae <_dtoa_r+0x2e>
 80088fa:	692a      	ldr	r2, [r5, #16]
 80088fc:	3202      	adds	r2, #2
 80088fe:	0092      	lsls	r2, r2, #2
 8008900:	f105 010c 	add.w	r1, r5, #12
 8008904:	300c      	adds	r0, #12
 8008906:	f002 fac3 	bl	800ae90 <memcpy>
 800890a:	2201      	movs	r2, #1
 800890c:	4631      	mov	r1, r6
 800890e:	4658      	mov	r0, fp
 8008910:	f000 fb9c 	bl	800904c <__lshift>
 8008914:	f10a 0301 	add.w	r3, sl, #1
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	9b00      	ldr	r3, [sp, #0]
 800891c:	4453      	add	r3, sl
 800891e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	462f      	mov	r7, r5
 8008928:	930a      	str	r3, [sp, #40]	@ 0x28
 800892a:	4605      	mov	r5, r0
 800892c:	9b07      	ldr	r3, [sp, #28]
 800892e:	4621      	mov	r1, r4
 8008930:	3b01      	subs	r3, #1
 8008932:	4648      	mov	r0, r9
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	f7ff fa99 	bl	8007e6c <quorem>
 800893a:	4639      	mov	r1, r7
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008942:	4648      	mov	r0, r9
 8008944:	f000 fbee 	bl	8009124 <__mcmp>
 8008948:	462a      	mov	r2, r5
 800894a:	9008      	str	r0, [sp, #32]
 800894c:	4621      	mov	r1, r4
 800894e:	4658      	mov	r0, fp
 8008950:	f000 fc04 	bl	800915c <__mdiff>
 8008954:	68c2      	ldr	r2, [r0, #12]
 8008956:	4606      	mov	r6, r0
 8008958:	bb02      	cbnz	r2, 800899c <_dtoa_r+0xa1c>
 800895a:	4601      	mov	r1, r0
 800895c:	4648      	mov	r0, r9
 800895e:	f000 fbe1 	bl	8009124 <__mcmp>
 8008962:	4602      	mov	r2, r0
 8008964:	4631      	mov	r1, r6
 8008966:	4658      	mov	r0, fp
 8008968:	920e      	str	r2, [sp, #56]	@ 0x38
 800896a:	f000 f957 	bl	8008c1c <_Bfree>
 800896e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008972:	9e07      	ldr	r6, [sp, #28]
 8008974:	ea43 0102 	orr.w	r1, r3, r2
 8008978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897a:	4319      	orrs	r1, r3
 800897c:	d110      	bne.n	80089a0 <_dtoa_r+0xa20>
 800897e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008982:	d029      	beq.n	80089d8 <_dtoa_r+0xa58>
 8008984:	9b08      	ldr	r3, [sp, #32]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dd02      	ble.n	8008990 <_dtoa_r+0xa10>
 800898a:	9b02      	ldr	r3, [sp, #8]
 800898c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008990:	9b00      	ldr	r3, [sp, #0]
 8008992:	f883 8000 	strb.w	r8, [r3]
 8008996:	e63f      	b.n	8008618 <_dtoa_r+0x698>
 8008998:	4628      	mov	r0, r5
 800899a:	e7bb      	b.n	8008914 <_dtoa_r+0x994>
 800899c:	2201      	movs	r2, #1
 800899e:	e7e1      	b.n	8008964 <_dtoa_r+0x9e4>
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	db04      	blt.n	80089b0 <_dtoa_r+0xa30>
 80089a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089a8:	430b      	orrs	r3, r1
 80089aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089ac:	430b      	orrs	r3, r1
 80089ae:	d120      	bne.n	80089f2 <_dtoa_r+0xa72>
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	dded      	ble.n	8008990 <_dtoa_r+0xa10>
 80089b4:	4649      	mov	r1, r9
 80089b6:	2201      	movs	r2, #1
 80089b8:	4658      	mov	r0, fp
 80089ba:	f000 fb47 	bl	800904c <__lshift>
 80089be:	4621      	mov	r1, r4
 80089c0:	4681      	mov	r9, r0
 80089c2:	f000 fbaf 	bl	8009124 <__mcmp>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	dc03      	bgt.n	80089d2 <_dtoa_r+0xa52>
 80089ca:	d1e1      	bne.n	8008990 <_dtoa_r+0xa10>
 80089cc:	f018 0f01 	tst.w	r8, #1
 80089d0:	d0de      	beq.n	8008990 <_dtoa_r+0xa10>
 80089d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089d6:	d1d8      	bne.n	800898a <_dtoa_r+0xa0a>
 80089d8:	9a00      	ldr	r2, [sp, #0]
 80089da:	2339      	movs	r3, #57	@ 0x39
 80089dc:	7013      	strb	r3, [r2, #0]
 80089de:	4633      	mov	r3, r6
 80089e0:	461e      	mov	r6, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089e8:	2a39      	cmp	r2, #57	@ 0x39
 80089ea:	d052      	beq.n	8008a92 <_dtoa_r+0xb12>
 80089ec:	3201      	adds	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
 80089f0:	e612      	b.n	8008618 <_dtoa_r+0x698>
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	dd07      	ble.n	8008a06 <_dtoa_r+0xa86>
 80089f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089fa:	d0ed      	beq.n	80089d8 <_dtoa_r+0xa58>
 80089fc:	9a00      	ldr	r2, [sp, #0]
 80089fe:	f108 0301 	add.w	r3, r8, #1
 8008a02:	7013      	strb	r3, [r2, #0]
 8008a04:	e608      	b.n	8008618 <_dtoa_r+0x698>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	9a07      	ldr	r2, [sp, #28]
 8008a0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d028      	beq.n	8008a66 <_dtoa_r+0xae6>
 8008a14:	4649      	mov	r1, r9
 8008a16:	2300      	movs	r3, #0
 8008a18:	220a      	movs	r2, #10
 8008a1a:	4658      	mov	r0, fp
 8008a1c:	f000 f920 	bl	8008c60 <__multadd>
 8008a20:	42af      	cmp	r7, r5
 8008a22:	4681      	mov	r9, r0
 8008a24:	f04f 0300 	mov.w	r3, #0
 8008a28:	f04f 020a 	mov.w	r2, #10
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4658      	mov	r0, fp
 8008a30:	d107      	bne.n	8008a42 <_dtoa_r+0xac2>
 8008a32:	f000 f915 	bl	8008c60 <__multadd>
 8008a36:	4607      	mov	r7, r0
 8008a38:	4605      	mov	r5, r0
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	9307      	str	r3, [sp, #28]
 8008a40:	e774      	b.n	800892c <_dtoa_r+0x9ac>
 8008a42:	f000 f90d 	bl	8008c60 <__multadd>
 8008a46:	4629      	mov	r1, r5
 8008a48:	4607      	mov	r7, r0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f000 f906 	bl	8008c60 <__multadd>
 8008a54:	4605      	mov	r5, r0
 8008a56:	e7f0      	b.n	8008a3a <_dtoa_r+0xaba>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfcc      	ite	gt
 8008a5e:	461e      	movgt	r6, r3
 8008a60:	2601      	movle	r6, #1
 8008a62:	4456      	add	r6, sl
 8008a64:	2700      	movs	r7, #0
 8008a66:	4649      	mov	r1, r9
 8008a68:	2201      	movs	r2, #1
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f000 faee 	bl	800904c <__lshift>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4681      	mov	r9, r0
 8008a74:	f000 fb56 	bl	8009124 <__mcmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	dcb0      	bgt.n	80089de <_dtoa_r+0xa5e>
 8008a7c:	d102      	bne.n	8008a84 <_dtoa_r+0xb04>
 8008a7e:	f018 0f01 	tst.w	r8, #1
 8008a82:	d1ac      	bne.n	80089de <_dtoa_r+0xa5e>
 8008a84:	4633      	mov	r3, r6
 8008a86:	461e      	mov	r6, r3
 8008a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a8c:	2a30      	cmp	r2, #48	@ 0x30
 8008a8e:	d0fa      	beq.n	8008a86 <_dtoa_r+0xb06>
 8008a90:	e5c2      	b.n	8008618 <_dtoa_r+0x698>
 8008a92:	459a      	cmp	sl, r3
 8008a94:	d1a4      	bne.n	80089e0 <_dtoa_r+0xa60>
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	2331      	movs	r3, #49	@ 0x31
 8008a9e:	f88a 3000 	strb.w	r3, [sl]
 8008aa2:	e5b9      	b.n	8008618 <_dtoa_r+0x698>
 8008aa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008aa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b04 <_dtoa_r+0xb84>
 8008aaa:	b11b      	cbz	r3, 8008ab4 <_dtoa_r+0xb34>
 8008aac:	f10a 0308 	add.w	r3, sl, #8
 8008ab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	4650      	mov	r0, sl
 8008ab6:	b019      	add	sp, #100	@ 0x64
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	f77f ae37 	ble.w	8008732 <_dtoa_r+0x7b2>
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ac8:	2001      	movs	r0, #1
 8008aca:	e655      	b.n	8008778 <_dtoa_r+0x7f8>
 8008acc:	9b00      	ldr	r3, [sp, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f77f aed6 	ble.w	8008880 <_dtoa_r+0x900>
 8008ad4:	4656      	mov	r6, sl
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f7ff f9c7 	bl	8007e6c <quorem>
 8008ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ae2:	f806 8b01 	strb.w	r8, [r6], #1
 8008ae6:	9b00      	ldr	r3, [sp, #0]
 8008ae8:	eba6 020a 	sub.w	r2, r6, sl
 8008aec:	4293      	cmp	r3, r2
 8008aee:	ddb3      	ble.n	8008a58 <_dtoa_r+0xad8>
 8008af0:	4649      	mov	r1, r9
 8008af2:	2300      	movs	r3, #0
 8008af4:	220a      	movs	r2, #10
 8008af6:	4658      	mov	r0, fp
 8008af8:	f000 f8b2 	bl	8008c60 <__multadd>
 8008afc:	4681      	mov	r9, r0
 8008afe:	e7ea      	b.n	8008ad6 <_dtoa_r+0xb56>
 8008b00:	0800bb7b 	.word	0x0800bb7b
 8008b04:	0800baff 	.word	0x0800baff

08008b08 <_free_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d041      	beq.n	8008b94 <_free_r+0x8c>
 8008b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b14:	1f0c      	subs	r4, r1, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfb8      	it	lt
 8008b1a:	18e4      	addlt	r4, r4, r3
 8008b1c:	f7fd ffa0 	bl	8006a60 <__malloc_lock>
 8008b20:	4a1d      	ldr	r2, [pc, #116]	@ (8008b98 <_free_r+0x90>)
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	b933      	cbnz	r3, 8008b34 <_free_r+0x2c>
 8008b26:	6063      	str	r3, [r4, #4]
 8008b28:	6014      	str	r4, [r2, #0]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b30:	f7fd bf9c 	b.w	8006a6c <__malloc_unlock>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d908      	bls.n	8008b4a <_free_r+0x42>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	1821      	adds	r1, r4, r0
 8008b3c:	428b      	cmp	r3, r1
 8008b3e:	bf01      	itttt	eq
 8008b40:	6819      	ldreq	r1, [r3, #0]
 8008b42:	685b      	ldreq	r3, [r3, #4]
 8008b44:	1809      	addeq	r1, r1, r0
 8008b46:	6021      	streq	r1, [r4, #0]
 8008b48:	e7ed      	b.n	8008b26 <_free_r+0x1e>
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	b10b      	cbz	r3, 8008b54 <_free_r+0x4c>
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d9fa      	bls.n	8008b4a <_free_r+0x42>
 8008b54:	6811      	ldr	r1, [r2, #0]
 8008b56:	1850      	adds	r0, r2, r1
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d10b      	bne.n	8008b74 <_free_r+0x6c>
 8008b5c:	6820      	ldr	r0, [r4, #0]
 8008b5e:	4401      	add	r1, r0
 8008b60:	1850      	adds	r0, r2, r1
 8008b62:	4283      	cmp	r3, r0
 8008b64:	6011      	str	r1, [r2, #0]
 8008b66:	d1e0      	bne.n	8008b2a <_free_r+0x22>
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	6053      	str	r3, [r2, #4]
 8008b6e:	4408      	add	r0, r1
 8008b70:	6010      	str	r0, [r2, #0]
 8008b72:	e7da      	b.n	8008b2a <_free_r+0x22>
 8008b74:	d902      	bls.n	8008b7c <_free_r+0x74>
 8008b76:	230c      	movs	r3, #12
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	e7d6      	b.n	8008b2a <_free_r+0x22>
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	1821      	adds	r1, r4, r0
 8008b80:	428b      	cmp	r3, r1
 8008b82:	bf04      	itt	eq
 8008b84:	6819      	ldreq	r1, [r3, #0]
 8008b86:	685b      	ldreq	r3, [r3, #4]
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	bf04      	itt	eq
 8008b8c:	1809      	addeq	r1, r1, r0
 8008b8e:	6021      	streq	r1, [r4, #0]
 8008b90:	6054      	str	r4, [r2, #4]
 8008b92:	e7ca      	b.n	8008b2a <_free_r+0x22>
 8008b94:	bd38      	pop	{r3, r4, r5, pc}
 8008b96:	bf00      	nop
 8008b98:	20009e0c 	.word	0x20009e0c

08008b9c <_Balloc>:
 8008b9c:	b570      	push	{r4, r5, r6, lr}
 8008b9e:	69c6      	ldr	r6, [r0, #28]
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	b976      	cbnz	r6, 8008bc4 <_Balloc+0x28>
 8008ba6:	2010      	movs	r0, #16
 8008ba8:	f7fd feb0 	bl	800690c <malloc>
 8008bac:	4602      	mov	r2, r0
 8008bae:	61e0      	str	r0, [r4, #28]
 8008bb0:	b920      	cbnz	r0, 8008bbc <_Balloc+0x20>
 8008bb2:	4b18      	ldr	r3, [pc, #96]	@ (8008c14 <_Balloc+0x78>)
 8008bb4:	4818      	ldr	r0, [pc, #96]	@ (8008c18 <_Balloc+0x7c>)
 8008bb6:	216b      	movs	r1, #107	@ 0x6b
 8008bb8:	f002 f982 	bl	800aec0 <__assert_func>
 8008bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bc0:	6006      	str	r6, [r0, #0]
 8008bc2:	60c6      	str	r6, [r0, #12]
 8008bc4:	69e6      	ldr	r6, [r4, #28]
 8008bc6:	68f3      	ldr	r3, [r6, #12]
 8008bc8:	b183      	cbz	r3, 8008bec <_Balloc+0x50>
 8008bca:	69e3      	ldr	r3, [r4, #28]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bd2:	b9b8      	cbnz	r0, 8008c04 <_Balloc+0x68>
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bda:	1d72      	adds	r2, r6, #5
 8008bdc:	0092      	lsls	r2, r2, #2
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7fd fe80 	bl	80068e4 <_calloc_r>
 8008be4:	b160      	cbz	r0, 8008c00 <_Balloc+0x64>
 8008be6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bea:	e00e      	b.n	8008c0a <_Balloc+0x6e>
 8008bec:	2221      	movs	r2, #33	@ 0x21
 8008bee:	2104      	movs	r1, #4
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7fd fe77 	bl	80068e4 <_calloc_r>
 8008bf6:	69e3      	ldr	r3, [r4, #28]
 8008bf8:	60f0      	str	r0, [r6, #12]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e4      	bne.n	8008bca <_Balloc+0x2e>
 8008c00:	2000      	movs	r0, #0
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	6802      	ldr	r2, [r0, #0]
 8008c06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c10:	e7f7      	b.n	8008c02 <_Balloc+0x66>
 8008c12:	bf00      	nop
 8008c14:	0800bb0c 	.word	0x0800bb0c
 8008c18:	0800bb8c 	.word	0x0800bb8c

08008c1c <_Bfree>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	69c6      	ldr	r6, [r0, #28]
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	b976      	cbnz	r6, 8008c44 <_Bfree+0x28>
 8008c26:	2010      	movs	r0, #16
 8008c28:	f7fd fe70 	bl	800690c <malloc>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	61e8      	str	r0, [r5, #28]
 8008c30:	b920      	cbnz	r0, 8008c3c <_Bfree+0x20>
 8008c32:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <_Bfree+0x3c>)
 8008c34:	4809      	ldr	r0, [pc, #36]	@ (8008c5c <_Bfree+0x40>)
 8008c36:	218f      	movs	r1, #143	@ 0x8f
 8008c38:	f002 f942 	bl	800aec0 <__assert_func>
 8008c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c40:	6006      	str	r6, [r0, #0]
 8008c42:	60c6      	str	r6, [r0, #12]
 8008c44:	b13c      	cbz	r4, 8008c56 <_Bfree+0x3a>
 8008c46:	69eb      	ldr	r3, [r5, #28]
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c50:	6021      	str	r1, [r4, #0]
 8008c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	0800bb0c 	.word	0x0800bb0c
 8008c5c:	0800bb8c 	.word	0x0800bb8c

08008c60 <__multadd>:
 8008c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	690d      	ldr	r5, [r1, #16]
 8008c66:	4607      	mov	r7, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	461e      	mov	r6, r3
 8008c6c:	f101 0c14 	add.w	ip, r1, #20
 8008c70:	2000      	movs	r0, #0
 8008c72:	f8dc 3000 	ldr.w	r3, [ip]
 8008c76:	b299      	uxth	r1, r3
 8008c78:	fb02 6101 	mla	r1, r2, r1, r6
 8008c7c:	0c1e      	lsrs	r6, r3, #16
 8008c7e:	0c0b      	lsrs	r3, r1, #16
 8008c80:	fb02 3306 	mla	r3, r2, r6, r3
 8008c84:	b289      	uxth	r1, r1
 8008c86:	3001      	adds	r0, #1
 8008c88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c8c:	4285      	cmp	r5, r0
 8008c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c96:	dcec      	bgt.n	8008c72 <__multadd+0x12>
 8008c98:	b30e      	cbz	r6, 8008cde <__multadd+0x7e>
 8008c9a:	68a3      	ldr	r3, [r4, #8]
 8008c9c:	42ab      	cmp	r3, r5
 8008c9e:	dc19      	bgt.n	8008cd4 <__multadd+0x74>
 8008ca0:	6861      	ldr	r1, [r4, #4]
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	3101      	adds	r1, #1
 8008ca6:	f7ff ff79 	bl	8008b9c <_Balloc>
 8008caa:	4680      	mov	r8, r0
 8008cac:	b928      	cbnz	r0, 8008cba <__multadd+0x5a>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <__multadd+0x84>)
 8008cb2:	480d      	ldr	r0, [pc, #52]	@ (8008ce8 <__multadd+0x88>)
 8008cb4:	21ba      	movs	r1, #186	@ 0xba
 8008cb6:	f002 f903 	bl	800aec0 <__assert_func>
 8008cba:	6922      	ldr	r2, [r4, #16]
 8008cbc:	3202      	adds	r2, #2
 8008cbe:	f104 010c 	add.w	r1, r4, #12
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	300c      	adds	r0, #12
 8008cc6:	f002 f8e3 	bl	800ae90 <memcpy>
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff ffa5 	bl	8008c1c <_Bfree>
 8008cd2:	4644      	mov	r4, r8
 8008cd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cd8:	3501      	adds	r5, #1
 8008cda:	615e      	str	r6, [r3, #20]
 8008cdc:	6125      	str	r5, [r4, #16]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce4:	0800bb7b 	.word	0x0800bb7b
 8008ce8:	0800bb8c 	.word	0x0800bb8c

08008cec <__s2b>:
 8008cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	4615      	mov	r5, r2
 8008cf4:	461f      	mov	r7, r3
 8008cf6:	2209      	movs	r2, #9
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d00:	2100      	movs	r1, #0
 8008d02:	2201      	movs	r2, #1
 8008d04:	429a      	cmp	r2, r3
 8008d06:	db09      	blt.n	8008d1c <__s2b+0x30>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7ff ff47 	bl	8008b9c <_Balloc>
 8008d0e:	b940      	cbnz	r0, 8008d22 <__s2b+0x36>
 8008d10:	4602      	mov	r2, r0
 8008d12:	4b19      	ldr	r3, [pc, #100]	@ (8008d78 <__s2b+0x8c>)
 8008d14:	4819      	ldr	r0, [pc, #100]	@ (8008d7c <__s2b+0x90>)
 8008d16:	21d3      	movs	r1, #211	@ 0xd3
 8008d18:	f002 f8d2 	bl	800aec0 <__assert_func>
 8008d1c:	0052      	lsls	r2, r2, #1
 8008d1e:	3101      	adds	r1, #1
 8008d20:	e7f0      	b.n	8008d04 <__s2b+0x18>
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	6143      	str	r3, [r0, #20]
 8008d26:	2d09      	cmp	r5, #9
 8008d28:	f04f 0301 	mov.w	r3, #1
 8008d2c:	6103      	str	r3, [r0, #16]
 8008d2e:	dd16      	ble.n	8008d5e <__s2b+0x72>
 8008d30:	f104 0909 	add.w	r9, r4, #9
 8008d34:	46c8      	mov	r8, r9
 8008d36:	442c      	add	r4, r5
 8008d38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	3b30      	subs	r3, #48	@ 0x30
 8008d40:	220a      	movs	r2, #10
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7ff ff8c 	bl	8008c60 <__multadd>
 8008d48:	45a0      	cmp	r8, r4
 8008d4a:	d1f5      	bne.n	8008d38 <__s2b+0x4c>
 8008d4c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d50:	444c      	add	r4, r9
 8008d52:	1b2d      	subs	r5, r5, r4
 8008d54:	1963      	adds	r3, r4, r5
 8008d56:	42bb      	cmp	r3, r7
 8008d58:	db04      	blt.n	8008d64 <__s2b+0x78>
 8008d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5e:	340a      	adds	r4, #10
 8008d60:	2509      	movs	r5, #9
 8008d62:	e7f6      	b.n	8008d52 <__s2b+0x66>
 8008d64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d68:	4601      	mov	r1, r0
 8008d6a:	3b30      	subs	r3, #48	@ 0x30
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff ff76 	bl	8008c60 <__multadd>
 8008d74:	e7ee      	b.n	8008d54 <__s2b+0x68>
 8008d76:	bf00      	nop
 8008d78:	0800bb7b 	.word	0x0800bb7b
 8008d7c:	0800bb8c 	.word	0x0800bb8c

08008d80 <__hi0bits>:
 8008d80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d84:	4603      	mov	r3, r0
 8008d86:	bf36      	itet	cc
 8008d88:	0403      	lslcc	r3, r0, #16
 8008d8a:	2000      	movcs	r0, #0
 8008d8c:	2010      	movcc	r0, #16
 8008d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d92:	bf3c      	itt	cc
 8008d94:	021b      	lslcc	r3, r3, #8
 8008d96:	3008      	addcc	r0, #8
 8008d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d9c:	bf3c      	itt	cc
 8008d9e:	011b      	lslcc	r3, r3, #4
 8008da0:	3004      	addcc	r0, #4
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da6:	bf3c      	itt	cc
 8008da8:	009b      	lslcc	r3, r3, #2
 8008daa:	3002      	addcc	r0, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	db05      	blt.n	8008dbc <__hi0bits+0x3c>
 8008db0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008db4:	f100 0001 	add.w	r0, r0, #1
 8008db8:	bf08      	it	eq
 8008dba:	2020      	moveq	r0, #32
 8008dbc:	4770      	bx	lr

08008dbe <__lo0bits>:
 8008dbe:	6803      	ldr	r3, [r0, #0]
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	f013 0007 	ands.w	r0, r3, #7
 8008dc6:	d00b      	beq.n	8008de0 <__lo0bits+0x22>
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	d421      	bmi.n	8008e10 <__lo0bits+0x52>
 8008dcc:	0798      	lsls	r0, r3, #30
 8008dce:	bf49      	itett	mi
 8008dd0:	085b      	lsrmi	r3, r3, #1
 8008dd2:	089b      	lsrpl	r3, r3, #2
 8008dd4:	2001      	movmi	r0, #1
 8008dd6:	6013      	strmi	r3, [r2, #0]
 8008dd8:	bf5c      	itt	pl
 8008dda:	6013      	strpl	r3, [r2, #0]
 8008ddc:	2002      	movpl	r0, #2
 8008dde:	4770      	bx	lr
 8008de0:	b299      	uxth	r1, r3
 8008de2:	b909      	cbnz	r1, 8008de8 <__lo0bits+0x2a>
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	2010      	movs	r0, #16
 8008de8:	b2d9      	uxtb	r1, r3
 8008dea:	b909      	cbnz	r1, 8008df0 <__lo0bits+0x32>
 8008dec:	3008      	adds	r0, #8
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	0719      	lsls	r1, r3, #28
 8008df2:	bf04      	itt	eq
 8008df4:	091b      	lsreq	r3, r3, #4
 8008df6:	3004      	addeq	r0, #4
 8008df8:	0799      	lsls	r1, r3, #30
 8008dfa:	bf04      	itt	eq
 8008dfc:	089b      	lsreq	r3, r3, #2
 8008dfe:	3002      	addeq	r0, #2
 8008e00:	07d9      	lsls	r1, r3, #31
 8008e02:	d403      	bmi.n	8008e0c <__lo0bits+0x4e>
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	f100 0001 	add.w	r0, r0, #1
 8008e0a:	d003      	beq.n	8008e14 <__lo0bits+0x56>
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	4770      	bx	lr
 8008e10:	2000      	movs	r0, #0
 8008e12:	4770      	bx	lr
 8008e14:	2020      	movs	r0, #32
 8008e16:	4770      	bx	lr

08008e18 <__i2b>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	f7ff febd 	bl	8008b9c <_Balloc>
 8008e22:	4602      	mov	r2, r0
 8008e24:	b928      	cbnz	r0, 8008e32 <__i2b+0x1a>
 8008e26:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <__i2b+0x24>)
 8008e28:	4805      	ldr	r0, [pc, #20]	@ (8008e40 <__i2b+0x28>)
 8008e2a:	f240 1145 	movw	r1, #325	@ 0x145
 8008e2e:	f002 f847 	bl	800aec0 <__assert_func>
 8008e32:	2301      	movs	r3, #1
 8008e34:	6144      	str	r4, [r0, #20]
 8008e36:	6103      	str	r3, [r0, #16]
 8008e38:	bd10      	pop	{r4, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0800bb7b 	.word	0x0800bb7b
 8008e40:	0800bb8c 	.word	0x0800bb8c

08008e44 <__multiply>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	4614      	mov	r4, r2
 8008e4a:	690a      	ldr	r2, [r1, #16]
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	bfa8      	it	ge
 8008e52:	4623      	movge	r3, r4
 8008e54:	460f      	mov	r7, r1
 8008e56:	bfa4      	itt	ge
 8008e58:	460c      	movge	r4, r1
 8008e5a:	461f      	movge	r7, r3
 8008e5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e64:	68a3      	ldr	r3, [r4, #8]
 8008e66:	6861      	ldr	r1, [r4, #4]
 8008e68:	eb0a 0609 	add.w	r6, sl, r9
 8008e6c:	42b3      	cmp	r3, r6
 8008e6e:	b085      	sub	sp, #20
 8008e70:	bfb8      	it	lt
 8008e72:	3101      	addlt	r1, #1
 8008e74:	f7ff fe92 	bl	8008b9c <_Balloc>
 8008e78:	b930      	cbnz	r0, 8008e88 <__multiply+0x44>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4b44      	ldr	r3, [pc, #272]	@ (8008f90 <__multiply+0x14c>)
 8008e7e:	4845      	ldr	r0, [pc, #276]	@ (8008f94 <__multiply+0x150>)
 8008e80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e84:	f002 f81c 	bl	800aec0 <__assert_func>
 8008e88:	f100 0514 	add.w	r5, r0, #20
 8008e8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e90:	462b      	mov	r3, r5
 8008e92:	2200      	movs	r2, #0
 8008e94:	4543      	cmp	r3, r8
 8008e96:	d321      	bcc.n	8008edc <__multiply+0x98>
 8008e98:	f107 0114 	add.w	r1, r7, #20
 8008e9c:	f104 0214 	add.w	r2, r4, #20
 8008ea0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ea4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ea8:	9302      	str	r3, [sp, #8]
 8008eaa:	1b13      	subs	r3, r2, r4
 8008eac:	3b15      	subs	r3, #21
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	f104 0715 	add.w	r7, r4, #21
 8008eb8:	42ba      	cmp	r2, r7
 8008eba:	bf38      	it	cc
 8008ebc:	2304      	movcc	r3, #4
 8008ebe:	9301      	str	r3, [sp, #4]
 8008ec0:	9b02      	ldr	r3, [sp, #8]
 8008ec2:	9103      	str	r1, [sp, #12]
 8008ec4:	428b      	cmp	r3, r1
 8008ec6:	d80c      	bhi.n	8008ee2 <__multiply+0x9e>
 8008ec8:	2e00      	cmp	r6, #0
 8008eca:	dd03      	ble.n	8008ed4 <__multiply+0x90>
 8008ecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d05b      	beq.n	8008f8c <__multiply+0x148>
 8008ed4:	6106      	str	r6, [r0, #16]
 8008ed6:	b005      	add	sp, #20
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	f843 2b04 	str.w	r2, [r3], #4
 8008ee0:	e7d8      	b.n	8008e94 <__multiply+0x50>
 8008ee2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ee6:	f1ba 0f00 	cmp.w	sl, #0
 8008eea:	d024      	beq.n	8008f36 <__multiply+0xf2>
 8008eec:	f104 0e14 	add.w	lr, r4, #20
 8008ef0:	46a9      	mov	r9, r5
 8008ef2:	f04f 0c00 	mov.w	ip, #0
 8008ef6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008efa:	f8d9 3000 	ldr.w	r3, [r9]
 8008efe:	fa1f fb87 	uxth.w	fp, r7
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f0c:	f8d9 7000 	ldr.w	r7, [r9]
 8008f10:	4463      	add	r3, ip
 8008f12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f16:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f24:	4572      	cmp	r2, lr
 8008f26:	f849 3b04 	str.w	r3, [r9], #4
 8008f2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f2e:	d8e2      	bhi.n	8008ef6 <__multiply+0xb2>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	f845 c003 	str.w	ip, [r5, r3]
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f3c:	3104      	adds	r1, #4
 8008f3e:	f1b9 0f00 	cmp.w	r9, #0
 8008f42:	d021      	beq.n	8008f88 <__multiply+0x144>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	f104 0c14 	add.w	ip, r4, #20
 8008f4a:	46ae      	mov	lr, r5
 8008f4c:	f04f 0a00 	mov.w	sl, #0
 8008f50:	f8bc b000 	ldrh.w	fp, [ip]
 8008f54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f58:	fb09 770b 	mla	r7, r9, fp, r7
 8008f5c:	4457      	add	r7, sl
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f64:	f84e 3b04 	str.w	r3, [lr], #4
 8008f68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f70:	f8be 3000 	ldrh.w	r3, [lr]
 8008f74:	fb09 330a 	mla	r3, r9, sl, r3
 8008f78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f7c:	4562      	cmp	r2, ip
 8008f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f82:	d8e5      	bhi.n	8008f50 <__multiply+0x10c>
 8008f84:	9f01      	ldr	r7, [sp, #4]
 8008f86:	51eb      	str	r3, [r5, r7]
 8008f88:	3504      	adds	r5, #4
 8008f8a:	e799      	b.n	8008ec0 <__multiply+0x7c>
 8008f8c:	3e01      	subs	r6, #1
 8008f8e:	e79b      	b.n	8008ec8 <__multiply+0x84>
 8008f90:	0800bb7b 	.word	0x0800bb7b
 8008f94:	0800bb8c 	.word	0x0800bb8c

08008f98 <__pow5mult>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	4615      	mov	r5, r2
 8008f9e:	f012 0203 	ands.w	r2, r2, #3
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	d007      	beq.n	8008fb8 <__pow5mult+0x20>
 8008fa8:	4c25      	ldr	r4, [pc, #148]	@ (8009040 <__pow5mult+0xa8>)
 8008faa:	3a01      	subs	r2, #1
 8008fac:	2300      	movs	r3, #0
 8008fae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fb2:	f7ff fe55 	bl	8008c60 <__multadd>
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	10ad      	asrs	r5, r5, #2
 8008fba:	d03d      	beq.n	8009038 <__pow5mult+0xa0>
 8008fbc:	69fc      	ldr	r4, [r7, #28]
 8008fbe:	b97c      	cbnz	r4, 8008fe0 <__pow5mult+0x48>
 8008fc0:	2010      	movs	r0, #16
 8008fc2:	f7fd fca3 	bl	800690c <malloc>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	61f8      	str	r0, [r7, #28]
 8008fca:	b928      	cbnz	r0, 8008fd8 <__pow5mult+0x40>
 8008fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8009044 <__pow5mult+0xac>)
 8008fce:	481e      	ldr	r0, [pc, #120]	@ (8009048 <__pow5mult+0xb0>)
 8008fd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fd4:	f001 ff74 	bl	800aec0 <__assert_func>
 8008fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fdc:	6004      	str	r4, [r0, #0]
 8008fde:	60c4      	str	r4, [r0, #12]
 8008fe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fe8:	b94c      	cbnz	r4, 8008ffe <__pow5mult+0x66>
 8008fea:	f240 2171 	movw	r1, #625	@ 0x271
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff ff12 	bl	8008e18 <__i2b>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	f04f 0900 	mov.w	r9, #0
 8009002:	07eb      	lsls	r3, r5, #31
 8009004:	d50a      	bpl.n	800901c <__pow5mult+0x84>
 8009006:	4631      	mov	r1, r6
 8009008:	4622      	mov	r2, r4
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff ff1a 	bl	8008e44 <__multiply>
 8009010:	4631      	mov	r1, r6
 8009012:	4680      	mov	r8, r0
 8009014:	4638      	mov	r0, r7
 8009016:	f7ff fe01 	bl	8008c1c <_Bfree>
 800901a:	4646      	mov	r6, r8
 800901c:	106d      	asrs	r5, r5, #1
 800901e:	d00b      	beq.n	8009038 <__pow5mult+0xa0>
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	b938      	cbnz	r0, 8009034 <__pow5mult+0x9c>
 8009024:	4622      	mov	r2, r4
 8009026:	4621      	mov	r1, r4
 8009028:	4638      	mov	r0, r7
 800902a:	f7ff ff0b 	bl	8008e44 <__multiply>
 800902e:	6020      	str	r0, [r4, #0]
 8009030:	f8c0 9000 	str.w	r9, [r0]
 8009034:	4604      	mov	r4, r0
 8009036:	e7e4      	b.n	8009002 <__pow5mult+0x6a>
 8009038:	4630      	mov	r0, r6
 800903a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903e:	bf00      	nop
 8009040:	0800bbe8 	.word	0x0800bbe8
 8009044:	0800bb0c 	.word	0x0800bb0c
 8009048:	0800bb8c 	.word	0x0800bb8c

0800904c <__lshift>:
 800904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009050:	460c      	mov	r4, r1
 8009052:	6849      	ldr	r1, [r1, #4]
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	4607      	mov	r7, r0
 800905e:	4691      	mov	r9, r2
 8009060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009064:	f108 0601 	add.w	r6, r8, #1
 8009068:	42b3      	cmp	r3, r6
 800906a:	db0b      	blt.n	8009084 <__lshift+0x38>
 800906c:	4638      	mov	r0, r7
 800906e:	f7ff fd95 	bl	8008b9c <_Balloc>
 8009072:	4605      	mov	r5, r0
 8009074:	b948      	cbnz	r0, 800908a <__lshift+0x3e>
 8009076:	4602      	mov	r2, r0
 8009078:	4b28      	ldr	r3, [pc, #160]	@ (800911c <__lshift+0xd0>)
 800907a:	4829      	ldr	r0, [pc, #164]	@ (8009120 <__lshift+0xd4>)
 800907c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009080:	f001 ff1e 	bl	800aec0 <__assert_func>
 8009084:	3101      	adds	r1, #1
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	e7ee      	b.n	8009068 <__lshift+0x1c>
 800908a:	2300      	movs	r3, #0
 800908c:	f100 0114 	add.w	r1, r0, #20
 8009090:	f100 0210 	add.w	r2, r0, #16
 8009094:	4618      	mov	r0, r3
 8009096:	4553      	cmp	r3, sl
 8009098:	db33      	blt.n	8009102 <__lshift+0xb6>
 800909a:	6920      	ldr	r0, [r4, #16]
 800909c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090a0:	f104 0314 	add.w	r3, r4, #20
 80090a4:	f019 091f 	ands.w	r9, r9, #31
 80090a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090b0:	d02b      	beq.n	800910a <__lshift+0xbe>
 80090b2:	f1c9 0e20 	rsb	lr, r9, #32
 80090b6:	468a      	mov	sl, r1
 80090b8:	2200      	movs	r2, #0
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	fa00 f009 	lsl.w	r0, r0, r9
 80090c0:	4310      	orrs	r0, r2
 80090c2:	f84a 0b04 	str.w	r0, [sl], #4
 80090c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ca:	459c      	cmp	ip, r3
 80090cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80090d0:	d8f3      	bhi.n	80090ba <__lshift+0x6e>
 80090d2:	ebac 0304 	sub.w	r3, ip, r4
 80090d6:	3b15      	subs	r3, #21
 80090d8:	f023 0303 	bic.w	r3, r3, #3
 80090dc:	3304      	adds	r3, #4
 80090de:	f104 0015 	add.w	r0, r4, #21
 80090e2:	4584      	cmp	ip, r0
 80090e4:	bf38      	it	cc
 80090e6:	2304      	movcc	r3, #4
 80090e8:	50ca      	str	r2, [r1, r3]
 80090ea:	b10a      	cbz	r2, 80090f0 <__lshift+0xa4>
 80090ec:	f108 0602 	add.w	r6, r8, #2
 80090f0:	3e01      	subs	r6, #1
 80090f2:	4638      	mov	r0, r7
 80090f4:	612e      	str	r6, [r5, #16]
 80090f6:	4621      	mov	r1, r4
 80090f8:	f7ff fd90 	bl	8008c1c <_Bfree>
 80090fc:	4628      	mov	r0, r5
 80090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009102:	f842 0f04 	str.w	r0, [r2, #4]!
 8009106:	3301      	adds	r3, #1
 8009108:	e7c5      	b.n	8009096 <__lshift+0x4a>
 800910a:	3904      	subs	r1, #4
 800910c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009110:	f841 2f04 	str.w	r2, [r1, #4]!
 8009114:	459c      	cmp	ip, r3
 8009116:	d8f9      	bhi.n	800910c <__lshift+0xc0>
 8009118:	e7ea      	b.n	80090f0 <__lshift+0xa4>
 800911a:	bf00      	nop
 800911c:	0800bb7b 	.word	0x0800bb7b
 8009120:	0800bb8c 	.word	0x0800bb8c

08009124 <__mcmp>:
 8009124:	690a      	ldr	r2, [r1, #16]
 8009126:	4603      	mov	r3, r0
 8009128:	6900      	ldr	r0, [r0, #16]
 800912a:	1a80      	subs	r0, r0, r2
 800912c:	b530      	push	{r4, r5, lr}
 800912e:	d10e      	bne.n	800914e <__mcmp+0x2a>
 8009130:	3314      	adds	r3, #20
 8009132:	3114      	adds	r1, #20
 8009134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800913c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009144:	4295      	cmp	r5, r2
 8009146:	d003      	beq.n	8009150 <__mcmp+0x2c>
 8009148:	d205      	bcs.n	8009156 <__mcmp+0x32>
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	bd30      	pop	{r4, r5, pc}
 8009150:	42a3      	cmp	r3, r4
 8009152:	d3f3      	bcc.n	800913c <__mcmp+0x18>
 8009154:	e7fb      	b.n	800914e <__mcmp+0x2a>
 8009156:	2001      	movs	r0, #1
 8009158:	e7f9      	b.n	800914e <__mcmp+0x2a>
	...

0800915c <__mdiff>:
 800915c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	4689      	mov	r9, r1
 8009162:	4606      	mov	r6, r0
 8009164:	4611      	mov	r1, r2
 8009166:	4648      	mov	r0, r9
 8009168:	4614      	mov	r4, r2
 800916a:	f7ff ffdb 	bl	8009124 <__mcmp>
 800916e:	1e05      	subs	r5, r0, #0
 8009170:	d112      	bne.n	8009198 <__mdiff+0x3c>
 8009172:	4629      	mov	r1, r5
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff fd11 	bl	8008b9c <_Balloc>
 800917a:	4602      	mov	r2, r0
 800917c:	b928      	cbnz	r0, 800918a <__mdiff+0x2e>
 800917e:	4b3f      	ldr	r3, [pc, #252]	@ (800927c <__mdiff+0x120>)
 8009180:	f240 2137 	movw	r1, #567	@ 0x237
 8009184:	483e      	ldr	r0, [pc, #248]	@ (8009280 <__mdiff+0x124>)
 8009186:	f001 fe9b 	bl	800aec0 <__assert_func>
 800918a:	2301      	movs	r3, #1
 800918c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009190:	4610      	mov	r0, r2
 8009192:	b003      	add	sp, #12
 8009194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009198:	bfbc      	itt	lt
 800919a:	464b      	movlt	r3, r9
 800919c:	46a1      	movlt	r9, r4
 800919e:	4630      	mov	r0, r6
 80091a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091a4:	bfba      	itte	lt
 80091a6:	461c      	movlt	r4, r3
 80091a8:	2501      	movlt	r5, #1
 80091aa:	2500      	movge	r5, #0
 80091ac:	f7ff fcf6 	bl	8008b9c <_Balloc>
 80091b0:	4602      	mov	r2, r0
 80091b2:	b918      	cbnz	r0, 80091bc <__mdiff+0x60>
 80091b4:	4b31      	ldr	r3, [pc, #196]	@ (800927c <__mdiff+0x120>)
 80091b6:	f240 2145 	movw	r1, #581	@ 0x245
 80091ba:	e7e3      	b.n	8009184 <__mdiff+0x28>
 80091bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091c0:	6926      	ldr	r6, [r4, #16]
 80091c2:	60c5      	str	r5, [r0, #12]
 80091c4:	f109 0310 	add.w	r3, r9, #16
 80091c8:	f109 0514 	add.w	r5, r9, #20
 80091cc:	f104 0e14 	add.w	lr, r4, #20
 80091d0:	f100 0b14 	add.w	fp, r0, #20
 80091d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	46d9      	mov	r9, fp
 80091e0:	f04f 0c00 	mov.w	ip, #0
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	fa1f f38a 	uxth.w	r3, sl
 80091f4:	4619      	mov	r1, r3
 80091f6:	b283      	uxth	r3, r0
 80091f8:	1acb      	subs	r3, r1, r3
 80091fa:	0c00      	lsrs	r0, r0, #16
 80091fc:	4463      	add	r3, ip
 80091fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009206:	b29b      	uxth	r3, r3
 8009208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800920c:	4576      	cmp	r6, lr
 800920e:	f849 3b04 	str.w	r3, [r9], #4
 8009212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009216:	d8e5      	bhi.n	80091e4 <__mdiff+0x88>
 8009218:	1b33      	subs	r3, r6, r4
 800921a:	3b15      	subs	r3, #21
 800921c:	f023 0303 	bic.w	r3, r3, #3
 8009220:	3415      	adds	r4, #21
 8009222:	3304      	adds	r3, #4
 8009224:	42a6      	cmp	r6, r4
 8009226:	bf38      	it	cc
 8009228:	2304      	movcc	r3, #4
 800922a:	441d      	add	r5, r3
 800922c:	445b      	add	r3, fp
 800922e:	461e      	mov	r6, r3
 8009230:	462c      	mov	r4, r5
 8009232:	4544      	cmp	r4, r8
 8009234:	d30e      	bcc.n	8009254 <__mdiff+0xf8>
 8009236:	f108 0103 	add.w	r1, r8, #3
 800923a:	1b49      	subs	r1, r1, r5
 800923c:	f021 0103 	bic.w	r1, r1, #3
 8009240:	3d03      	subs	r5, #3
 8009242:	45a8      	cmp	r8, r5
 8009244:	bf38      	it	cc
 8009246:	2100      	movcc	r1, #0
 8009248:	440b      	add	r3, r1
 800924a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800924e:	b191      	cbz	r1, 8009276 <__mdiff+0x11a>
 8009250:	6117      	str	r7, [r2, #16]
 8009252:	e79d      	b.n	8009190 <__mdiff+0x34>
 8009254:	f854 1b04 	ldr.w	r1, [r4], #4
 8009258:	46e6      	mov	lr, ip
 800925a:	0c08      	lsrs	r0, r1, #16
 800925c:	fa1c fc81 	uxtah	ip, ip, r1
 8009260:	4471      	add	r1, lr
 8009262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009266:	b289      	uxth	r1, r1
 8009268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800926c:	f846 1b04 	str.w	r1, [r6], #4
 8009270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009274:	e7dd      	b.n	8009232 <__mdiff+0xd6>
 8009276:	3f01      	subs	r7, #1
 8009278:	e7e7      	b.n	800924a <__mdiff+0xee>
 800927a:	bf00      	nop
 800927c:	0800bb7b 	.word	0x0800bb7b
 8009280:	0800bb8c 	.word	0x0800bb8c

08009284 <__ulp>:
 8009284:	b082      	sub	sp, #8
 8009286:	ed8d 0b00 	vstr	d0, [sp]
 800928a:	9a01      	ldr	r2, [sp, #4]
 800928c:	4b0f      	ldr	r3, [pc, #60]	@ (80092cc <__ulp+0x48>)
 800928e:	4013      	ands	r3, r2
 8009290:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009294:	2b00      	cmp	r3, #0
 8009296:	dc08      	bgt.n	80092aa <__ulp+0x26>
 8009298:	425b      	negs	r3, r3
 800929a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800929e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092a2:	da04      	bge.n	80092ae <__ulp+0x2a>
 80092a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092a8:	4113      	asrs	r3, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	e008      	b.n	80092c0 <__ulp+0x3c>
 80092ae:	f1a2 0314 	sub.w	r3, r2, #20
 80092b2:	2b1e      	cmp	r3, #30
 80092b4:	bfda      	itte	le
 80092b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092ba:	40da      	lsrle	r2, r3
 80092bc:	2201      	movgt	r2, #1
 80092be:	2300      	movs	r3, #0
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	ec41 0b10 	vmov	d0, r0, r1
 80092c8:	b002      	add	sp, #8
 80092ca:	4770      	bx	lr
 80092cc:	7ff00000 	.word	0x7ff00000

080092d0 <__b2d>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	6906      	ldr	r6, [r0, #16]
 80092d6:	f100 0814 	add.w	r8, r0, #20
 80092da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092de:	1f37      	subs	r7, r6, #4
 80092e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7ff fd4b 	bl	8008d80 <__hi0bits>
 80092ea:	f1c0 0320 	rsb	r3, r0, #32
 80092ee:	280a      	cmp	r0, #10
 80092f0:	600b      	str	r3, [r1, #0]
 80092f2:	491b      	ldr	r1, [pc, #108]	@ (8009360 <__b2d+0x90>)
 80092f4:	dc15      	bgt.n	8009322 <__b2d+0x52>
 80092f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80092fa:	fa22 f30c 	lsr.w	r3, r2, ip
 80092fe:	45b8      	cmp	r8, r7
 8009300:	ea43 0501 	orr.w	r5, r3, r1
 8009304:	bf34      	ite	cc
 8009306:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800930a:	2300      	movcs	r3, #0
 800930c:	3015      	adds	r0, #21
 800930e:	fa02 f000 	lsl.w	r0, r2, r0
 8009312:	fa23 f30c 	lsr.w	r3, r3, ip
 8009316:	4303      	orrs	r3, r0
 8009318:	461c      	mov	r4, r3
 800931a:	ec45 4b10 	vmov	d0, r4, r5
 800931e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009322:	45b8      	cmp	r8, r7
 8009324:	bf3a      	itte	cc
 8009326:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800932a:	f1a6 0708 	subcc.w	r7, r6, #8
 800932e:	2300      	movcs	r3, #0
 8009330:	380b      	subs	r0, #11
 8009332:	d012      	beq.n	800935a <__b2d+0x8a>
 8009334:	f1c0 0120 	rsb	r1, r0, #32
 8009338:	fa23 f401 	lsr.w	r4, r3, r1
 800933c:	4082      	lsls	r2, r0
 800933e:	4322      	orrs	r2, r4
 8009340:	4547      	cmp	r7, r8
 8009342:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009346:	bf8c      	ite	hi
 8009348:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800934c:	2200      	movls	r2, #0
 800934e:	4083      	lsls	r3, r0
 8009350:	40ca      	lsrs	r2, r1
 8009352:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009356:	4313      	orrs	r3, r2
 8009358:	e7de      	b.n	8009318 <__b2d+0x48>
 800935a:	ea42 0501 	orr.w	r5, r2, r1
 800935e:	e7db      	b.n	8009318 <__b2d+0x48>
 8009360:	3ff00000 	.word	0x3ff00000

08009364 <__d2b>:
 8009364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009368:	460f      	mov	r7, r1
 800936a:	2101      	movs	r1, #1
 800936c:	ec59 8b10 	vmov	r8, r9, d0
 8009370:	4616      	mov	r6, r2
 8009372:	f7ff fc13 	bl	8008b9c <_Balloc>
 8009376:	4604      	mov	r4, r0
 8009378:	b930      	cbnz	r0, 8009388 <__d2b+0x24>
 800937a:	4602      	mov	r2, r0
 800937c:	4b23      	ldr	r3, [pc, #140]	@ (800940c <__d2b+0xa8>)
 800937e:	4824      	ldr	r0, [pc, #144]	@ (8009410 <__d2b+0xac>)
 8009380:	f240 310f 	movw	r1, #783	@ 0x30f
 8009384:	f001 fd9c 	bl	800aec0 <__assert_func>
 8009388:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800938c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009390:	b10d      	cbz	r5, 8009396 <__d2b+0x32>
 8009392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	f1b8 0300 	subs.w	r3, r8, #0
 800939c:	d023      	beq.n	80093e6 <__d2b+0x82>
 800939e:	4668      	mov	r0, sp
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	f7ff fd0c 	bl	8008dbe <__lo0bits>
 80093a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093aa:	b1d0      	cbz	r0, 80093e2 <__d2b+0x7e>
 80093ac:	f1c0 0320 	rsb	r3, r0, #32
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	430b      	orrs	r3, r1
 80093b6:	40c2      	lsrs	r2, r0
 80093b8:	6163      	str	r3, [r4, #20]
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	61a3      	str	r3, [r4, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bf0c      	ite	eq
 80093c4:	2201      	moveq	r2, #1
 80093c6:	2202      	movne	r2, #2
 80093c8:	6122      	str	r2, [r4, #16]
 80093ca:	b1a5      	cbz	r5, 80093f6 <__d2b+0x92>
 80093cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093d0:	4405      	add	r5, r0
 80093d2:	603d      	str	r5, [r7, #0]
 80093d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093d8:	6030      	str	r0, [r6, #0]
 80093da:	4620      	mov	r0, r4
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e2:	6161      	str	r1, [r4, #20]
 80093e4:	e7ea      	b.n	80093bc <__d2b+0x58>
 80093e6:	a801      	add	r0, sp, #4
 80093e8:	f7ff fce9 	bl	8008dbe <__lo0bits>
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	3020      	adds	r0, #32
 80093f2:	2201      	movs	r2, #1
 80093f4:	e7e8      	b.n	80093c8 <__d2b+0x64>
 80093f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093fe:	6038      	str	r0, [r7, #0]
 8009400:	6918      	ldr	r0, [r3, #16]
 8009402:	f7ff fcbd 	bl	8008d80 <__hi0bits>
 8009406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800940a:	e7e5      	b.n	80093d8 <__d2b+0x74>
 800940c:	0800bb7b 	.word	0x0800bb7b
 8009410:	0800bb8c 	.word	0x0800bb8c

08009414 <__ratio>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	b085      	sub	sp, #20
 800941a:	e9cd 1000 	strd	r1, r0, [sp]
 800941e:	a902      	add	r1, sp, #8
 8009420:	f7ff ff56 	bl	80092d0 <__b2d>
 8009424:	9800      	ldr	r0, [sp, #0]
 8009426:	a903      	add	r1, sp, #12
 8009428:	ec55 4b10 	vmov	r4, r5, d0
 800942c:	f7ff ff50 	bl	80092d0 <__b2d>
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	6919      	ldr	r1, [r3, #16]
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	1ac9      	subs	r1, r1, r3
 800943a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800943e:	1a9b      	subs	r3, r3, r2
 8009440:	ec5b ab10 	vmov	sl, fp, d0
 8009444:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfce      	itee	gt
 800944c:	462a      	movgt	r2, r5
 800944e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009452:	465a      	movle	r2, fp
 8009454:	462f      	mov	r7, r5
 8009456:	46d9      	mov	r9, fp
 8009458:	bfcc      	ite	gt
 800945a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800945e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009462:	464b      	mov	r3, r9
 8009464:	4652      	mov	r2, sl
 8009466:	4620      	mov	r0, r4
 8009468:	4639      	mov	r1, r7
 800946a:	f7f7 fa0f 	bl	800088c <__aeabi_ddiv>
 800946e:	ec41 0b10 	vmov	d0, r0, r1
 8009472:	b005      	add	sp, #20
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009478 <__copybits>:
 8009478:	3901      	subs	r1, #1
 800947a:	b570      	push	{r4, r5, r6, lr}
 800947c:	1149      	asrs	r1, r1, #5
 800947e:	6914      	ldr	r4, [r2, #16]
 8009480:	3101      	adds	r1, #1
 8009482:	f102 0314 	add.w	r3, r2, #20
 8009486:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800948a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800948e:	1f05      	subs	r5, r0, #4
 8009490:	42a3      	cmp	r3, r4
 8009492:	d30c      	bcc.n	80094ae <__copybits+0x36>
 8009494:	1aa3      	subs	r3, r4, r2
 8009496:	3b11      	subs	r3, #17
 8009498:	f023 0303 	bic.w	r3, r3, #3
 800949c:	3211      	adds	r2, #17
 800949e:	42a2      	cmp	r2, r4
 80094a0:	bf88      	it	hi
 80094a2:	2300      	movhi	r3, #0
 80094a4:	4418      	add	r0, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	4288      	cmp	r0, r1
 80094aa:	d305      	bcc.n	80094b8 <__copybits+0x40>
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80094b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80094b6:	e7eb      	b.n	8009490 <__copybits+0x18>
 80094b8:	f840 3b04 	str.w	r3, [r0], #4
 80094bc:	e7f4      	b.n	80094a8 <__copybits+0x30>

080094be <__any_on>:
 80094be:	f100 0214 	add.w	r2, r0, #20
 80094c2:	6900      	ldr	r0, [r0, #16]
 80094c4:	114b      	asrs	r3, r1, #5
 80094c6:	4298      	cmp	r0, r3
 80094c8:	b510      	push	{r4, lr}
 80094ca:	db11      	blt.n	80094f0 <__any_on+0x32>
 80094cc:	dd0a      	ble.n	80094e4 <__any_on+0x26>
 80094ce:	f011 011f 	ands.w	r1, r1, #31
 80094d2:	d007      	beq.n	80094e4 <__any_on+0x26>
 80094d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094d8:	fa24 f001 	lsr.w	r0, r4, r1
 80094dc:	fa00 f101 	lsl.w	r1, r0, r1
 80094e0:	428c      	cmp	r4, r1
 80094e2:	d10b      	bne.n	80094fc <__any_on+0x3e>
 80094e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d803      	bhi.n	80094f4 <__any_on+0x36>
 80094ec:	2000      	movs	r0, #0
 80094ee:	bd10      	pop	{r4, pc}
 80094f0:	4603      	mov	r3, r0
 80094f2:	e7f7      	b.n	80094e4 <__any_on+0x26>
 80094f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d0f5      	beq.n	80094e8 <__any_on+0x2a>
 80094fc:	2001      	movs	r0, #1
 80094fe:	e7f6      	b.n	80094ee <__any_on+0x30>

08009500 <sulp>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4604      	mov	r4, r0
 8009504:	460d      	mov	r5, r1
 8009506:	ec45 4b10 	vmov	d0, r4, r5
 800950a:	4616      	mov	r6, r2
 800950c:	f7ff feba 	bl	8009284 <__ulp>
 8009510:	ec51 0b10 	vmov	r0, r1, d0
 8009514:	b17e      	cbz	r6, 8009536 <sulp+0x36>
 8009516:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800951a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800951e:	2b00      	cmp	r3, #0
 8009520:	dd09      	ble.n	8009536 <sulp+0x36>
 8009522:	051b      	lsls	r3, r3, #20
 8009524:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009528:	2400      	movs	r4, #0
 800952a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800952e:	4622      	mov	r2, r4
 8009530:	462b      	mov	r3, r5
 8009532:	f7f7 f881 	bl	8000638 <__aeabi_dmul>
 8009536:	ec41 0b10 	vmov	d0, r0, r1
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	0000      	movs	r0, r0
	...

08009540 <_strtod_l>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	b09f      	sub	sp, #124	@ 0x7c
 8009546:	460c      	mov	r4, r1
 8009548:	9217      	str	r2, [sp, #92]	@ 0x5c
 800954a:	2200      	movs	r2, #0
 800954c:	921a      	str	r2, [sp, #104]	@ 0x68
 800954e:	9005      	str	r0, [sp, #20]
 8009550:	f04f 0a00 	mov.w	sl, #0
 8009554:	f04f 0b00 	mov.w	fp, #0
 8009558:	460a      	mov	r2, r1
 800955a:	9219      	str	r2, [sp, #100]	@ 0x64
 800955c:	7811      	ldrb	r1, [r2, #0]
 800955e:	292b      	cmp	r1, #43	@ 0x2b
 8009560:	d04a      	beq.n	80095f8 <_strtod_l+0xb8>
 8009562:	d838      	bhi.n	80095d6 <_strtod_l+0x96>
 8009564:	290d      	cmp	r1, #13
 8009566:	d832      	bhi.n	80095ce <_strtod_l+0x8e>
 8009568:	2908      	cmp	r1, #8
 800956a:	d832      	bhi.n	80095d2 <_strtod_l+0x92>
 800956c:	2900      	cmp	r1, #0
 800956e:	d03b      	beq.n	80095e8 <_strtod_l+0xa8>
 8009570:	2200      	movs	r2, #0
 8009572:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009574:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009576:	782a      	ldrb	r2, [r5, #0]
 8009578:	2a30      	cmp	r2, #48	@ 0x30
 800957a:	f040 80b3 	bne.w	80096e4 <_strtod_l+0x1a4>
 800957e:	786a      	ldrb	r2, [r5, #1]
 8009580:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009584:	2a58      	cmp	r2, #88	@ 0x58
 8009586:	d16e      	bne.n	8009666 <_strtod_l+0x126>
 8009588:	9302      	str	r3, [sp, #8]
 800958a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4a8e      	ldr	r2, [pc, #568]	@ (80097cc <_strtod_l+0x28c>)
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009598:	a919      	add	r1, sp, #100	@ 0x64
 800959a:	f001 fd17 	bl	800afcc <__gethex>
 800959e:	f010 060f 	ands.w	r6, r0, #15
 80095a2:	4604      	mov	r4, r0
 80095a4:	d005      	beq.n	80095b2 <_strtod_l+0x72>
 80095a6:	2e06      	cmp	r6, #6
 80095a8:	d128      	bne.n	80095fc <_strtod_l+0xbc>
 80095aa:	3501      	adds	r5, #1
 80095ac:	2300      	movs	r3, #0
 80095ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80095b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f040 858e 	bne.w	800a0d6 <_strtod_l+0xb96>
 80095ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095bc:	b1cb      	cbz	r3, 80095f2 <_strtod_l+0xb2>
 80095be:	4652      	mov	r2, sl
 80095c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80095c4:	ec43 2b10 	vmov	d0, r2, r3
 80095c8:	b01f      	add	sp, #124	@ 0x7c
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	2920      	cmp	r1, #32
 80095d0:	d1ce      	bne.n	8009570 <_strtod_l+0x30>
 80095d2:	3201      	adds	r2, #1
 80095d4:	e7c1      	b.n	800955a <_strtod_l+0x1a>
 80095d6:	292d      	cmp	r1, #45	@ 0x2d
 80095d8:	d1ca      	bne.n	8009570 <_strtod_l+0x30>
 80095da:	2101      	movs	r1, #1
 80095dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095de:	1c51      	adds	r1, r2, #1
 80095e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80095e2:	7852      	ldrb	r2, [r2, #1]
 80095e4:	2a00      	cmp	r2, #0
 80095e6:	d1c5      	bne.n	8009574 <_strtod_l+0x34>
 80095e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f040 8570 	bne.w	800a0d2 <_strtod_l+0xb92>
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	e7e5      	b.n	80095c4 <_strtod_l+0x84>
 80095f8:	2100      	movs	r1, #0
 80095fa:	e7ef      	b.n	80095dc <_strtod_l+0x9c>
 80095fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095fe:	b13a      	cbz	r2, 8009610 <_strtod_l+0xd0>
 8009600:	2135      	movs	r1, #53	@ 0x35
 8009602:	a81c      	add	r0, sp, #112	@ 0x70
 8009604:	f7ff ff38 	bl	8009478 <__copybits>
 8009608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800960a:	9805      	ldr	r0, [sp, #20]
 800960c:	f7ff fb06 	bl	8008c1c <_Bfree>
 8009610:	3e01      	subs	r6, #1
 8009612:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009614:	2e04      	cmp	r6, #4
 8009616:	d806      	bhi.n	8009626 <_strtod_l+0xe6>
 8009618:	e8df f006 	tbb	[pc, r6]
 800961c:	201d0314 	.word	0x201d0314
 8009620:	14          	.byte	0x14
 8009621:	00          	.byte	0x00
 8009622:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009626:	05e1      	lsls	r1, r4, #23
 8009628:	bf48      	it	mi
 800962a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800962e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009632:	0d1b      	lsrs	r3, r3, #20
 8009634:	051b      	lsls	r3, r3, #20
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1bb      	bne.n	80095b2 <_strtod_l+0x72>
 800963a:	f7fe fbe3 	bl	8007e04 <__errno>
 800963e:	2322      	movs	r3, #34	@ 0x22
 8009640:	6003      	str	r3, [r0, #0]
 8009642:	e7b6      	b.n	80095b2 <_strtod_l+0x72>
 8009644:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009648:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800964c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009650:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009654:	e7e7      	b.n	8009626 <_strtod_l+0xe6>
 8009656:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80097d4 <_strtod_l+0x294>
 800965a:	e7e4      	b.n	8009626 <_strtod_l+0xe6>
 800965c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009660:	f04f 3aff 	mov.w	sl, #4294967295
 8009664:	e7df      	b.n	8009626 <_strtod_l+0xe6>
 8009666:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	9219      	str	r2, [sp, #100]	@ 0x64
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	2b30      	cmp	r3, #48	@ 0x30
 8009670:	d0f9      	beq.n	8009666 <_strtod_l+0x126>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d09d      	beq.n	80095b2 <_strtod_l+0x72>
 8009676:	2301      	movs	r3, #1
 8009678:	9309      	str	r3, [sp, #36]	@ 0x24
 800967a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800967c:	930c      	str	r3, [sp, #48]	@ 0x30
 800967e:	2300      	movs	r3, #0
 8009680:	9308      	str	r3, [sp, #32]
 8009682:	930a      	str	r3, [sp, #40]	@ 0x28
 8009684:	461f      	mov	r7, r3
 8009686:	220a      	movs	r2, #10
 8009688:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800968a:	7805      	ldrb	r5, [r0, #0]
 800968c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009690:	b2d9      	uxtb	r1, r3
 8009692:	2909      	cmp	r1, #9
 8009694:	d928      	bls.n	80096e8 <_strtod_l+0x1a8>
 8009696:	494e      	ldr	r1, [pc, #312]	@ (80097d0 <_strtod_l+0x290>)
 8009698:	2201      	movs	r2, #1
 800969a:	f001 fbc4 	bl	800ae26 <strncmp>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d032      	beq.n	8009708 <_strtod_l+0x1c8>
 80096a2:	2000      	movs	r0, #0
 80096a4:	462a      	mov	r2, r5
 80096a6:	4681      	mov	r9, r0
 80096a8:	463d      	mov	r5, r7
 80096aa:	4603      	mov	r3, r0
 80096ac:	2a65      	cmp	r2, #101	@ 0x65
 80096ae:	d001      	beq.n	80096b4 <_strtod_l+0x174>
 80096b0:	2a45      	cmp	r2, #69	@ 0x45
 80096b2:	d114      	bne.n	80096de <_strtod_l+0x19e>
 80096b4:	b91d      	cbnz	r5, 80096be <_strtod_l+0x17e>
 80096b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096b8:	4302      	orrs	r2, r0
 80096ba:	d095      	beq.n	80095e8 <_strtod_l+0xa8>
 80096bc:	2500      	movs	r5, #0
 80096be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096c0:	1c62      	adds	r2, r4, #1
 80096c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80096c4:	7862      	ldrb	r2, [r4, #1]
 80096c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80096c8:	d077      	beq.n	80097ba <_strtod_l+0x27a>
 80096ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80096cc:	d07b      	beq.n	80097c6 <_strtod_l+0x286>
 80096ce:	f04f 0c00 	mov.w	ip, #0
 80096d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096d6:	2909      	cmp	r1, #9
 80096d8:	f240 8082 	bls.w	80097e0 <_strtod_l+0x2a0>
 80096dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80096de:	f04f 0800 	mov.w	r8, #0
 80096e2:	e0a2      	b.n	800982a <_strtod_l+0x2ea>
 80096e4:	2300      	movs	r3, #0
 80096e6:	e7c7      	b.n	8009678 <_strtod_l+0x138>
 80096e8:	2f08      	cmp	r7, #8
 80096ea:	bfd5      	itete	le
 80096ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80096ee:	9908      	ldrgt	r1, [sp, #32]
 80096f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80096f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80096f8:	f100 0001 	add.w	r0, r0, #1
 80096fc:	bfd4      	ite	le
 80096fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009700:	9308      	strgt	r3, [sp, #32]
 8009702:	3701      	adds	r7, #1
 8009704:	9019      	str	r0, [sp, #100]	@ 0x64
 8009706:	e7bf      	b.n	8009688 <_strtod_l+0x148>
 8009708:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	9219      	str	r2, [sp, #100]	@ 0x64
 800970e:	785a      	ldrb	r2, [r3, #1]
 8009710:	b37f      	cbz	r7, 8009772 <_strtod_l+0x232>
 8009712:	4681      	mov	r9, r0
 8009714:	463d      	mov	r5, r7
 8009716:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800971a:	2b09      	cmp	r3, #9
 800971c:	d912      	bls.n	8009744 <_strtod_l+0x204>
 800971e:	2301      	movs	r3, #1
 8009720:	e7c4      	b.n	80096ac <_strtod_l+0x16c>
 8009722:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	9219      	str	r2, [sp, #100]	@ 0x64
 8009728:	785a      	ldrb	r2, [r3, #1]
 800972a:	3001      	adds	r0, #1
 800972c:	2a30      	cmp	r2, #48	@ 0x30
 800972e:	d0f8      	beq.n	8009722 <_strtod_l+0x1e2>
 8009730:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009734:	2b08      	cmp	r3, #8
 8009736:	f200 84d3 	bhi.w	800a0e0 <_strtod_l+0xba0>
 800973a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800973c:	930c      	str	r3, [sp, #48]	@ 0x30
 800973e:	4681      	mov	r9, r0
 8009740:	2000      	movs	r0, #0
 8009742:	4605      	mov	r5, r0
 8009744:	3a30      	subs	r2, #48	@ 0x30
 8009746:	f100 0301 	add.w	r3, r0, #1
 800974a:	d02a      	beq.n	80097a2 <_strtod_l+0x262>
 800974c:	4499      	add	r9, r3
 800974e:	eb00 0c05 	add.w	ip, r0, r5
 8009752:	462b      	mov	r3, r5
 8009754:	210a      	movs	r1, #10
 8009756:	4563      	cmp	r3, ip
 8009758:	d10d      	bne.n	8009776 <_strtod_l+0x236>
 800975a:	1c69      	adds	r1, r5, #1
 800975c:	4401      	add	r1, r0
 800975e:	4428      	add	r0, r5
 8009760:	2808      	cmp	r0, #8
 8009762:	dc16      	bgt.n	8009792 <_strtod_l+0x252>
 8009764:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009766:	230a      	movs	r3, #10
 8009768:	fb03 2300 	mla	r3, r3, r0, r2
 800976c:	930a      	str	r3, [sp, #40]	@ 0x28
 800976e:	2300      	movs	r3, #0
 8009770:	e018      	b.n	80097a4 <_strtod_l+0x264>
 8009772:	4638      	mov	r0, r7
 8009774:	e7da      	b.n	800972c <_strtod_l+0x1ec>
 8009776:	2b08      	cmp	r3, #8
 8009778:	f103 0301 	add.w	r3, r3, #1
 800977c:	dc03      	bgt.n	8009786 <_strtod_l+0x246>
 800977e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009780:	434e      	muls	r6, r1
 8009782:	960a      	str	r6, [sp, #40]	@ 0x28
 8009784:	e7e7      	b.n	8009756 <_strtod_l+0x216>
 8009786:	2b10      	cmp	r3, #16
 8009788:	bfde      	ittt	le
 800978a:	9e08      	ldrle	r6, [sp, #32]
 800978c:	434e      	mulle	r6, r1
 800978e:	9608      	strle	r6, [sp, #32]
 8009790:	e7e1      	b.n	8009756 <_strtod_l+0x216>
 8009792:	280f      	cmp	r0, #15
 8009794:	dceb      	bgt.n	800976e <_strtod_l+0x22e>
 8009796:	9808      	ldr	r0, [sp, #32]
 8009798:	230a      	movs	r3, #10
 800979a:	fb03 2300 	mla	r3, r3, r0, r2
 800979e:	9308      	str	r3, [sp, #32]
 80097a0:	e7e5      	b.n	800976e <_strtod_l+0x22e>
 80097a2:	4629      	mov	r1, r5
 80097a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097a6:	1c50      	adds	r0, r2, #1
 80097a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80097aa:	7852      	ldrb	r2, [r2, #1]
 80097ac:	4618      	mov	r0, r3
 80097ae:	460d      	mov	r5, r1
 80097b0:	e7b1      	b.n	8009716 <_strtod_l+0x1d6>
 80097b2:	f04f 0900 	mov.w	r9, #0
 80097b6:	2301      	movs	r3, #1
 80097b8:	e77d      	b.n	80096b6 <_strtod_l+0x176>
 80097ba:	f04f 0c00 	mov.w	ip, #0
 80097be:	1ca2      	adds	r2, r4, #2
 80097c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80097c2:	78a2      	ldrb	r2, [r4, #2]
 80097c4:	e785      	b.n	80096d2 <_strtod_l+0x192>
 80097c6:	f04f 0c01 	mov.w	ip, #1
 80097ca:	e7f8      	b.n	80097be <_strtod_l+0x27e>
 80097cc:	0800bd00 	.word	0x0800bd00
 80097d0:	0800bce8 	.word	0x0800bce8
 80097d4:	7ff00000 	.word	0x7ff00000
 80097d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097da:	1c51      	adds	r1, r2, #1
 80097dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80097de:	7852      	ldrb	r2, [r2, #1]
 80097e0:	2a30      	cmp	r2, #48	@ 0x30
 80097e2:	d0f9      	beq.n	80097d8 <_strtod_l+0x298>
 80097e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80097e8:	2908      	cmp	r1, #8
 80097ea:	f63f af78 	bhi.w	80096de <_strtod_l+0x19e>
 80097ee:	3a30      	subs	r2, #48	@ 0x30
 80097f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097f6:	f04f 080a 	mov.w	r8, #10
 80097fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097fc:	1c56      	adds	r6, r2, #1
 80097fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009800:	7852      	ldrb	r2, [r2, #1]
 8009802:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009806:	f1be 0f09 	cmp.w	lr, #9
 800980a:	d939      	bls.n	8009880 <_strtod_l+0x340>
 800980c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800980e:	1a76      	subs	r6, r6, r1
 8009810:	2e08      	cmp	r6, #8
 8009812:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009816:	dc03      	bgt.n	8009820 <_strtod_l+0x2e0>
 8009818:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800981a:	4588      	cmp	r8, r1
 800981c:	bfa8      	it	ge
 800981e:	4688      	movge	r8, r1
 8009820:	f1bc 0f00 	cmp.w	ip, #0
 8009824:	d001      	beq.n	800982a <_strtod_l+0x2ea>
 8009826:	f1c8 0800 	rsb	r8, r8, #0
 800982a:	2d00      	cmp	r5, #0
 800982c:	d14e      	bne.n	80098cc <_strtod_l+0x38c>
 800982e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009830:	4308      	orrs	r0, r1
 8009832:	f47f aebe 	bne.w	80095b2 <_strtod_l+0x72>
 8009836:	2b00      	cmp	r3, #0
 8009838:	f47f aed6 	bne.w	80095e8 <_strtod_l+0xa8>
 800983c:	2a69      	cmp	r2, #105	@ 0x69
 800983e:	d028      	beq.n	8009892 <_strtod_l+0x352>
 8009840:	dc25      	bgt.n	800988e <_strtod_l+0x34e>
 8009842:	2a49      	cmp	r2, #73	@ 0x49
 8009844:	d025      	beq.n	8009892 <_strtod_l+0x352>
 8009846:	2a4e      	cmp	r2, #78	@ 0x4e
 8009848:	f47f aece 	bne.w	80095e8 <_strtod_l+0xa8>
 800984c:	499b      	ldr	r1, [pc, #620]	@ (8009abc <_strtod_l+0x57c>)
 800984e:	a819      	add	r0, sp, #100	@ 0x64
 8009850:	f001 fdde 	bl	800b410 <__match>
 8009854:	2800      	cmp	r0, #0
 8009856:	f43f aec7 	beq.w	80095e8 <_strtod_l+0xa8>
 800985a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	2b28      	cmp	r3, #40	@ 0x28
 8009860:	d12e      	bne.n	80098c0 <_strtod_l+0x380>
 8009862:	4997      	ldr	r1, [pc, #604]	@ (8009ac0 <_strtod_l+0x580>)
 8009864:	aa1c      	add	r2, sp, #112	@ 0x70
 8009866:	a819      	add	r0, sp, #100	@ 0x64
 8009868:	f001 fde6 	bl	800b438 <__hexnan>
 800986c:	2805      	cmp	r0, #5
 800986e:	d127      	bne.n	80098c0 <_strtod_l+0x380>
 8009870:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009872:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009876:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800987a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800987e:	e698      	b.n	80095b2 <_strtod_l+0x72>
 8009880:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009882:	fb08 2101 	mla	r1, r8, r1, r2
 8009886:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800988a:	920e      	str	r2, [sp, #56]	@ 0x38
 800988c:	e7b5      	b.n	80097fa <_strtod_l+0x2ba>
 800988e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009890:	e7da      	b.n	8009848 <_strtod_l+0x308>
 8009892:	498c      	ldr	r1, [pc, #560]	@ (8009ac4 <_strtod_l+0x584>)
 8009894:	a819      	add	r0, sp, #100	@ 0x64
 8009896:	f001 fdbb 	bl	800b410 <__match>
 800989a:	2800      	cmp	r0, #0
 800989c:	f43f aea4 	beq.w	80095e8 <_strtod_l+0xa8>
 80098a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098a2:	4989      	ldr	r1, [pc, #548]	@ (8009ac8 <_strtod_l+0x588>)
 80098a4:	3b01      	subs	r3, #1
 80098a6:	a819      	add	r0, sp, #100	@ 0x64
 80098a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80098aa:	f001 fdb1 	bl	800b410 <__match>
 80098ae:	b910      	cbnz	r0, 80098b6 <_strtod_l+0x376>
 80098b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098b2:	3301      	adds	r3, #1
 80098b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80098b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ad8 <_strtod_l+0x598>
 80098ba:	f04f 0a00 	mov.w	sl, #0
 80098be:	e678      	b.n	80095b2 <_strtod_l+0x72>
 80098c0:	4882      	ldr	r0, [pc, #520]	@ (8009acc <_strtod_l+0x58c>)
 80098c2:	f001 faf5 	bl	800aeb0 <nan>
 80098c6:	ec5b ab10 	vmov	sl, fp, d0
 80098ca:	e672      	b.n	80095b2 <_strtod_l+0x72>
 80098cc:	eba8 0309 	sub.w	r3, r8, r9
 80098d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098d4:	2f00      	cmp	r7, #0
 80098d6:	bf08      	it	eq
 80098d8:	462f      	moveq	r7, r5
 80098da:	2d10      	cmp	r5, #16
 80098dc:	462c      	mov	r4, r5
 80098de:	bfa8      	it	ge
 80098e0:	2410      	movge	r4, #16
 80098e2:	f7f6 fe2f 	bl	8000544 <__aeabi_ui2d>
 80098e6:	2d09      	cmp	r5, #9
 80098e8:	4682      	mov	sl, r0
 80098ea:	468b      	mov	fp, r1
 80098ec:	dc13      	bgt.n	8009916 <_strtod_l+0x3d6>
 80098ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f43f ae5e 	beq.w	80095b2 <_strtod_l+0x72>
 80098f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f8:	dd78      	ble.n	80099ec <_strtod_l+0x4ac>
 80098fa:	2b16      	cmp	r3, #22
 80098fc:	dc5f      	bgt.n	80099be <_strtod_l+0x47e>
 80098fe:	4974      	ldr	r1, [pc, #464]	@ (8009ad0 <_strtod_l+0x590>)
 8009900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009908:	4652      	mov	r2, sl
 800990a:	465b      	mov	r3, fp
 800990c:	f7f6 fe94 	bl	8000638 <__aeabi_dmul>
 8009910:	4682      	mov	sl, r0
 8009912:	468b      	mov	fp, r1
 8009914:	e64d      	b.n	80095b2 <_strtod_l+0x72>
 8009916:	4b6e      	ldr	r3, [pc, #440]	@ (8009ad0 <_strtod_l+0x590>)
 8009918:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800991c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009920:	f7f6 fe8a 	bl	8000638 <__aeabi_dmul>
 8009924:	4682      	mov	sl, r0
 8009926:	9808      	ldr	r0, [sp, #32]
 8009928:	468b      	mov	fp, r1
 800992a:	f7f6 fe0b 	bl	8000544 <__aeabi_ui2d>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4650      	mov	r0, sl
 8009934:	4659      	mov	r1, fp
 8009936:	f7f6 fcc9 	bl	80002cc <__adddf3>
 800993a:	2d0f      	cmp	r5, #15
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	ddd5      	ble.n	80098ee <_strtod_l+0x3ae>
 8009942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009944:	1b2c      	subs	r4, r5, r4
 8009946:	441c      	add	r4, r3
 8009948:	2c00      	cmp	r4, #0
 800994a:	f340 8096 	ble.w	8009a7a <_strtod_l+0x53a>
 800994e:	f014 030f 	ands.w	r3, r4, #15
 8009952:	d00a      	beq.n	800996a <_strtod_l+0x42a>
 8009954:	495e      	ldr	r1, [pc, #376]	@ (8009ad0 <_strtod_l+0x590>)
 8009956:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800995a:	4652      	mov	r2, sl
 800995c:	465b      	mov	r3, fp
 800995e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009962:	f7f6 fe69 	bl	8000638 <__aeabi_dmul>
 8009966:	4682      	mov	sl, r0
 8009968:	468b      	mov	fp, r1
 800996a:	f034 040f 	bics.w	r4, r4, #15
 800996e:	d073      	beq.n	8009a58 <_strtod_l+0x518>
 8009970:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009974:	dd48      	ble.n	8009a08 <_strtod_l+0x4c8>
 8009976:	2400      	movs	r4, #0
 8009978:	46a0      	mov	r8, r4
 800997a:	940a      	str	r4, [sp, #40]	@ 0x28
 800997c:	46a1      	mov	r9, r4
 800997e:	9a05      	ldr	r2, [sp, #20]
 8009980:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ad8 <_strtod_l+0x598>
 8009984:	2322      	movs	r3, #34	@ 0x22
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	f04f 0a00 	mov.w	sl, #0
 800998c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	f43f ae0f 	beq.w	80095b2 <_strtod_l+0x72>
 8009994:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009996:	9805      	ldr	r0, [sp, #20]
 8009998:	f7ff f940 	bl	8008c1c <_Bfree>
 800999c:	9805      	ldr	r0, [sp, #20]
 800999e:	4649      	mov	r1, r9
 80099a0:	f7ff f93c 	bl	8008c1c <_Bfree>
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	4641      	mov	r1, r8
 80099a8:	f7ff f938 	bl	8008c1c <_Bfree>
 80099ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099ae:	9805      	ldr	r0, [sp, #20]
 80099b0:	f7ff f934 	bl	8008c1c <_Bfree>
 80099b4:	9805      	ldr	r0, [sp, #20]
 80099b6:	4621      	mov	r1, r4
 80099b8:	f7ff f930 	bl	8008c1c <_Bfree>
 80099bc:	e5f9      	b.n	80095b2 <_strtod_l+0x72>
 80099be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099c4:	4293      	cmp	r3, r2
 80099c6:	dbbc      	blt.n	8009942 <_strtod_l+0x402>
 80099c8:	4c41      	ldr	r4, [pc, #260]	@ (8009ad0 <_strtod_l+0x590>)
 80099ca:	f1c5 050f 	rsb	r5, r5, #15
 80099ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099d2:	4652      	mov	r2, sl
 80099d4:	465b      	mov	r3, fp
 80099d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099da:	f7f6 fe2d 	bl	8000638 <__aeabi_dmul>
 80099de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e0:	1b5d      	subs	r5, r3, r5
 80099e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099ea:	e78f      	b.n	800990c <_strtod_l+0x3cc>
 80099ec:	3316      	adds	r3, #22
 80099ee:	dba8      	blt.n	8009942 <_strtod_l+0x402>
 80099f0:	4b37      	ldr	r3, [pc, #220]	@ (8009ad0 <_strtod_l+0x590>)
 80099f2:	eba9 0808 	sub.w	r8, r9, r8
 80099f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80099fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80099fe:	4650      	mov	r0, sl
 8009a00:	4659      	mov	r1, fp
 8009a02:	f7f6 ff43 	bl	800088c <__aeabi_ddiv>
 8009a06:	e783      	b.n	8009910 <_strtod_l+0x3d0>
 8009a08:	4b32      	ldr	r3, [pc, #200]	@ (8009ad4 <_strtod_l+0x594>)
 8009a0a:	9308      	str	r3, [sp, #32]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	1124      	asrs	r4, r4, #4
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	461e      	mov	r6, r3
 8009a16:	2c01      	cmp	r4, #1
 8009a18:	dc21      	bgt.n	8009a5e <_strtod_l+0x51e>
 8009a1a:	b10b      	cbz	r3, 8009a20 <_strtod_l+0x4e0>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	468b      	mov	fp, r1
 8009a20:	492c      	ldr	r1, [pc, #176]	@ (8009ad4 <_strtod_l+0x594>)
 8009a22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a32:	f7f6 fe01 	bl	8000638 <__aeabi_dmul>
 8009a36:	4b28      	ldr	r3, [pc, #160]	@ (8009ad8 <_strtod_l+0x598>)
 8009a38:	460a      	mov	r2, r1
 8009a3a:	400b      	ands	r3, r1
 8009a3c:	4927      	ldr	r1, [pc, #156]	@ (8009adc <_strtod_l+0x59c>)
 8009a3e:	428b      	cmp	r3, r1
 8009a40:	4682      	mov	sl, r0
 8009a42:	d898      	bhi.n	8009976 <_strtod_l+0x436>
 8009a44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf86      	itte	hi
 8009a4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ae0 <_strtod_l+0x5a0>
 8009a50:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9308      	str	r3, [sp, #32]
 8009a5c:	e07a      	b.n	8009b54 <_strtod_l+0x614>
 8009a5e:	07e2      	lsls	r2, r4, #31
 8009a60:	d505      	bpl.n	8009a6e <_strtod_l+0x52e>
 8009a62:	9b08      	ldr	r3, [sp, #32]
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f7f6 fde6 	bl	8000638 <__aeabi_dmul>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	9a08      	ldr	r2, [sp, #32]
 8009a70:	3208      	adds	r2, #8
 8009a72:	3601      	adds	r6, #1
 8009a74:	1064      	asrs	r4, r4, #1
 8009a76:	9208      	str	r2, [sp, #32]
 8009a78:	e7cd      	b.n	8009a16 <_strtod_l+0x4d6>
 8009a7a:	d0ed      	beq.n	8009a58 <_strtod_l+0x518>
 8009a7c:	4264      	negs	r4, r4
 8009a7e:	f014 020f 	ands.w	r2, r4, #15
 8009a82:	d00a      	beq.n	8009a9a <_strtod_l+0x55a>
 8009a84:	4b12      	ldr	r3, [pc, #72]	@ (8009ad0 <_strtod_l+0x590>)
 8009a86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	f7f6 fefb 	bl	800088c <__aeabi_ddiv>
 8009a96:	4682      	mov	sl, r0
 8009a98:	468b      	mov	fp, r1
 8009a9a:	1124      	asrs	r4, r4, #4
 8009a9c:	d0dc      	beq.n	8009a58 <_strtod_l+0x518>
 8009a9e:	2c1f      	cmp	r4, #31
 8009aa0:	dd20      	ble.n	8009ae4 <_strtod_l+0x5a4>
 8009aa2:	2400      	movs	r4, #0
 8009aa4:	46a0      	mov	r8, r4
 8009aa6:	940a      	str	r4, [sp, #40]	@ 0x28
 8009aa8:	46a1      	mov	r9, r4
 8009aaa:	9a05      	ldr	r2, [sp, #20]
 8009aac:	2322      	movs	r3, #34	@ 0x22
 8009aae:	f04f 0a00 	mov.w	sl, #0
 8009ab2:	f04f 0b00 	mov.w	fp, #0
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	e768      	b.n	800998c <_strtod_l+0x44c>
 8009aba:	bf00      	nop
 8009abc:	0800bad5 	.word	0x0800bad5
 8009ac0:	0800bcec 	.word	0x0800bcec
 8009ac4:	0800bacd 	.word	0x0800bacd
 8009ac8:	0800bb02 	.word	0x0800bb02
 8009acc:	0800beb0 	.word	0x0800beb0
 8009ad0:	0800bc20 	.word	0x0800bc20
 8009ad4:	0800bbf8 	.word	0x0800bbf8
 8009ad8:	7ff00000 	.word	0x7ff00000
 8009adc:	7ca00000 	.word	0x7ca00000
 8009ae0:	7fefffff 	.word	0x7fefffff
 8009ae4:	f014 0310 	ands.w	r3, r4, #16
 8009ae8:	bf18      	it	ne
 8009aea:	236a      	movne	r3, #106	@ 0x6a
 8009aec:	4ea9      	ldr	r6, [pc, #676]	@ (8009d94 <_strtod_l+0x854>)
 8009aee:	9308      	str	r3, [sp, #32]
 8009af0:	4650      	mov	r0, sl
 8009af2:	4659      	mov	r1, fp
 8009af4:	2300      	movs	r3, #0
 8009af6:	07e2      	lsls	r2, r4, #31
 8009af8:	d504      	bpl.n	8009b04 <_strtod_l+0x5c4>
 8009afa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009afe:	f7f6 fd9b 	bl	8000638 <__aeabi_dmul>
 8009b02:	2301      	movs	r3, #1
 8009b04:	1064      	asrs	r4, r4, #1
 8009b06:	f106 0608 	add.w	r6, r6, #8
 8009b0a:	d1f4      	bne.n	8009af6 <_strtod_l+0x5b6>
 8009b0c:	b10b      	cbz	r3, 8009b12 <_strtod_l+0x5d2>
 8009b0e:	4682      	mov	sl, r0
 8009b10:	468b      	mov	fp, r1
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	b1b3      	cbz	r3, 8009b44 <_strtod_l+0x604>
 8009b16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	4659      	mov	r1, fp
 8009b22:	dd0f      	ble.n	8009b44 <_strtod_l+0x604>
 8009b24:	2b1f      	cmp	r3, #31
 8009b26:	dd55      	ble.n	8009bd4 <_strtod_l+0x694>
 8009b28:	2b34      	cmp	r3, #52	@ 0x34
 8009b2a:	bfde      	ittt	le
 8009b2c:	f04f 33ff 	movle.w	r3, #4294967295
 8009b30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b34:	4093      	lslle	r3, r2
 8009b36:	f04f 0a00 	mov.w	sl, #0
 8009b3a:	bfcc      	ite	gt
 8009b3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b40:	ea03 0b01 	andle.w	fp, r3, r1
 8009b44:	2200      	movs	r2, #0
 8009b46:	2300      	movs	r3, #0
 8009b48:	4650      	mov	r0, sl
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	f7f6 ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d1a6      	bne.n	8009aa2 <_strtod_l+0x562>
 8009b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b5a:	9805      	ldr	r0, [sp, #20]
 8009b5c:	462b      	mov	r3, r5
 8009b5e:	463a      	mov	r2, r7
 8009b60:	f7ff f8c4 	bl	8008cec <__s2b>
 8009b64:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f af05 	beq.w	8009976 <_strtod_l+0x436>
 8009b6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6e:	2a00      	cmp	r2, #0
 8009b70:	eba9 0308 	sub.w	r3, r9, r8
 8009b74:	bfa8      	it	ge
 8009b76:	2300      	movge	r3, #0
 8009b78:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b7a:	2400      	movs	r4, #0
 8009b7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b80:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b82:	46a0      	mov	r8, r4
 8009b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b86:	9805      	ldr	r0, [sp, #20]
 8009b88:	6859      	ldr	r1, [r3, #4]
 8009b8a:	f7ff f807 	bl	8008b9c <_Balloc>
 8009b8e:	4681      	mov	r9, r0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f43f aef4 	beq.w	800997e <_strtod_l+0x43e>
 8009b96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b98:	691a      	ldr	r2, [r3, #16]
 8009b9a:	3202      	adds	r2, #2
 8009b9c:	f103 010c 	add.w	r1, r3, #12
 8009ba0:	0092      	lsls	r2, r2, #2
 8009ba2:	300c      	adds	r0, #12
 8009ba4:	f001 f974 	bl	800ae90 <memcpy>
 8009ba8:	ec4b ab10 	vmov	d0, sl, fp
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	aa1c      	add	r2, sp, #112	@ 0x70
 8009bb0:	a91b      	add	r1, sp, #108	@ 0x6c
 8009bb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009bb6:	f7ff fbd5 	bl	8009364 <__d2b>
 8009bba:	901a      	str	r0, [sp, #104]	@ 0x68
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f43f aede 	beq.w	800997e <_strtod_l+0x43e>
 8009bc2:	9805      	ldr	r0, [sp, #20]
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	f7ff f927 	bl	8008e18 <__i2b>
 8009bca:	4680      	mov	r8, r0
 8009bcc:	b948      	cbnz	r0, 8009be2 <_strtod_l+0x6a2>
 8009bce:	f04f 0800 	mov.w	r8, #0
 8009bd2:	e6d4      	b.n	800997e <_strtod_l+0x43e>
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bdc:	ea03 0a0a 	and.w	sl, r3, sl
 8009be0:	e7b0      	b.n	8009b44 <_strtod_l+0x604>
 8009be2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009be4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	bfab      	itete	ge
 8009bea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009bec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009bee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009bf0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009bf2:	bfac      	ite	ge
 8009bf4:	18ef      	addge	r7, r5, r3
 8009bf6:	1b5e      	sublt	r6, r3, r5
 8009bf8:	9b08      	ldr	r3, [sp, #32]
 8009bfa:	1aed      	subs	r5, r5, r3
 8009bfc:	4415      	add	r5, r2
 8009bfe:	4b66      	ldr	r3, [pc, #408]	@ (8009d98 <_strtod_l+0x858>)
 8009c00:	3d01      	subs	r5, #1
 8009c02:	429d      	cmp	r5, r3
 8009c04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c08:	da50      	bge.n	8009cac <_strtod_l+0x76c>
 8009c0a:	1b5b      	subs	r3, r3, r5
 8009c0c:	2b1f      	cmp	r3, #31
 8009c0e:	eba2 0203 	sub.w	r2, r2, r3
 8009c12:	f04f 0101 	mov.w	r1, #1
 8009c16:	dc3d      	bgt.n	8009c94 <_strtod_l+0x754>
 8009c18:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c22:	18bd      	adds	r5, r7, r2
 8009c24:	9b08      	ldr	r3, [sp, #32]
 8009c26:	42af      	cmp	r7, r5
 8009c28:	4416      	add	r6, r2
 8009c2a:	441e      	add	r6, r3
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	bfa8      	it	ge
 8009c30:	462b      	movge	r3, r5
 8009c32:	42b3      	cmp	r3, r6
 8009c34:	bfa8      	it	ge
 8009c36:	4633      	movge	r3, r6
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfc2      	ittt	gt
 8009c3c:	1aed      	subgt	r5, r5, r3
 8009c3e:	1af6      	subgt	r6, r6, r3
 8009c40:	1aff      	subgt	r7, r7, r3
 8009c42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dd16      	ble.n	8009c76 <_strtod_l+0x736>
 8009c48:	4641      	mov	r1, r8
 8009c4a:	9805      	ldr	r0, [sp, #20]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f7ff f9a3 	bl	8008f98 <__pow5mult>
 8009c52:	4680      	mov	r8, r0
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d0ba      	beq.n	8009bce <_strtod_l+0x68e>
 8009c58:	4601      	mov	r1, r0
 8009c5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c5c:	9805      	ldr	r0, [sp, #20]
 8009c5e:	f7ff f8f1 	bl	8008e44 <__multiply>
 8009c62:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f43f ae8a 	beq.w	800997e <_strtod_l+0x43e>
 8009c6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c6c:	9805      	ldr	r0, [sp, #20]
 8009c6e:	f7fe ffd5 	bl	8008c1c <_Bfree>
 8009c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c76:	2d00      	cmp	r5, #0
 8009c78:	dc1d      	bgt.n	8009cb6 <_strtod_l+0x776>
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dd23      	ble.n	8009cc8 <_strtod_l+0x788>
 8009c80:	4649      	mov	r1, r9
 8009c82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c84:	9805      	ldr	r0, [sp, #20]
 8009c86:	f7ff f987 	bl	8008f98 <__pow5mult>
 8009c8a:	4681      	mov	r9, r0
 8009c8c:	b9e0      	cbnz	r0, 8009cc8 <_strtod_l+0x788>
 8009c8e:	f04f 0900 	mov.w	r9, #0
 8009c92:	e674      	b.n	800997e <_strtod_l+0x43e>
 8009c94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ca0:	35e2      	adds	r5, #226	@ 0xe2
 8009ca2:	fa01 f305 	lsl.w	r3, r1, r5
 8009ca6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ca8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009caa:	e7ba      	b.n	8009c22 <_strtod_l+0x6e2>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cb4:	e7b5      	b.n	8009c22 <_strtod_l+0x6e2>
 8009cb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cb8:	9805      	ldr	r0, [sp, #20]
 8009cba:	462a      	mov	r2, r5
 8009cbc:	f7ff f9c6 	bl	800904c <__lshift>
 8009cc0:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d1d9      	bne.n	8009c7a <_strtod_l+0x73a>
 8009cc6:	e65a      	b.n	800997e <_strtod_l+0x43e>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	dd07      	ble.n	8009cdc <_strtod_l+0x79c>
 8009ccc:	4649      	mov	r1, r9
 8009cce:	9805      	ldr	r0, [sp, #20]
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	f7ff f9bb 	bl	800904c <__lshift>
 8009cd6:	4681      	mov	r9, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d0d8      	beq.n	8009c8e <_strtod_l+0x74e>
 8009cdc:	2f00      	cmp	r7, #0
 8009cde:	dd08      	ble.n	8009cf2 <_strtod_l+0x7b2>
 8009ce0:	4641      	mov	r1, r8
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	463a      	mov	r2, r7
 8009ce6:	f7ff f9b1 	bl	800904c <__lshift>
 8009cea:	4680      	mov	r8, r0
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f43f ae46 	beq.w	800997e <_strtod_l+0x43e>
 8009cf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cf4:	9805      	ldr	r0, [sp, #20]
 8009cf6:	464a      	mov	r2, r9
 8009cf8:	f7ff fa30 	bl	800915c <__mdiff>
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f ae3d 	beq.w	800997e <_strtod_l+0x43e>
 8009d04:	68c3      	ldr	r3, [r0, #12]
 8009d06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60c3      	str	r3, [r0, #12]
 8009d0c:	4641      	mov	r1, r8
 8009d0e:	f7ff fa09 	bl	8009124 <__mcmp>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	da46      	bge.n	8009da4 <_strtod_l+0x864>
 8009d16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d18:	ea53 030a 	orrs.w	r3, r3, sl
 8009d1c:	d16c      	bne.n	8009df8 <_strtod_l+0x8b8>
 8009d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d168      	bne.n	8009df8 <_strtod_l+0x8b8>
 8009d26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d2a:	0d1b      	lsrs	r3, r3, #20
 8009d2c:	051b      	lsls	r3, r3, #20
 8009d2e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d32:	d961      	bls.n	8009df8 <_strtod_l+0x8b8>
 8009d34:	6963      	ldr	r3, [r4, #20]
 8009d36:	b913      	cbnz	r3, 8009d3e <_strtod_l+0x7fe>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	dd5c      	ble.n	8009df8 <_strtod_l+0x8b8>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	2201      	movs	r2, #1
 8009d42:	9805      	ldr	r0, [sp, #20]
 8009d44:	f7ff f982 	bl	800904c <__lshift>
 8009d48:	4641      	mov	r1, r8
 8009d4a:	4604      	mov	r4, r0
 8009d4c:	f7ff f9ea 	bl	8009124 <__mcmp>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	dd51      	ble.n	8009df8 <_strtod_l+0x8b8>
 8009d54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d58:	9a08      	ldr	r2, [sp, #32]
 8009d5a:	0d1b      	lsrs	r3, r3, #20
 8009d5c:	051b      	lsls	r3, r3, #20
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	d06b      	beq.n	8009e3a <_strtod_l+0x8fa>
 8009d62:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d66:	d868      	bhi.n	8009e3a <_strtod_l+0x8fa>
 8009d68:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d6c:	f67f ae9d 	bls.w	8009aaa <_strtod_l+0x56a>
 8009d70:	4b0a      	ldr	r3, [pc, #40]	@ (8009d9c <_strtod_l+0x85c>)
 8009d72:	4650      	mov	r0, sl
 8009d74:	4659      	mov	r1, fp
 8009d76:	2200      	movs	r2, #0
 8009d78:	f7f6 fc5e 	bl	8000638 <__aeabi_dmul>
 8009d7c:	4b08      	ldr	r3, [pc, #32]	@ (8009da0 <_strtod_l+0x860>)
 8009d7e:	400b      	ands	r3, r1
 8009d80:	4682      	mov	sl, r0
 8009d82:	468b      	mov	fp, r1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f47f ae05 	bne.w	8009994 <_strtod_l+0x454>
 8009d8a:	9a05      	ldr	r2, [sp, #20]
 8009d8c:	2322      	movs	r3, #34	@ 0x22
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	e600      	b.n	8009994 <_strtod_l+0x454>
 8009d92:	bf00      	nop
 8009d94:	0800bd18 	.word	0x0800bd18
 8009d98:	fffffc02 	.word	0xfffffc02
 8009d9c:	39500000 	.word	0x39500000
 8009da0:	7ff00000 	.word	0x7ff00000
 8009da4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009da8:	d165      	bne.n	8009e76 <_strtod_l+0x936>
 8009daa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009db0:	b35a      	cbz	r2, 8009e0a <_strtod_l+0x8ca>
 8009db2:	4a9f      	ldr	r2, [pc, #636]	@ (800a030 <_strtod_l+0xaf0>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d12b      	bne.n	8009e10 <_strtod_l+0x8d0>
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	4651      	mov	r1, sl
 8009dbc:	b303      	cbz	r3, 8009e00 <_strtod_l+0x8c0>
 8009dbe:	4b9d      	ldr	r3, [pc, #628]	@ (800a034 <_strtod_l+0xaf4>)
 8009dc0:	465a      	mov	r2, fp
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dcc:	d81b      	bhi.n	8009e06 <_strtod_l+0x8c6>
 8009dce:	0d1b      	lsrs	r3, r3, #20
 8009dd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	4299      	cmp	r1, r3
 8009dda:	d119      	bne.n	8009e10 <_strtod_l+0x8d0>
 8009ddc:	4b96      	ldr	r3, [pc, #600]	@ (800a038 <_strtod_l+0xaf8>)
 8009dde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d102      	bne.n	8009dea <_strtod_l+0x8aa>
 8009de4:	3101      	adds	r1, #1
 8009de6:	f43f adca 	beq.w	800997e <_strtod_l+0x43e>
 8009dea:	4b92      	ldr	r3, [pc, #584]	@ (800a034 <_strtod_l+0xaf4>)
 8009dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dee:	401a      	ands	r2, r3
 8009df0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009df4:	f04f 0a00 	mov.w	sl, #0
 8009df8:	9b08      	ldr	r3, [sp, #32]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1b8      	bne.n	8009d70 <_strtod_l+0x830>
 8009dfe:	e5c9      	b.n	8009994 <_strtod_l+0x454>
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	e7e8      	b.n	8009dd8 <_strtod_l+0x898>
 8009e06:	4613      	mov	r3, r2
 8009e08:	e7e6      	b.n	8009dd8 <_strtod_l+0x898>
 8009e0a:	ea53 030a 	orrs.w	r3, r3, sl
 8009e0e:	d0a1      	beq.n	8009d54 <_strtod_l+0x814>
 8009e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e12:	b1db      	cbz	r3, 8009e4c <_strtod_l+0x90c>
 8009e14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e16:	4213      	tst	r3, r2
 8009e18:	d0ee      	beq.n	8009df8 <_strtod_l+0x8b8>
 8009e1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1c:	9a08      	ldr	r2, [sp, #32]
 8009e1e:	4650      	mov	r0, sl
 8009e20:	4659      	mov	r1, fp
 8009e22:	b1bb      	cbz	r3, 8009e54 <_strtod_l+0x914>
 8009e24:	f7ff fb6c 	bl	8009500 <sulp>
 8009e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e2c:	ec53 2b10 	vmov	r2, r3, d0
 8009e30:	f7f6 fa4c 	bl	80002cc <__adddf3>
 8009e34:	4682      	mov	sl, r0
 8009e36:	468b      	mov	fp, r1
 8009e38:	e7de      	b.n	8009df8 <_strtod_l+0x8b8>
 8009e3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e46:	f04f 3aff 	mov.w	sl, #4294967295
 8009e4a:	e7d5      	b.n	8009df8 <_strtod_l+0x8b8>
 8009e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e4e:	ea13 0f0a 	tst.w	r3, sl
 8009e52:	e7e1      	b.n	8009e18 <_strtod_l+0x8d8>
 8009e54:	f7ff fb54 	bl	8009500 <sulp>
 8009e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e5c:	ec53 2b10 	vmov	r2, r3, d0
 8009e60:	f7f6 fa32 	bl	80002c8 <__aeabi_dsub>
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	4682      	mov	sl, r0
 8009e6a:	468b      	mov	fp, r1
 8009e6c:	f7f6 fe4c 	bl	8000b08 <__aeabi_dcmpeq>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d0c1      	beq.n	8009df8 <_strtod_l+0x8b8>
 8009e74:	e619      	b.n	8009aaa <_strtod_l+0x56a>
 8009e76:	4641      	mov	r1, r8
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7ff facb 	bl	8009414 <__ratio>
 8009e7e:	ec57 6b10 	vmov	r6, r7, d0
 8009e82:	2200      	movs	r2, #0
 8009e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fe50 	bl	8000b30 <__aeabi_dcmple>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d06f      	beq.n	8009f74 <_strtod_l+0xa34>
 8009e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d17a      	bne.n	8009f90 <_strtod_l+0xa50>
 8009e9a:	f1ba 0f00 	cmp.w	sl, #0
 8009e9e:	d158      	bne.n	8009f52 <_strtod_l+0xa12>
 8009ea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d15a      	bne.n	8009f60 <_strtod_l+0xa20>
 8009eaa:	4b64      	ldr	r3, [pc, #400]	@ (800a03c <_strtod_l+0xafc>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	f7f6 fe33 	bl	8000b1c <__aeabi_dcmplt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d159      	bne.n	8009f6e <_strtod_l+0xa2e>
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4b60      	ldr	r3, [pc, #384]	@ (800a040 <_strtod_l+0xb00>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f7f6 fbb9 	bl	8000638 <__aeabi_dmul>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ece:	9606      	str	r6, [sp, #24]
 8009ed0:	9307      	str	r3, [sp, #28]
 8009ed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ed6:	4d57      	ldr	r5, [pc, #348]	@ (800a034 <_strtod_l+0xaf4>)
 8009ed8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ede:	401d      	ands	r5, r3
 8009ee0:	4b58      	ldr	r3, [pc, #352]	@ (800a044 <_strtod_l+0xb04>)
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	f040 80b2 	bne.w	800a04c <_strtod_l+0xb0c>
 8009ee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009eee:	ec4b ab10 	vmov	d0, sl, fp
 8009ef2:	f7ff f9c7 	bl	8009284 <__ulp>
 8009ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009efa:	ec51 0b10 	vmov	r0, r1, d0
 8009efe:	f7f6 fb9b 	bl	8000638 <__aeabi_dmul>
 8009f02:	4652      	mov	r2, sl
 8009f04:	465b      	mov	r3, fp
 8009f06:	f7f6 f9e1 	bl	80002cc <__adddf3>
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4949      	ldr	r1, [pc, #292]	@ (800a034 <_strtod_l+0xaf4>)
 8009f0e:	4a4e      	ldr	r2, [pc, #312]	@ (800a048 <_strtod_l+0xb08>)
 8009f10:	4019      	ands	r1, r3
 8009f12:	4291      	cmp	r1, r2
 8009f14:	4682      	mov	sl, r0
 8009f16:	d942      	bls.n	8009f9e <_strtod_l+0xa5e>
 8009f18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f1a:	4b47      	ldr	r3, [pc, #284]	@ (800a038 <_strtod_l+0xaf8>)
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d103      	bne.n	8009f28 <_strtod_l+0x9e8>
 8009f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f22:	3301      	adds	r3, #1
 8009f24:	f43f ad2b 	beq.w	800997e <_strtod_l+0x43e>
 8009f28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a038 <_strtod_l+0xaf8>
 8009f2c:	f04f 3aff 	mov.w	sl, #4294967295
 8009f30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f32:	9805      	ldr	r0, [sp, #20]
 8009f34:	f7fe fe72 	bl	8008c1c <_Bfree>
 8009f38:	9805      	ldr	r0, [sp, #20]
 8009f3a:	4649      	mov	r1, r9
 8009f3c:	f7fe fe6e 	bl	8008c1c <_Bfree>
 8009f40:	9805      	ldr	r0, [sp, #20]
 8009f42:	4641      	mov	r1, r8
 8009f44:	f7fe fe6a 	bl	8008c1c <_Bfree>
 8009f48:	9805      	ldr	r0, [sp, #20]
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	f7fe fe66 	bl	8008c1c <_Bfree>
 8009f50:	e618      	b.n	8009b84 <_strtod_l+0x644>
 8009f52:	f1ba 0f01 	cmp.w	sl, #1
 8009f56:	d103      	bne.n	8009f60 <_strtod_l+0xa20>
 8009f58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f43f ada5 	beq.w	8009aaa <_strtod_l+0x56a>
 8009f60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a010 <_strtod_l+0xad0>
 8009f64:	4f35      	ldr	r7, [pc, #212]	@ (800a03c <_strtod_l+0xafc>)
 8009f66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	e7b1      	b.n	8009ed2 <_strtod_l+0x992>
 8009f6e:	4f34      	ldr	r7, [pc, #208]	@ (800a040 <_strtod_l+0xb00>)
 8009f70:	2600      	movs	r6, #0
 8009f72:	e7aa      	b.n	8009eca <_strtod_l+0x98a>
 8009f74:	4b32      	ldr	r3, [pc, #200]	@ (800a040 <_strtod_l+0xb00>)
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f7f6 fb5c 	bl	8000638 <__aeabi_dmul>
 8009f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f82:	4606      	mov	r6, r0
 8009f84:	460f      	mov	r7, r1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d09f      	beq.n	8009eca <_strtod_l+0x98a>
 8009f8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f8e:	e7a0      	b.n	8009ed2 <_strtod_l+0x992>
 8009f90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a018 <_strtod_l+0xad8>
 8009f94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f98:	ec57 6b17 	vmov	r6, r7, d7
 8009f9c:	e799      	b.n	8009ed2 <_strtod_l+0x992>
 8009f9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1c1      	bne.n	8009f30 <_strtod_l+0x9f0>
 8009fac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fb0:	0d1b      	lsrs	r3, r3, #20
 8009fb2:	051b      	lsls	r3, r3, #20
 8009fb4:	429d      	cmp	r5, r3
 8009fb6:	d1bb      	bne.n	8009f30 <_strtod_l+0x9f0>
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 fe9c 	bl	8000cf8 <__aeabi_d2lz>
 8009fc0:	f7f6 fb0c 	bl	80005dc <__aeabi_l2d>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4630      	mov	r0, r6
 8009fca:	4639      	mov	r1, r7
 8009fcc:	f7f6 f97c 	bl	80002c8 <__aeabi_dsub>
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009fd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fde:	ea46 060a 	orr.w	r6, r6, sl
 8009fe2:	431e      	orrs	r6, r3
 8009fe4:	d06f      	beq.n	800a0c6 <_strtod_l+0xb86>
 8009fe6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a020 <_strtod_l+0xae0>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 fd96 	bl	8000b1c <__aeabi_dcmplt>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	f47f accf 	bne.w	8009994 <_strtod_l+0x454>
 8009ff6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a028 <_strtod_l+0xae8>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a000:	f7f6 fdaa 	bl	8000b58 <__aeabi_dcmpgt>
 800a004:	2800      	cmp	r0, #0
 800a006:	d093      	beq.n	8009f30 <_strtod_l+0x9f0>
 800a008:	e4c4      	b.n	8009994 <_strtod_l+0x454>
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w
 800a010:	00000000 	.word	0x00000000
 800a014:	bff00000 	.word	0xbff00000
 800a018:	00000000 	.word	0x00000000
 800a01c:	3ff00000 	.word	0x3ff00000
 800a020:	94a03595 	.word	0x94a03595
 800a024:	3fdfffff 	.word	0x3fdfffff
 800a028:	35afe535 	.word	0x35afe535
 800a02c:	3fe00000 	.word	0x3fe00000
 800a030:	000fffff 	.word	0x000fffff
 800a034:	7ff00000 	.word	0x7ff00000
 800a038:	7fefffff 	.word	0x7fefffff
 800a03c:	3ff00000 	.word	0x3ff00000
 800a040:	3fe00000 	.word	0x3fe00000
 800a044:	7fe00000 	.word	0x7fe00000
 800a048:	7c9fffff 	.word	0x7c9fffff
 800a04c:	9b08      	ldr	r3, [sp, #32]
 800a04e:	b323      	cbz	r3, 800a09a <_strtod_l+0xb5a>
 800a050:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a054:	d821      	bhi.n	800a09a <_strtod_l+0xb5a>
 800a056:	a328      	add	r3, pc, #160	@ (adr r3, 800a0f8 <_strtod_l+0xbb8>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 fd66 	bl	8000b30 <__aeabi_dcmple>
 800a064:	b1a0      	cbz	r0, 800a090 <_strtod_l+0xb50>
 800a066:	4639      	mov	r1, r7
 800a068:	4630      	mov	r0, r6
 800a06a:	f7f6 fdbd 	bl	8000be8 <__aeabi_d2uiz>
 800a06e:	2801      	cmp	r0, #1
 800a070:	bf38      	it	cc
 800a072:	2001      	movcc	r0, #1
 800a074:	f7f6 fa66 	bl	8000544 <__aeabi_ui2d>
 800a078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	b9fb      	cbnz	r3, 800a0c0 <_strtod_l+0xb80>
 800a080:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a084:	9014      	str	r0, [sp, #80]	@ 0x50
 800a086:	9315      	str	r3, [sp, #84]	@ 0x54
 800a088:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a08c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a090:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a092:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a096:	1b5b      	subs	r3, r3, r5
 800a098:	9311      	str	r3, [sp, #68]	@ 0x44
 800a09a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a09e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0a2:	f7ff f8ef 	bl	8009284 <__ulp>
 800a0a6:	4650      	mov	r0, sl
 800a0a8:	ec53 2b10 	vmov	r2, r3, d0
 800a0ac:	4659      	mov	r1, fp
 800a0ae:	f7f6 fac3 	bl	8000638 <__aeabi_dmul>
 800a0b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0b6:	f7f6 f909 	bl	80002cc <__adddf3>
 800a0ba:	4682      	mov	sl, r0
 800a0bc:	468b      	mov	fp, r1
 800a0be:	e770      	b.n	8009fa2 <_strtod_l+0xa62>
 800a0c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0c4:	e7e0      	b.n	800a088 <_strtod_l+0xb48>
 800a0c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a100 <_strtod_l+0xbc0>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fd26 	bl	8000b1c <__aeabi_dcmplt>
 800a0d0:	e798      	b.n	800a004 <_strtod_l+0xac4>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a0d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	f7ff ba6d 	b.w	80095ba <_strtod_l+0x7a>
 800a0e0:	2a65      	cmp	r2, #101	@ 0x65
 800a0e2:	f43f ab66 	beq.w	80097b2 <_strtod_l+0x272>
 800a0e6:	2a45      	cmp	r2, #69	@ 0x45
 800a0e8:	f43f ab63 	beq.w	80097b2 <_strtod_l+0x272>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f7ff bb9e 	b.w	800982e <_strtod_l+0x2ee>
 800a0f2:	bf00      	nop
 800a0f4:	f3af 8000 	nop.w
 800a0f8:	ffc00000 	.word	0xffc00000
 800a0fc:	41dfffff 	.word	0x41dfffff
 800a100:	94a03595 	.word	0x94a03595
 800a104:	3fcfffff 	.word	0x3fcfffff

0800a108 <_strtod_r>:
 800a108:	4b01      	ldr	r3, [pc, #4]	@ (800a110 <_strtod_r+0x8>)
 800a10a:	f7ff ba19 	b.w	8009540 <_strtod_l>
 800a10e:	bf00      	nop
 800a110:	20001ccc 	.word	0x20001ccc

0800a114 <_strtol_l.constprop.0>:
 800a114:	2b24      	cmp	r3, #36	@ 0x24
 800a116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a11a:	4686      	mov	lr, r0
 800a11c:	4690      	mov	r8, r2
 800a11e:	d801      	bhi.n	800a124 <_strtol_l.constprop.0+0x10>
 800a120:	2b01      	cmp	r3, #1
 800a122:	d106      	bne.n	800a132 <_strtol_l.constprop.0+0x1e>
 800a124:	f7fd fe6e 	bl	8007e04 <__errno>
 800a128:	2316      	movs	r3, #22
 800a12a:	6003      	str	r3, [r0, #0]
 800a12c:	2000      	movs	r0, #0
 800a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a132:	4834      	ldr	r0, [pc, #208]	@ (800a204 <_strtol_l.constprop.0+0xf0>)
 800a134:	460d      	mov	r5, r1
 800a136:	462a      	mov	r2, r5
 800a138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a13c:	5d06      	ldrb	r6, [r0, r4]
 800a13e:	f016 0608 	ands.w	r6, r6, #8
 800a142:	d1f8      	bne.n	800a136 <_strtol_l.constprop.0+0x22>
 800a144:	2c2d      	cmp	r4, #45	@ 0x2d
 800a146:	d12d      	bne.n	800a1a4 <_strtol_l.constprop.0+0x90>
 800a148:	782c      	ldrb	r4, [r5, #0]
 800a14a:	2601      	movs	r6, #1
 800a14c:	1c95      	adds	r5, r2, #2
 800a14e:	f033 0210 	bics.w	r2, r3, #16
 800a152:	d109      	bne.n	800a168 <_strtol_l.constprop.0+0x54>
 800a154:	2c30      	cmp	r4, #48	@ 0x30
 800a156:	d12a      	bne.n	800a1ae <_strtol_l.constprop.0+0x9a>
 800a158:	782a      	ldrb	r2, [r5, #0]
 800a15a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a15e:	2a58      	cmp	r2, #88	@ 0x58
 800a160:	d125      	bne.n	800a1ae <_strtol_l.constprop.0+0x9a>
 800a162:	786c      	ldrb	r4, [r5, #1]
 800a164:	2310      	movs	r3, #16
 800a166:	3502      	adds	r5, #2
 800a168:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a16c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a170:	2200      	movs	r2, #0
 800a172:	fbbc f9f3 	udiv	r9, ip, r3
 800a176:	4610      	mov	r0, r2
 800a178:	fb03 ca19 	mls	sl, r3, r9, ip
 800a17c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a180:	2f09      	cmp	r7, #9
 800a182:	d81b      	bhi.n	800a1bc <_strtol_l.constprop.0+0xa8>
 800a184:	463c      	mov	r4, r7
 800a186:	42a3      	cmp	r3, r4
 800a188:	dd27      	ble.n	800a1da <_strtol_l.constprop.0+0xc6>
 800a18a:	1c57      	adds	r7, r2, #1
 800a18c:	d007      	beq.n	800a19e <_strtol_l.constprop.0+0x8a>
 800a18e:	4581      	cmp	r9, r0
 800a190:	d320      	bcc.n	800a1d4 <_strtol_l.constprop.0+0xc0>
 800a192:	d101      	bne.n	800a198 <_strtol_l.constprop.0+0x84>
 800a194:	45a2      	cmp	sl, r4
 800a196:	db1d      	blt.n	800a1d4 <_strtol_l.constprop.0+0xc0>
 800a198:	fb00 4003 	mla	r0, r0, r3, r4
 800a19c:	2201      	movs	r2, #1
 800a19e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1a2:	e7eb      	b.n	800a17c <_strtol_l.constprop.0+0x68>
 800a1a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a1a6:	bf04      	itt	eq
 800a1a8:	782c      	ldrbeq	r4, [r5, #0]
 800a1aa:	1c95      	addeq	r5, r2, #2
 800a1ac:	e7cf      	b.n	800a14e <_strtol_l.constprop.0+0x3a>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1da      	bne.n	800a168 <_strtol_l.constprop.0+0x54>
 800a1b2:	2c30      	cmp	r4, #48	@ 0x30
 800a1b4:	bf0c      	ite	eq
 800a1b6:	2308      	moveq	r3, #8
 800a1b8:	230a      	movne	r3, #10
 800a1ba:	e7d5      	b.n	800a168 <_strtol_l.constprop.0+0x54>
 800a1bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a1c0:	2f19      	cmp	r7, #25
 800a1c2:	d801      	bhi.n	800a1c8 <_strtol_l.constprop.0+0xb4>
 800a1c4:	3c37      	subs	r4, #55	@ 0x37
 800a1c6:	e7de      	b.n	800a186 <_strtol_l.constprop.0+0x72>
 800a1c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1cc:	2f19      	cmp	r7, #25
 800a1ce:	d804      	bhi.n	800a1da <_strtol_l.constprop.0+0xc6>
 800a1d0:	3c57      	subs	r4, #87	@ 0x57
 800a1d2:	e7d8      	b.n	800a186 <_strtol_l.constprop.0+0x72>
 800a1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d8:	e7e1      	b.n	800a19e <_strtol_l.constprop.0+0x8a>
 800a1da:	1c53      	adds	r3, r2, #1
 800a1dc:	d108      	bne.n	800a1f0 <_strtol_l.constprop.0+0xdc>
 800a1de:	2322      	movs	r3, #34	@ 0x22
 800a1e0:	f8ce 3000 	str.w	r3, [lr]
 800a1e4:	4660      	mov	r0, ip
 800a1e6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ea:	d0a0      	beq.n	800a12e <_strtol_l.constprop.0+0x1a>
 800a1ec:	1e69      	subs	r1, r5, #1
 800a1ee:	e006      	b.n	800a1fe <_strtol_l.constprop.0+0xea>
 800a1f0:	b106      	cbz	r6, 800a1f4 <_strtol_l.constprop.0+0xe0>
 800a1f2:	4240      	negs	r0, r0
 800a1f4:	f1b8 0f00 	cmp.w	r8, #0
 800a1f8:	d099      	beq.n	800a12e <_strtol_l.constprop.0+0x1a>
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	d1f6      	bne.n	800a1ec <_strtol_l.constprop.0+0xd8>
 800a1fe:	f8c8 1000 	str.w	r1, [r8]
 800a202:	e794      	b.n	800a12e <_strtol_l.constprop.0+0x1a>
 800a204:	0800bd41 	.word	0x0800bd41

0800a208 <_strtol_r>:
 800a208:	f7ff bf84 	b.w	800a114 <_strtol_l.constprop.0>

0800a20c <__ssputs_r>:
 800a20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a210:	688e      	ldr	r6, [r1, #8]
 800a212:	461f      	mov	r7, r3
 800a214:	42be      	cmp	r6, r7
 800a216:	680b      	ldr	r3, [r1, #0]
 800a218:	4682      	mov	sl, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	4690      	mov	r8, r2
 800a21e:	d82d      	bhi.n	800a27c <__ssputs_r+0x70>
 800a220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a228:	d026      	beq.n	800a278 <__ssputs_r+0x6c>
 800a22a:	6965      	ldr	r5, [r4, #20]
 800a22c:	6909      	ldr	r1, [r1, #16]
 800a22e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a232:	eba3 0901 	sub.w	r9, r3, r1
 800a236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a23a:	1c7b      	adds	r3, r7, #1
 800a23c:	444b      	add	r3, r9
 800a23e:	106d      	asrs	r5, r5, #1
 800a240:	429d      	cmp	r5, r3
 800a242:	bf38      	it	cc
 800a244:	461d      	movcc	r5, r3
 800a246:	0553      	lsls	r3, r2, #21
 800a248:	d527      	bpl.n	800a29a <__ssputs_r+0x8e>
 800a24a:	4629      	mov	r1, r5
 800a24c:	f7fc fb88 	bl	8006960 <_malloc_r>
 800a250:	4606      	mov	r6, r0
 800a252:	b360      	cbz	r0, 800a2ae <__ssputs_r+0xa2>
 800a254:	6921      	ldr	r1, [r4, #16]
 800a256:	464a      	mov	r2, r9
 800a258:	f000 fe1a 	bl	800ae90 <memcpy>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	6126      	str	r6, [r4, #16]
 800a26a:	6165      	str	r5, [r4, #20]
 800a26c:	444e      	add	r6, r9
 800a26e:	eba5 0509 	sub.w	r5, r5, r9
 800a272:	6026      	str	r6, [r4, #0]
 800a274:	60a5      	str	r5, [r4, #8]
 800a276:	463e      	mov	r6, r7
 800a278:	42be      	cmp	r6, r7
 800a27a:	d900      	bls.n	800a27e <__ssputs_r+0x72>
 800a27c:	463e      	mov	r6, r7
 800a27e:	6820      	ldr	r0, [r4, #0]
 800a280:	4632      	mov	r2, r6
 800a282:	4641      	mov	r1, r8
 800a284:	f000 fdb5 	bl	800adf2 <memmove>
 800a288:	68a3      	ldr	r3, [r4, #8]
 800a28a:	1b9b      	subs	r3, r3, r6
 800a28c:	60a3      	str	r3, [r4, #8]
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	4433      	add	r3, r6
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	2000      	movs	r0, #0
 800a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29a:	462a      	mov	r2, r5
 800a29c:	f001 f979 	bl	800b592 <_realloc_r>
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1e0      	bne.n	800a268 <__ssputs_r+0x5c>
 800a2a6:	6921      	ldr	r1, [r4, #16]
 800a2a8:	4650      	mov	r0, sl
 800a2aa:	f7fe fc2d 	bl	8008b08 <_free_r>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	f8ca 3000 	str.w	r3, [sl]
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e7e9      	b.n	800a296 <__ssputs_r+0x8a>
	...

0800a2c4 <_svfiprintf_r>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	898b      	ldrh	r3, [r1, #12]
 800a2cc:	061b      	lsls	r3, r3, #24
 800a2ce:	b09d      	sub	sp, #116	@ 0x74
 800a2d0:	4607      	mov	r7, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	4614      	mov	r4, r2
 800a2d6:	d510      	bpl.n	800a2fa <_svfiprintf_r+0x36>
 800a2d8:	690b      	ldr	r3, [r1, #16]
 800a2da:	b973      	cbnz	r3, 800a2fa <_svfiprintf_r+0x36>
 800a2dc:	2140      	movs	r1, #64	@ 0x40
 800a2de:	f7fc fb3f 	bl	8006960 <_malloc_r>
 800a2e2:	6028      	str	r0, [r5, #0]
 800a2e4:	6128      	str	r0, [r5, #16]
 800a2e6:	b930      	cbnz	r0, 800a2f6 <_svfiprintf_r+0x32>
 800a2e8:	230c      	movs	r3, #12
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	b01d      	add	sp, #116	@ 0x74
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	2340      	movs	r3, #64	@ 0x40
 800a2f8:	616b      	str	r3, [r5, #20]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2fe:	2320      	movs	r3, #32
 800a300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a304:	f8cd 800c 	str.w	r8, [sp, #12]
 800a308:	2330      	movs	r3, #48	@ 0x30
 800a30a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4a8 <_svfiprintf_r+0x1e4>
 800a30e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a312:	f04f 0901 	mov.w	r9, #1
 800a316:	4623      	mov	r3, r4
 800a318:	469a      	mov	sl, r3
 800a31a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a31e:	b10a      	cbz	r2, 800a324 <_svfiprintf_r+0x60>
 800a320:	2a25      	cmp	r2, #37	@ 0x25
 800a322:	d1f9      	bne.n	800a318 <_svfiprintf_r+0x54>
 800a324:	ebba 0b04 	subs.w	fp, sl, r4
 800a328:	d00b      	beq.n	800a342 <_svfiprintf_r+0x7e>
 800a32a:	465b      	mov	r3, fp
 800a32c:	4622      	mov	r2, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff ff6b 	bl	800a20c <__ssputs_r>
 800a336:	3001      	adds	r0, #1
 800a338:	f000 80a7 	beq.w	800a48a <_svfiprintf_r+0x1c6>
 800a33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a33e:	445a      	add	r2, fp
 800a340:	9209      	str	r2, [sp, #36]	@ 0x24
 800a342:	f89a 3000 	ldrb.w	r3, [sl]
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 809f 	beq.w	800a48a <_svfiprintf_r+0x1c6>
 800a34c:	2300      	movs	r3, #0
 800a34e:	f04f 32ff 	mov.w	r2, #4294967295
 800a352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a356:	f10a 0a01 	add.w	sl, sl, #1
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	9307      	str	r3, [sp, #28]
 800a35e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a362:	931a      	str	r3, [sp, #104]	@ 0x68
 800a364:	4654      	mov	r4, sl
 800a366:	2205      	movs	r2, #5
 800a368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36c:	484e      	ldr	r0, [pc, #312]	@ (800a4a8 <_svfiprintf_r+0x1e4>)
 800a36e:	f7f5 ff4f 	bl	8000210 <memchr>
 800a372:	9a04      	ldr	r2, [sp, #16]
 800a374:	b9d8      	cbnz	r0, 800a3ae <_svfiprintf_r+0xea>
 800a376:	06d0      	lsls	r0, r2, #27
 800a378:	bf44      	itt	mi
 800a37a:	2320      	movmi	r3, #32
 800a37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a380:	0711      	lsls	r1, r2, #28
 800a382:	bf44      	itt	mi
 800a384:	232b      	movmi	r3, #43	@ 0x2b
 800a386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a38a:	f89a 3000 	ldrb.w	r3, [sl]
 800a38e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a390:	d015      	beq.n	800a3be <_svfiprintf_r+0xfa>
 800a392:	9a07      	ldr	r2, [sp, #28]
 800a394:	4654      	mov	r4, sl
 800a396:	2000      	movs	r0, #0
 800a398:	f04f 0c0a 	mov.w	ip, #10
 800a39c:	4621      	mov	r1, r4
 800a39e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3a2:	3b30      	subs	r3, #48	@ 0x30
 800a3a4:	2b09      	cmp	r3, #9
 800a3a6:	d94b      	bls.n	800a440 <_svfiprintf_r+0x17c>
 800a3a8:	b1b0      	cbz	r0, 800a3d8 <_svfiprintf_r+0x114>
 800a3aa:	9207      	str	r2, [sp, #28]
 800a3ac:	e014      	b.n	800a3d8 <_svfiprintf_r+0x114>
 800a3ae:	eba0 0308 	sub.w	r3, r0, r8
 800a3b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	46a2      	mov	sl, r4
 800a3bc:	e7d2      	b.n	800a364 <_svfiprintf_r+0xa0>
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	1d19      	adds	r1, r3, #4
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	9103      	str	r1, [sp, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bfbb      	ittet	lt
 800a3ca:	425b      	neglt	r3, r3
 800a3cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a3d0:	9307      	strge	r3, [sp, #28]
 800a3d2:	9307      	strlt	r3, [sp, #28]
 800a3d4:	bfb8      	it	lt
 800a3d6:	9204      	strlt	r2, [sp, #16]
 800a3d8:	7823      	ldrb	r3, [r4, #0]
 800a3da:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3dc:	d10a      	bne.n	800a3f4 <_svfiprintf_r+0x130>
 800a3de:	7863      	ldrb	r3, [r4, #1]
 800a3e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3e2:	d132      	bne.n	800a44a <_svfiprintf_r+0x186>
 800a3e4:	9b03      	ldr	r3, [sp, #12]
 800a3e6:	1d1a      	adds	r2, r3, #4
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	9203      	str	r2, [sp, #12]
 800a3ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3f0:	3402      	adds	r4, #2
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4b8 <_svfiprintf_r+0x1f4>
 800a3f8:	7821      	ldrb	r1, [r4, #0]
 800a3fa:	2203      	movs	r2, #3
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	f7f5 ff07 	bl	8000210 <memchr>
 800a402:	b138      	cbz	r0, 800a414 <_svfiprintf_r+0x150>
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	eba0 000a 	sub.w	r0, r0, sl
 800a40a:	2240      	movs	r2, #64	@ 0x40
 800a40c:	4082      	lsls	r2, r0
 800a40e:	4313      	orrs	r3, r2
 800a410:	3401      	adds	r4, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a418:	4824      	ldr	r0, [pc, #144]	@ (800a4ac <_svfiprintf_r+0x1e8>)
 800a41a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a41e:	2206      	movs	r2, #6
 800a420:	f7f5 fef6 	bl	8000210 <memchr>
 800a424:	2800      	cmp	r0, #0
 800a426:	d036      	beq.n	800a496 <_svfiprintf_r+0x1d2>
 800a428:	4b21      	ldr	r3, [pc, #132]	@ (800a4b0 <_svfiprintf_r+0x1ec>)
 800a42a:	bb1b      	cbnz	r3, 800a474 <_svfiprintf_r+0x1b0>
 800a42c:	9b03      	ldr	r3, [sp, #12]
 800a42e:	3307      	adds	r3, #7
 800a430:	f023 0307 	bic.w	r3, r3, #7
 800a434:	3308      	adds	r3, #8
 800a436:	9303      	str	r3, [sp, #12]
 800a438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a43a:	4433      	add	r3, r6
 800a43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a43e:	e76a      	b.n	800a316 <_svfiprintf_r+0x52>
 800a440:	fb0c 3202 	mla	r2, ip, r2, r3
 800a444:	460c      	mov	r4, r1
 800a446:	2001      	movs	r0, #1
 800a448:	e7a8      	b.n	800a39c <_svfiprintf_r+0xd8>
 800a44a:	2300      	movs	r3, #0
 800a44c:	3401      	adds	r4, #1
 800a44e:	9305      	str	r3, [sp, #20]
 800a450:	4619      	mov	r1, r3
 800a452:	f04f 0c0a 	mov.w	ip, #10
 800a456:	4620      	mov	r0, r4
 800a458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a45c:	3a30      	subs	r2, #48	@ 0x30
 800a45e:	2a09      	cmp	r2, #9
 800a460:	d903      	bls.n	800a46a <_svfiprintf_r+0x1a6>
 800a462:	2b00      	cmp	r3, #0
 800a464:	d0c6      	beq.n	800a3f4 <_svfiprintf_r+0x130>
 800a466:	9105      	str	r1, [sp, #20]
 800a468:	e7c4      	b.n	800a3f4 <_svfiprintf_r+0x130>
 800a46a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a46e:	4604      	mov	r4, r0
 800a470:	2301      	movs	r3, #1
 800a472:	e7f0      	b.n	800a456 <_svfiprintf_r+0x192>
 800a474:	ab03      	add	r3, sp, #12
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	462a      	mov	r2, r5
 800a47a:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b4 <_svfiprintf_r+0x1f0>)
 800a47c:	a904      	add	r1, sp, #16
 800a47e:	4638      	mov	r0, r7
 800a480:	f7fc fb9a 	bl	8006bb8 <_printf_float>
 800a484:	1c42      	adds	r2, r0, #1
 800a486:	4606      	mov	r6, r0
 800a488:	d1d6      	bne.n	800a438 <_svfiprintf_r+0x174>
 800a48a:	89ab      	ldrh	r3, [r5, #12]
 800a48c:	065b      	lsls	r3, r3, #25
 800a48e:	f53f af2d 	bmi.w	800a2ec <_svfiprintf_r+0x28>
 800a492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a494:	e72c      	b.n	800a2f0 <_svfiprintf_r+0x2c>
 800a496:	ab03      	add	r3, sp, #12
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	462a      	mov	r2, r5
 800a49c:	4b05      	ldr	r3, [pc, #20]	@ (800a4b4 <_svfiprintf_r+0x1f0>)
 800a49e:	a904      	add	r1, sp, #16
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7fc fe21 	bl	80070e8 <_printf_i>
 800a4a6:	e7ed      	b.n	800a484 <_svfiprintf_r+0x1c0>
 800a4a8:	0800be41 	.word	0x0800be41
 800a4ac:	0800be4b 	.word	0x0800be4b
 800a4b0:	08006bb9 	.word	0x08006bb9
 800a4b4:	0800a20d 	.word	0x0800a20d
 800a4b8:	0800be47 	.word	0x0800be47

0800a4bc <_sungetc_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	1c4b      	adds	r3, r1, #1
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	d103      	bne.n	800a4cc <_sungetc_r+0x10>
 800a4c4:	f04f 35ff 	mov.w	r5, #4294967295
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	8993      	ldrh	r3, [r2, #12]
 800a4ce:	f023 0320 	bic.w	r3, r3, #32
 800a4d2:	8193      	strh	r3, [r2, #12]
 800a4d4:	6853      	ldr	r3, [r2, #4]
 800a4d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a4d8:	b2cd      	uxtb	r5, r1
 800a4da:	b18a      	cbz	r2, 800a500 <_sungetc_r+0x44>
 800a4dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	dd08      	ble.n	800a4f4 <_sungetc_r+0x38>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	6022      	str	r2, [r4, #0]
 800a4e8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	6063      	str	r3, [r4, #4]
 800a4f2:	e7e9      	b.n	800a4c8 <_sungetc_r+0xc>
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	f000 fc42 	bl	800ad7e <__submore>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d0f1      	beq.n	800a4e2 <_sungetc_r+0x26>
 800a4fe:	e7e1      	b.n	800a4c4 <_sungetc_r+0x8>
 800a500:	6921      	ldr	r1, [r4, #16]
 800a502:	6822      	ldr	r2, [r4, #0]
 800a504:	b141      	cbz	r1, 800a518 <_sungetc_r+0x5c>
 800a506:	4291      	cmp	r1, r2
 800a508:	d206      	bcs.n	800a518 <_sungetc_r+0x5c>
 800a50a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a50e:	42a9      	cmp	r1, r5
 800a510:	d102      	bne.n	800a518 <_sungetc_r+0x5c>
 800a512:	3a01      	subs	r2, #1
 800a514:	6022      	str	r2, [r4, #0]
 800a516:	e7ea      	b.n	800a4ee <_sungetc_r+0x32>
 800a518:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a51c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a520:	6363      	str	r3, [r4, #52]	@ 0x34
 800a522:	2303      	movs	r3, #3
 800a524:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a526:	4623      	mov	r3, r4
 800a528:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	2301      	movs	r3, #1
 800a530:	e7de      	b.n	800a4f0 <_sungetc_r+0x34>

0800a532 <__ssrefill_r>:
 800a532:	b510      	push	{r4, lr}
 800a534:	460c      	mov	r4, r1
 800a536:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a538:	b169      	cbz	r1, 800a556 <__ssrefill_r+0x24>
 800a53a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a53e:	4299      	cmp	r1, r3
 800a540:	d001      	beq.n	800a546 <__ssrefill_r+0x14>
 800a542:	f7fe fae1 	bl	8008b08 <_free_r>
 800a546:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a548:	6063      	str	r3, [r4, #4]
 800a54a:	2000      	movs	r0, #0
 800a54c:	6360      	str	r0, [r4, #52]	@ 0x34
 800a54e:	b113      	cbz	r3, 800a556 <__ssrefill_r+0x24>
 800a550:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	bd10      	pop	{r4, pc}
 800a556:	6923      	ldr	r3, [r4, #16]
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	2300      	movs	r3, #0
 800a55c:	6063      	str	r3, [r4, #4]
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f043 0320 	orr.w	r3, r3, #32
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	f04f 30ff 	mov.w	r0, #4294967295
 800a56a:	e7f3      	b.n	800a554 <__ssrefill_r+0x22>

0800a56c <__ssvfiscanf_r>:
 800a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a576:	2100      	movs	r1, #0
 800a578:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a57c:	49a5      	ldr	r1, [pc, #660]	@ (800a814 <__ssvfiscanf_r+0x2a8>)
 800a57e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a580:	f10d 0804 	add.w	r8, sp, #4
 800a584:	49a4      	ldr	r1, [pc, #656]	@ (800a818 <__ssvfiscanf_r+0x2ac>)
 800a586:	4fa5      	ldr	r7, [pc, #660]	@ (800a81c <__ssvfiscanf_r+0x2b0>)
 800a588:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a58c:	4606      	mov	r6, r0
 800a58e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	7813      	ldrb	r3, [r2, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 8158 	beq.w	800a84a <__ssvfiscanf_r+0x2de>
 800a59a:	5cf9      	ldrb	r1, [r7, r3]
 800a59c:	f011 0108 	ands.w	r1, r1, #8
 800a5a0:	f102 0501 	add.w	r5, r2, #1
 800a5a4:	d019      	beq.n	800a5da <__ssvfiscanf_r+0x6e>
 800a5a6:	6863      	ldr	r3, [r4, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	dd0f      	ble.n	800a5cc <__ssvfiscanf_r+0x60>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	781a      	ldrb	r2, [r3, #0]
 800a5b0:	5cba      	ldrb	r2, [r7, r2]
 800a5b2:	0712      	lsls	r2, r2, #28
 800a5b4:	d401      	bmi.n	800a5ba <__ssvfiscanf_r+0x4e>
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	e7eb      	b.n	800a592 <__ssvfiscanf_r+0x26>
 800a5ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a5bc:	3201      	adds	r2, #1
 800a5be:	9245      	str	r2, [sp, #276]	@ 0x114
 800a5c0:	6862      	ldr	r2, [r4, #4]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	3a01      	subs	r2, #1
 800a5c6:	6062      	str	r2, [r4, #4]
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	e7ec      	b.n	800a5a6 <__ssvfiscanf_r+0x3a>
 800a5cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4798      	blx	r3
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d0e9      	beq.n	800a5ac <__ssvfiscanf_r+0x40>
 800a5d8:	e7ed      	b.n	800a5b6 <__ssvfiscanf_r+0x4a>
 800a5da:	2b25      	cmp	r3, #37	@ 0x25
 800a5dc:	d012      	beq.n	800a604 <__ssvfiscanf_r+0x98>
 800a5de:	4699      	mov	r9, r3
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f340 8093 	ble.w	800a70e <__ssvfiscanf_r+0x1a2>
 800a5e8:	6822      	ldr	r2, [r4, #0]
 800a5ea:	7813      	ldrb	r3, [r2, #0]
 800a5ec:	454b      	cmp	r3, r9
 800a5ee:	f040 812c 	bne.w	800a84a <__ssvfiscanf_r+0x2de>
 800a5f2:	6863      	ldr	r3, [r4, #4]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	6063      	str	r3, [r4, #4]
 800a5f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	9345      	str	r3, [sp, #276]	@ 0x114
 800a602:	e7d8      	b.n	800a5b6 <__ssvfiscanf_r+0x4a>
 800a604:	9141      	str	r1, [sp, #260]	@ 0x104
 800a606:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a608:	7853      	ldrb	r3, [r2, #1]
 800a60a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a60c:	bf02      	ittt	eq
 800a60e:	2310      	moveq	r3, #16
 800a610:	1c95      	addeq	r5, r2, #2
 800a612:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a614:	220a      	movs	r2, #10
 800a616:	46a9      	mov	r9, r5
 800a618:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a61c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a620:	2b09      	cmp	r3, #9
 800a622:	d91e      	bls.n	800a662 <__ssvfiscanf_r+0xf6>
 800a624:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a820 <__ssvfiscanf_r+0x2b4>
 800a628:	2203      	movs	r2, #3
 800a62a:	4650      	mov	r0, sl
 800a62c:	f7f5 fdf0 	bl	8000210 <memchr>
 800a630:	b138      	cbz	r0, 800a642 <__ssvfiscanf_r+0xd6>
 800a632:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a634:	eba0 000a 	sub.w	r0, r0, sl
 800a638:	2301      	movs	r3, #1
 800a63a:	4083      	lsls	r3, r0
 800a63c:	4313      	orrs	r3, r2
 800a63e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a640:	464d      	mov	r5, r9
 800a642:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a646:	2b78      	cmp	r3, #120	@ 0x78
 800a648:	d806      	bhi.n	800a658 <__ssvfiscanf_r+0xec>
 800a64a:	2b57      	cmp	r3, #87	@ 0x57
 800a64c:	d810      	bhi.n	800a670 <__ssvfiscanf_r+0x104>
 800a64e:	2b25      	cmp	r3, #37	@ 0x25
 800a650:	d0c5      	beq.n	800a5de <__ssvfiscanf_r+0x72>
 800a652:	d857      	bhi.n	800a704 <__ssvfiscanf_r+0x198>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d065      	beq.n	800a724 <__ssvfiscanf_r+0x1b8>
 800a658:	2303      	movs	r3, #3
 800a65a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a65c:	230a      	movs	r3, #10
 800a65e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a660:	e078      	b.n	800a754 <__ssvfiscanf_r+0x1e8>
 800a662:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a664:	fb02 1103 	mla	r1, r2, r3, r1
 800a668:	3930      	subs	r1, #48	@ 0x30
 800a66a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a66c:	464d      	mov	r5, r9
 800a66e:	e7d2      	b.n	800a616 <__ssvfiscanf_r+0xaa>
 800a670:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a674:	2a20      	cmp	r2, #32
 800a676:	d8ef      	bhi.n	800a658 <__ssvfiscanf_r+0xec>
 800a678:	a101      	add	r1, pc, #4	@ (adr r1, 800a680 <__ssvfiscanf_r+0x114>)
 800a67a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a67e:	bf00      	nop
 800a680:	0800a733 	.word	0x0800a733
 800a684:	0800a659 	.word	0x0800a659
 800a688:	0800a659 	.word	0x0800a659
 800a68c:	0800a78d 	.word	0x0800a78d
 800a690:	0800a659 	.word	0x0800a659
 800a694:	0800a659 	.word	0x0800a659
 800a698:	0800a659 	.word	0x0800a659
 800a69c:	0800a659 	.word	0x0800a659
 800a6a0:	0800a659 	.word	0x0800a659
 800a6a4:	0800a659 	.word	0x0800a659
 800a6a8:	0800a659 	.word	0x0800a659
 800a6ac:	0800a7a3 	.word	0x0800a7a3
 800a6b0:	0800a789 	.word	0x0800a789
 800a6b4:	0800a70b 	.word	0x0800a70b
 800a6b8:	0800a70b 	.word	0x0800a70b
 800a6bc:	0800a70b 	.word	0x0800a70b
 800a6c0:	0800a659 	.word	0x0800a659
 800a6c4:	0800a745 	.word	0x0800a745
 800a6c8:	0800a659 	.word	0x0800a659
 800a6cc:	0800a659 	.word	0x0800a659
 800a6d0:	0800a659 	.word	0x0800a659
 800a6d4:	0800a659 	.word	0x0800a659
 800a6d8:	0800a7b3 	.word	0x0800a7b3
 800a6dc:	0800a74d 	.word	0x0800a74d
 800a6e0:	0800a72b 	.word	0x0800a72b
 800a6e4:	0800a659 	.word	0x0800a659
 800a6e8:	0800a659 	.word	0x0800a659
 800a6ec:	0800a7af 	.word	0x0800a7af
 800a6f0:	0800a659 	.word	0x0800a659
 800a6f4:	0800a789 	.word	0x0800a789
 800a6f8:	0800a659 	.word	0x0800a659
 800a6fc:	0800a659 	.word	0x0800a659
 800a700:	0800a733 	.word	0x0800a733
 800a704:	3b45      	subs	r3, #69	@ 0x45
 800a706:	2b02      	cmp	r3, #2
 800a708:	d8a6      	bhi.n	800a658 <__ssvfiscanf_r+0xec>
 800a70a:	2305      	movs	r3, #5
 800a70c:	e021      	b.n	800a752 <__ssvfiscanf_r+0x1e6>
 800a70e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a710:	4621      	mov	r1, r4
 800a712:	4630      	mov	r0, r6
 800a714:	4798      	blx	r3
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f af66 	beq.w	800a5e8 <__ssvfiscanf_r+0x7c>
 800a71c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a71e:	2800      	cmp	r0, #0
 800a720:	f040 808b 	bne.w	800a83a <__ssvfiscanf_r+0x2ce>
 800a724:	f04f 30ff 	mov.w	r0, #4294967295
 800a728:	e08b      	b.n	800a842 <__ssvfiscanf_r+0x2d6>
 800a72a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a72c:	f042 0220 	orr.w	r2, r2, #32
 800a730:	9241      	str	r2, [sp, #260]	@ 0x104
 800a732:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a738:	9241      	str	r2, [sp, #260]	@ 0x104
 800a73a:	2210      	movs	r2, #16
 800a73c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a73e:	9242      	str	r2, [sp, #264]	@ 0x108
 800a740:	d902      	bls.n	800a748 <__ssvfiscanf_r+0x1dc>
 800a742:	e005      	b.n	800a750 <__ssvfiscanf_r+0x1e4>
 800a744:	2300      	movs	r3, #0
 800a746:	9342      	str	r3, [sp, #264]	@ 0x108
 800a748:	2303      	movs	r3, #3
 800a74a:	e002      	b.n	800a752 <__ssvfiscanf_r+0x1e6>
 800a74c:	2308      	movs	r3, #8
 800a74e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a750:	2304      	movs	r3, #4
 800a752:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a754:	6863      	ldr	r3, [r4, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	dd39      	ble.n	800a7ce <__ssvfiscanf_r+0x262>
 800a75a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a75c:	0659      	lsls	r1, r3, #25
 800a75e:	d404      	bmi.n	800a76a <__ssvfiscanf_r+0x1fe>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	781a      	ldrb	r2, [r3, #0]
 800a764:	5cba      	ldrb	r2, [r7, r2]
 800a766:	0712      	lsls	r2, r2, #28
 800a768:	d438      	bmi.n	800a7dc <__ssvfiscanf_r+0x270>
 800a76a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	dc47      	bgt.n	800a800 <__ssvfiscanf_r+0x294>
 800a770:	466b      	mov	r3, sp
 800a772:	4622      	mov	r2, r4
 800a774:	a941      	add	r1, sp, #260	@ 0x104
 800a776:	4630      	mov	r0, r6
 800a778:	f000 f86c 	bl	800a854 <_scanf_chars>
 800a77c:	2801      	cmp	r0, #1
 800a77e:	d064      	beq.n	800a84a <__ssvfiscanf_r+0x2de>
 800a780:	2802      	cmp	r0, #2
 800a782:	f47f af18 	bne.w	800a5b6 <__ssvfiscanf_r+0x4a>
 800a786:	e7c9      	b.n	800a71c <__ssvfiscanf_r+0x1b0>
 800a788:	220a      	movs	r2, #10
 800a78a:	e7d7      	b.n	800a73c <__ssvfiscanf_r+0x1d0>
 800a78c:	4629      	mov	r1, r5
 800a78e:	4640      	mov	r0, r8
 800a790:	f000 fabc 	bl	800ad0c <__sccl>
 800a794:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a79a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a79c:	4605      	mov	r5, r0
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e7d7      	b.n	800a752 <__ssvfiscanf_r+0x1e6>
 800a7a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a8:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e7d1      	b.n	800a752 <__ssvfiscanf_r+0x1e6>
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	e7cf      	b.n	800a752 <__ssvfiscanf_r+0x1e6>
 800a7b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a7b4:	06c3      	lsls	r3, r0, #27
 800a7b6:	f53f aefe 	bmi.w	800a5b6 <__ssvfiscanf_r+0x4a>
 800a7ba:	9b00      	ldr	r3, [sp, #0]
 800a7bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7be:	1d19      	adds	r1, r3, #4
 800a7c0:	9100      	str	r1, [sp, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	07c0      	lsls	r0, r0, #31
 800a7c6:	bf4c      	ite	mi
 800a7c8:	801a      	strhmi	r2, [r3, #0]
 800a7ca:	601a      	strpl	r2, [r3, #0]
 800a7cc:	e6f3      	b.n	800a5b6 <__ssvfiscanf_r+0x4a>
 800a7ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4798      	blx	r3
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d0bf      	beq.n	800a75a <__ssvfiscanf_r+0x1ee>
 800a7da:	e79f      	b.n	800a71c <__ssvfiscanf_r+0x1b0>
 800a7dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7de:	3201      	adds	r2, #1
 800a7e0:	9245      	str	r2, [sp, #276]	@ 0x114
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	3a01      	subs	r2, #1
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	6062      	str	r2, [r4, #4]
 800a7ea:	dd02      	ble.n	800a7f2 <__ssvfiscanf_r+0x286>
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	e7b6      	b.n	800a760 <__ssvfiscanf_r+0x1f4>
 800a7f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	4798      	blx	r3
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d0b0      	beq.n	800a760 <__ssvfiscanf_r+0x1f4>
 800a7fe:	e78d      	b.n	800a71c <__ssvfiscanf_r+0x1b0>
 800a800:	2b04      	cmp	r3, #4
 800a802:	dc0f      	bgt.n	800a824 <__ssvfiscanf_r+0x2b8>
 800a804:	466b      	mov	r3, sp
 800a806:	4622      	mov	r2, r4
 800a808:	a941      	add	r1, sp, #260	@ 0x104
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 f87c 	bl	800a908 <_scanf_i>
 800a810:	e7b4      	b.n	800a77c <__ssvfiscanf_r+0x210>
 800a812:	bf00      	nop
 800a814:	0800a4bd 	.word	0x0800a4bd
 800a818:	0800a533 	.word	0x0800a533
 800a81c:	0800bd41 	.word	0x0800bd41
 800a820:	0800be47 	.word	0x0800be47
 800a824:	4b0a      	ldr	r3, [pc, #40]	@ (800a850 <__ssvfiscanf_r+0x2e4>)
 800a826:	2b00      	cmp	r3, #0
 800a828:	f43f aec5 	beq.w	800a5b6 <__ssvfiscanf_r+0x4a>
 800a82c:	466b      	mov	r3, sp
 800a82e:	4622      	mov	r2, r4
 800a830:	a941      	add	r1, sp, #260	@ 0x104
 800a832:	4630      	mov	r0, r6
 800a834:	f7fc fd78 	bl	8007328 <_scanf_float>
 800a838:	e7a0      	b.n	800a77c <__ssvfiscanf_r+0x210>
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	065b      	lsls	r3, r3, #25
 800a83e:	f53f af71 	bmi.w	800a724 <__ssvfiscanf_r+0x1b8>
 800a842:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a84c:	e7f9      	b.n	800a842 <__ssvfiscanf_r+0x2d6>
 800a84e:	bf00      	nop
 800a850:	08007329 	.word	0x08007329

0800a854 <_scanf_chars>:
 800a854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a858:	4615      	mov	r5, r2
 800a85a:	688a      	ldr	r2, [r1, #8]
 800a85c:	4680      	mov	r8, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	b932      	cbnz	r2, 800a870 <_scanf_chars+0x1c>
 800a862:	698a      	ldr	r2, [r1, #24]
 800a864:	2a00      	cmp	r2, #0
 800a866:	bf14      	ite	ne
 800a868:	f04f 32ff 	movne.w	r2, #4294967295
 800a86c:	2201      	moveq	r2, #1
 800a86e:	608a      	str	r2, [r1, #8]
 800a870:	6822      	ldr	r2, [r4, #0]
 800a872:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a904 <_scanf_chars+0xb0>
 800a876:	06d1      	lsls	r1, r2, #27
 800a878:	bf5f      	itttt	pl
 800a87a:	681a      	ldrpl	r2, [r3, #0]
 800a87c:	1d11      	addpl	r1, r2, #4
 800a87e:	6019      	strpl	r1, [r3, #0]
 800a880:	6816      	ldrpl	r6, [r2, #0]
 800a882:	2700      	movs	r7, #0
 800a884:	69a0      	ldr	r0, [r4, #24]
 800a886:	b188      	cbz	r0, 800a8ac <_scanf_chars+0x58>
 800a888:	2801      	cmp	r0, #1
 800a88a:	d107      	bne.n	800a89c <_scanf_chars+0x48>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	781a      	ldrb	r2, [r3, #0]
 800a890:	6963      	ldr	r3, [r4, #20]
 800a892:	5c9b      	ldrb	r3, [r3, r2]
 800a894:	b953      	cbnz	r3, 800a8ac <_scanf_chars+0x58>
 800a896:	2f00      	cmp	r7, #0
 800a898:	d031      	beq.n	800a8fe <_scanf_chars+0xaa>
 800a89a:	e022      	b.n	800a8e2 <_scanf_chars+0x8e>
 800a89c:	2802      	cmp	r0, #2
 800a89e:	d120      	bne.n	800a8e2 <_scanf_chars+0x8e>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a8a8:	071b      	lsls	r3, r3, #28
 800a8aa:	d41a      	bmi.n	800a8e2 <_scanf_chars+0x8e>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	06da      	lsls	r2, r3, #27
 800a8b0:	bf5e      	ittt	pl
 800a8b2:	682b      	ldrpl	r3, [r5, #0]
 800a8b4:	781b      	ldrbpl	r3, [r3, #0]
 800a8b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a8ba:	682a      	ldr	r2, [r5, #0]
 800a8bc:	686b      	ldr	r3, [r5, #4]
 800a8be:	3201      	adds	r2, #1
 800a8c0:	602a      	str	r2, [r5, #0]
 800a8c2:	68a2      	ldr	r2, [r4, #8]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	3a01      	subs	r2, #1
 800a8c8:	606b      	str	r3, [r5, #4]
 800a8ca:	3701      	adds	r7, #1
 800a8cc:	60a2      	str	r2, [r4, #8]
 800a8ce:	b142      	cbz	r2, 800a8e2 <_scanf_chars+0x8e>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dcd7      	bgt.n	800a884 <_scanf_chars+0x30>
 800a8d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4640      	mov	r0, r8
 800a8dc:	4798      	blx	r3
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d0d0      	beq.n	800a884 <_scanf_chars+0x30>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	f013 0310 	ands.w	r3, r3, #16
 800a8e8:	d105      	bne.n	800a8f6 <_scanf_chars+0xa2>
 800a8ea:	68e2      	ldr	r2, [r4, #12]
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	60e2      	str	r2, [r4, #12]
 800a8f0:	69a2      	ldr	r2, [r4, #24]
 800a8f2:	b102      	cbz	r2, 800a8f6 <_scanf_chars+0xa2>
 800a8f4:	7033      	strb	r3, [r6, #0]
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	443b      	add	r3, r7
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a902:	bf00      	nop
 800a904:	0800bd41 	.word	0x0800bd41

0800a908 <_scanf_i>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	4698      	mov	r8, r3
 800a90e:	4b74      	ldr	r3, [pc, #464]	@ (800aae0 <_scanf_i+0x1d8>)
 800a910:	460c      	mov	r4, r1
 800a912:	4682      	mov	sl, r0
 800a914:	4616      	mov	r6, r2
 800a916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a91a:	b087      	sub	sp, #28
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a922:	4b70      	ldr	r3, [pc, #448]	@ (800aae4 <_scanf_i+0x1dc>)
 800a924:	69a1      	ldr	r1, [r4, #24]
 800a926:	4a70      	ldr	r2, [pc, #448]	@ (800aae8 <_scanf_i+0x1e0>)
 800a928:	2903      	cmp	r1, #3
 800a92a:	bf08      	it	eq
 800a92c:	461a      	moveq	r2, r3
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	9201      	str	r2, [sp, #4]
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a938:	bf88      	it	hi
 800a93a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a93e:	4627      	mov	r7, r4
 800a940:	bf82      	ittt	hi
 800a942:	eb03 0905 	addhi.w	r9, r3, r5
 800a946:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a94a:	60a3      	strhi	r3, [r4, #8]
 800a94c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a950:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a954:	bf98      	it	ls
 800a956:	f04f 0900 	movls.w	r9, #0
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	463d      	mov	r5, r7
 800a95e:	f04f 0b00 	mov.w	fp, #0
 800a962:	6831      	ldr	r1, [r6, #0]
 800a964:	ab03      	add	r3, sp, #12
 800a966:	7809      	ldrb	r1, [r1, #0]
 800a968:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a96c:	2202      	movs	r2, #2
 800a96e:	f7f5 fc4f 	bl	8000210 <memchr>
 800a972:	b328      	cbz	r0, 800a9c0 <_scanf_i+0xb8>
 800a974:	f1bb 0f01 	cmp.w	fp, #1
 800a978:	d159      	bne.n	800aa2e <_scanf_i+0x126>
 800a97a:	6862      	ldr	r2, [r4, #4]
 800a97c:	b92a      	cbnz	r2, 800a98a <_scanf_i+0x82>
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	2108      	movs	r1, #8
 800a982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a986:	6061      	str	r1, [r4, #4]
 800a988:	6022      	str	r2, [r4, #0]
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	68a2      	ldr	r2, [r4, #8]
 800a994:	1e51      	subs	r1, r2, #1
 800a996:	60a1      	str	r1, [r4, #8]
 800a998:	b192      	cbz	r2, 800a9c0 <_scanf_i+0xb8>
 800a99a:	6832      	ldr	r2, [r6, #0]
 800a99c:	1c51      	adds	r1, r2, #1
 800a99e:	6031      	str	r1, [r6, #0]
 800a9a0:	7812      	ldrb	r2, [r2, #0]
 800a9a2:	f805 2b01 	strb.w	r2, [r5], #1
 800a9a6:	6872      	ldr	r2, [r6, #4]
 800a9a8:	3a01      	subs	r2, #1
 800a9aa:	2a00      	cmp	r2, #0
 800a9ac:	6072      	str	r2, [r6, #4]
 800a9ae:	dc07      	bgt.n	800a9c0 <_scanf_i+0xb8>
 800a9b0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4650      	mov	r0, sl
 800a9b8:	4790      	blx	r2
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	f040 8085 	bne.w	800aaca <_scanf_i+0x1c2>
 800a9c0:	f10b 0b01 	add.w	fp, fp, #1
 800a9c4:	f1bb 0f03 	cmp.w	fp, #3
 800a9c8:	d1cb      	bne.n	800a962 <_scanf_i+0x5a>
 800a9ca:	6863      	ldr	r3, [r4, #4]
 800a9cc:	b90b      	cbnz	r3, 800a9d2 <_scanf_i+0xca>
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	6063      	str	r3, [r4, #4]
 800a9d2:	6863      	ldr	r3, [r4, #4]
 800a9d4:	4945      	ldr	r1, [pc, #276]	@ (800aaec <_scanf_i+0x1e4>)
 800a9d6:	6960      	ldr	r0, [r4, #20]
 800a9d8:	1ac9      	subs	r1, r1, r3
 800a9da:	f000 f997 	bl	800ad0c <__sccl>
 800a9de:	f04f 0b00 	mov.w	fp, #0
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	6822      	ldr	r2, [r4, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d03d      	beq.n	800aa66 <_scanf_i+0x15e>
 800a9ea:	6831      	ldr	r1, [r6, #0]
 800a9ec:	6960      	ldr	r0, [r4, #20]
 800a9ee:	f891 c000 	ldrb.w	ip, [r1]
 800a9f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d035      	beq.n	800aa66 <_scanf_i+0x15e>
 800a9fa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a9fe:	d124      	bne.n	800aa4a <_scanf_i+0x142>
 800aa00:	0510      	lsls	r0, r2, #20
 800aa02:	d522      	bpl.n	800aa4a <_scanf_i+0x142>
 800aa04:	f10b 0b01 	add.w	fp, fp, #1
 800aa08:	f1b9 0f00 	cmp.w	r9, #0
 800aa0c:	d003      	beq.n	800aa16 <_scanf_i+0x10e>
 800aa0e:	3301      	adds	r3, #1
 800aa10:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	6873      	ldr	r3, [r6, #4]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	6073      	str	r3, [r6, #4]
 800aa1e:	dd1b      	ble.n	800aa58 <_scanf_i+0x150>
 800aa20:	6833      	ldr	r3, [r6, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	6033      	str	r3, [r6, #0]
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	60a3      	str	r3, [r4, #8]
 800aa2c:	e7d9      	b.n	800a9e2 <_scanf_i+0xda>
 800aa2e:	f1bb 0f02 	cmp.w	fp, #2
 800aa32:	d1ae      	bne.n	800a992 <_scanf_i+0x8a>
 800aa34:	6822      	ldr	r2, [r4, #0]
 800aa36:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800aa3a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800aa3e:	d1bf      	bne.n	800a9c0 <_scanf_i+0xb8>
 800aa40:	2110      	movs	r1, #16
 800aa42:	6061      	str	r1, [r4, #4]
 800aa44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa48:	e7a2      	b.n	800a990 <_scanf_i+0x88>
 800aa4a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800aa4e:	6022      	str	r2, [r4, #0]
 800aa50:	780b      	ldrb	r3, [r1, #0]
 800aa52:	f805 3b01 	strb.w	r3, [r5], #1
 800aa56:	e7de      	b.n	800aa16 <_scanf_i+0x10e>
 800aa58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4798      	blx	r3
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0df      	beq.n	800aa26 <_scanf_i+0x11e>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	05d9      	lsls	r1, r3, #23
 800aa6a:	d50d      	bpl.n	800aa88 <_scanf_i+0x180>
 800aa6c:	42bd      	cmp	r5, r7
 800aa6e:	d909      	bls.n	800aa84 <_scanf_i+0x17c>
 800aa70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4650      	mov	r0, sl
 800aa7c:	4798      	blx	r3
 800aa7e:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa82:	464d      	mov	r5, r9
 800aa84:	42bd      	cmp	r5, r7
 800aa86:	d028      	beq.n	800aada <_scanf_i+0x1d2>
 800aa88:	6822      	ldr	r2, [r4, #0]
 800aa8a:	f012 0210 	ands.w	r2, r2, #16
 800aa8e:	d113      	bne.n	800aab8 <_scanf_i+0x1b0>
 800aa90:	702a      	strb	r2, [r5, #0]
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	9e01      	ldr	r6, [sp, #4]
 800aa96:	4639      	mov	r1, r7
 800aa98:	4650      	mov	r0, sl
 800aa9a:	47b0      	blx	r6
 800aa9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa0:	6821      	ldr	r1, [r4, #0]
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	f8c8 2000 	str.w	r2, [r8]
 800aaa8:	f011 0f20 	tst.w	r1, #32
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	d00f      	beq.n	800aad0 <_scanf_i+0x1c8>
 800aab0:	6018      	str	r0, [r3, #0]
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	3301      	adds	r3, #1
 800aab6:	60e3      	str	r3, [r4, #12]
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	1bed      	subs	r5, r5, r7
 800aabc:	445d      	add	r5, fp
 800aabe:	442b      	add	r3, r5
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	2000      	movs	r0, #0
 800aac4:	b007      	add	sp, #28
 800aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaca:	f04f 0b00 	mov.w	fp, #0
 800aace:	e7ca      	b.n	800aa66 <_scanf_i+0x15e>
 800aad0:	07ca      	lsls	r2, r1, #31
 800aad2:	bf4c      	ite	mi
 800aad4:	8018      	strhmi	r0, [r3, #0]
 800aad6:	6018      	strpl	r0, [r3, #0]
 800aad8:	e7eb      	b.n	800aab2 <_scanf_i+0x1aa>
 800aada:	2001      	movs	r0, #1
 800aadc:	e7f2      	b.n	800aac4 <_scanf_i+0x1bc>
 800aade:	bf00      	nop
 800aae0:	0800ba9c 	.word	0x0800ba9c
 800aae4:	0800a209 	.word	0x0800a209
 800aae8:	0800b6cd 	.word	0x0800b6cd
 800aaec:	0800be62 	.word	0x0800be62

0800aaf0 <__sflush_r>:
 800aaf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	0716      	lsls	r6, r2, #28
 800aafa:	4605      	mov	r5, r0
 800aafc:	460c      	mov	r4, r1
 800aafe:	d454      	bmi.n	800abaa <__sflush_r+0xba>
 800ab00:	684b      	ldr	r3, [r1, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	dc02      	bgt.n	800ab0c <__sflush_r+0x1c>
 800ab06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	dd48      	ble.n	800ab9e <__sflush_r+0xae>
 800ab0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab0e:	2e00      	cmp	r6, #0
 800ab10:	d045      	beq.n	800ab9e <__sflush_r+0xae>
 800ab12:	2300      	movs	r3, #0
 800ab14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab18:	682f      	ldr	r7, [r5, #0]
 800ab1a:	6a21      	ldr	r1, [r4, #32]
 800ab1c:	602b      	str	r3, [r5, #0]
 800ab1e:	d030      	beq.n	800ab82 <__sflush_r+0x92>
 800ab20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	0759      	lsls	r1, r3, #29
 800ab26:	d505      	bpl.n	800ab34 <__sflush_r+0x44>
 800ab28:	6863      	ldr	r3, [r4, #4]
 800ab2a:	1ad2      	subs	r2, r2, r3
 800ab2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab2e:	b10b      	cbz	r3, 800ab34 <__sflush_r+0x44>
 800ab30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab32:	1ad2      	subs	r2, r2, r3
 800ab34:	2300      	movs	r3, #0
 800ab36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab38:	6a21      	ldr	r1, [r4, #32]
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	47b0      	blx	r6
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	d106      	bne.n	800ab52 <__sflush_r+0x62>
 800ab44:	6829      	ldr	r1, [r5, #0]
 800ab46:	291d      	cmp	r1, #29
 800ab48:	d82b      	bhi.n	800aba2 <__sflush_r+0xb2>
 800ab4a:	4a2a      	ldr	r2, [pc, #168]	@ (800abf4 <__sflush_r+0x104>)
 800ab4c:	410a      	asrs	r2, r1
 800ab4e:	07d6      	lsls	r6, r2, #31
 800ab50:	d427      	bmi.n	800aba2 <__sflush_r+0xb2>
 800ab52:	2200      	movs	r2, #0
 800ab54:	6062      	str	r2, [r4, #4]
 800ab56:	04d9      	lsls	r1, r3, #19
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	6022      	str	r2, [r4, #0]
 800ab5c:	d504      	bpl.n	800ab68 <__sflush_r+0x78>
 800ab5e:	1c42      	adds	r2, r0, #1
 800ab60:	d101      	bne.n	800ab66 <__sflush_r+0x76>
 800ab62:	682b      	ldr	r3, [r5, #0]
 800ab64:	b903      	cbnz	r3, 800ab68 <__sflush_r+0x78>
 800ab66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab6a:	602f      	str	r7, [r5, #0]
 800ab6c:	b1b9      	cbz	r1, 800ab9e <__sflush_r+0xae>
 800ab6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab72:	4299      	cmp	r1, r3
 800ab74:	d002      	beq.n	800ab7c <__sflush_r+0x8c>
 800ab76:	4628      	mov	r0, r5
 800ab78:	f7fd ffc6 	bl	8008b08 <_free_r>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab80:	e00d      	b.n	800ab9e <__sflush_r+0xae>
 800ab82:	2301      	movs	r3, #1
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b0      	blx	r6
 800ab88:	4602      	mov	r2, r0
 800ab8a:	1c50      	adds	r0, r2, #1
 800ab8c:	d1c9      	bne.n	800ab22 <__sflush_r+0x32>
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0c6      	beq.n	800ab22 <__sflush_r+0x32>
 800ab94:	2b1d      	cmp	r3, #29
 800ab96:	d001      	beq.n	800ab9c <__sflush_r+0xac>
 800ab98:	2b16      	cmp	r3, #22
 800ab9a:	d11e      	bne.n	800abda <__sflush_r+0xea>
 800ab9c:	602f      	str	r7, [r5, #0]
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e022      	b.n	800abe8 <__sflush_r+0xf8>
 800aba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	e01b      	b.n	800abe2 <__sflush_r+0xf2>
 800abaa:	690f      	ldr	r7, [r1, #16]
 800abac:	2f00      	cmp	r7, #0
 800abae:	d0f6      	beq.n	800ab9e <__sflush_r+0xae>
 800abb0:	0793      	lsls	r3, r2, #30
 800abb2:	680e      	ldr	r6, [r1, #0]
 800abb4:	bf08      	it	eq
 800abb6:	694b      	ldreq	r3, [r1, #20]
 800abb8:	600f      	str	r7, [r1, #0]
 800abba:	bf18      	it	ne
 800abbc:	2300      	movne	r3, #0
 800abbe:	eba6 0807 	sub.w	r8, r6, r7
 800abc2:	608b      	str	r3, [r1, #8]
 800abc4:	f1b8 0f00 	cmp.w	r8, #0
 800abc8:	dde9      	ble.n	800ab9e <__sflush_r+0xae>
 800abca:	6a21      	ldr	r1, [r4, #32]
 800abcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abce:	4643      	mov	r3, r8
 800abd0:	463a      	mov	r2, r7
 800abd2:	4628      	mov	r0, r5
 800abd4:	47b0      	blx	r6
 800abd6:	2800      	cmp	r0, #0
 800abd8:	dc08      	bgt.n	800abec <__sflush_r+0xfc>
 800abda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	f04f 30ff 	mov.w	r0, #4294967295
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abec:	4407      	add	r7, r0
 800abee:	eba8 0800 	sub.w	r8, r8, r0
 800abf2:	e7e7      	b.n	800abc4 <__sflush_r+0xd4>
 800abf4:	dfbffffe 	.word	0xdfbffffe

0800abf8 <_fflush_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	690b      	ldr	r3, [r1, #16]
 800abfc:	4605      	mov	r5, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	b913      	cbnz	r3, 800ac08 <_fflush_r+0x10>
 800ac02:	2500      	movs	r5, #0
 800ac04:	4628      	mov	r0, r5
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	b118      	cbz	r0, 800ac12 <_fflush_r+0x1a>
 800ac0a:	6a03      	ldr	r3, [r0, #32]
 800ac0c:	b90b      	cbnz	r3, 800ac12 <_fflush_r+0x1a>
 800ac0e:	f7fc fe2b 	bl	8007868 <__sinit>
 800ac12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0f3      	beq.n	800ac02 <_fflush_r+0xa>
 800ac1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac1c:	07d0      	lsls	r0, r2, #31
 800ac1e:	d404      	bmi.n	800ac2a <_fflush_r+0x32>
 800ac20:	0599      	lsls	r1, r3, #22
 800ac22:	d402      	bmi.n	800ac2a <_fflush_r+0x32>
 800ac24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac26:	f7fd f918 	bl	8007e5a <__retarget_lock_acquire_recursive>
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	4621      	mov	r1, r4
 800ac2e:	f7ff ff5f 	bl	800aaf0 <__sflush_r>
 800ac32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac34:	07da      	lsls	r2, r3, #31
 800ac36:	4605      	mov	r5, r0
 800ac38:	d4e4      	bmi.n	800ac04 <_fflush_r+0xc>
 800ac3a:	89a3      	ldrh	r3, [r4, #12]
 800ac3c:	059b      	lsls	r3, r3, #22
 800ac3e:	d4e1      	bmi.n	800ac04 <_fflush_r+0xc>
 800ac40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac42:	f7fd f90b 	bl	8007e5c <__retarget_lock_release_recursive>
 800ac46:	e7dd      	b.n	800ac04 <_fflush_r+0xc>

0800ac48 <__swhatbuf_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac50:	2900      	cmp	r1, #0
 800ac52:	b096      	sub	sp, #88	@ 0x58
 800ac54:	4615      	mov	r5, r2
 800ac56:	461e      	mov	r6, r3
 800ac58:	da0d      	bge.n	800ac76 <__swhatbuf_r+0x2e>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac60:	f04f 0100 	mov.w	r1, #0
 800ac64:	bf14      	ite	ne
 800ac66:	2340      	movne	r3, #64	@ 0x40
 800ac68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	6031      	str	r1, [r6, #0]
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	b016      	add	sp, #88	@ 0x58
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
 800ac76:	466a      	mov	r2, sp
 800ac78:	f000 f8e8 	bl	800ae4c <_fstat_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	dbec      	blt.n	800ac5a <__swhatbuf_r+0x12>
 800ac80:	9901      	ldr	r1, [sp, #4]
 800ac82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac8a:	4259      	negs	r1, r3
 800ac8c:	4159      	adcs	r1, r3
 800ac8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac92:	e7eb      	b.n	800ac6c <__swhatbuf_r+0x24>

0800ac94 <__smakebuf_r>:
 800ac94:	898b      	ldrh	r3, [r1, #12]
 800ac96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac98:	079d      	lsls	r5, r3, #30
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	d507      	bpl.n	800acb0 <__smakebuf_r+0x1c>
 800aca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	2301      	movs	r3, #1
 800acaa:	6163      	str	r3, [r4, #20]
 800acac:	b003      	add	sp, #12
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb0:	ab01      	add	r3, sp, #4
 800acb2:	466a      	mov	r2, sp
 800acb4:	f7ff ffc8 	bl	800ac48 <__swhatbuf_r>
 800acb8:	9f00      	ldr	r7, [sp, #0]
 800acba:	4605      	mov	r5, r0
 800acbc:	4639      	mov	r1, r7
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7fb fe4e 	bl	8006960 <_malloc_r>
 800acc4:	b948      	cbnz	r0, 800acda <__smakebuf_r+0x46>
 800acc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acca:	059a      	lsls	r2, r3, #22
 800accc:	d4ee      	bmi.n	800acac <__smakebuf_r+0x18>
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	f043 0302 	orr.w	r3, r3, #2
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	e7e2      	b.n	800aca0 <__smakebuf_r+0xc>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	6020      	str	r0, [r4, #0]
 800acde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acea:	b15b      	cbz	r3, 800ad04 <__smakebuf_r+0x70>
 800acec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 f8bd 	bl	800ae70 <_isatty_r>
 800acf6:	b128      	cbz	r0, 800ad04 <__smakebuf_r+0x70>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f023 0303 	bic.w	r3, r3, #3
 800acfe:	f043 0301 	orr.w	r3, r3, #1
 800ad02:	81a3      	strh	r3, [r4, #12]
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	431d      	orrs	r5, r3
 800ad08:	81a5      	strh	r5, [r4, #12]
 800ad0a:	e7cf      	b.n	800acac <__smakebuf_r+0x18>

0800ad0c <__sccl>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	780b      	ldrb	r3, [r1, #0]
 800ad10:	4604      	mov	r4, r0
 800ad12:	2b5e      	cmp	r3, #94	@ 0x5e
 800ad14:	bf0b      	itete	eq
 800ad16:	784b      	ldrbeq	r3, [r1, #1]
 800ad18:	1c4a      	addne	r2, r1, #1
 800ad1a:	1c8a      	addeq	r2, r1, #2
 800ad1c:	2100      	movne	r1, #0
 800ad1e:	bf08      	it	eq
 800ad20:	2101      	moveq	r1, #1
 800ad22:	3801      	subs	r0, #1
 800ad24:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ad28:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ad2c:	42a8      	cmp	r0, r5
 800ad2e:	d1fb      	bne.n	800ad28 <__sccl+0x1c>
 800ad30:	b90b      	cbnz	r3, 800ad36 <__sccl+0x2a>
 800ad32:	1e50      	subs	r0, r2, #1
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	f081 0101 	eor.w	r1, r1, #1
 800ad3a:	54e1      	strb	r1, [r4, r3]
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4602      	mov	r2, r0
 800ad40:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ad44:	2d2d      	cmp	r5, #45	@ 0x2d
 800ad46:	d005      	beq.n	800ad54 <__sccl+0x48>
 800ad48:	2d5d      	cmp	r5, #93	@ 0x5d
 800ad4a:	d016      	beq.n	800ad7a <__sccl+0x6e>
 800ad4c:	2d00      	cmp	r5, #0
 800ad4e:	d0f1      	beq.n	800ad34 <__sccl+0x28>
 800ad50:	462b      	mov	r3, r5
 800ad52:	e7f2      	b.n	800ad3a <__sccl+0x2e>
 800ad54:	7846      	ldrb	r6, [r0, #1]
 800ad56:	2e5d      	cmp	r6, #93	@ 0x5d
 800ad58:	d0fa      	beq.n	800ad50 <__sccl+0x44>
 800ad5a:	42b3      	cmp	r3, r6
 800ad5c:	dcf8      	bgt.n	800ad50 <__sccl+0x44>
 800ad5e:	3002      	adds	r0, #2
 800ad60:	461a      	mov	r2, r3
 800ad62:	3201      	adds	r2, #1
 800ad64:	4296      	cmp	r6, r2
 800ad66:	54a1      	strb	r1, [r4, r2]
 800ad68:	dcfb      	bgt.n	800ad62 <__sccl+0x56>
 800ad6a:	1af2      	subs	r2, r6, r3
 800ad6c:	3a01      	subs	r2, #1
 800ad6e:	1c5d      	adds	r5, r3, #1
 800ad70:	42b3      	cmp	r3, r6
 800ad72:	bfa8      	it	ge
 800ad74:	2200      	movge	r2, #0
 800ad76:	18ab      	adds	r3, r5, r2
 800ad78:	e7e1      	b.n	800ad3e <__sccl+0x32>
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	e7da      	b.n	800ad34 <__sccl+0x28>

0800ad7e <__submore>:
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	460c      	mov	r4, r1
 800ad84:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ad86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad8a:	4299      	cmp	r1, r3
 800ad8c:	d11d      	bne.n	800adca <__submore+0x4c>
 800ad8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ad92:	f7fb fde5 	bl	8006960 <_malloc_r>
 800ad96:	b918      	cbnz	r0, 800ada0 <__submore+0x22>
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ada4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ada6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800adaa:	6360      	str	r0, [r4, #52]	@ 0x34
 800adac:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800adb0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800adb4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800adb8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800adbc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800adc0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800adc4:	6020      	str	r0, [r4, #0]
 800adc6:	2000      	movs	r0, #0
 800adc8:	e7e8      	b.n	800ad9c <__submore+0x1e>
 800adca:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800adcc:	0077      	lsls	r7, r6, #1
 800adce:	463a      	mov	r2, r7
 800add0:	f000 fbdf 	bl	800b592 <_realloc_r>
 800add4:	4605      	mov	r5, r0
 800add6:	2800      	cmp	r0, #0
 800add8:	d0de      	beq.n	800ad98 <__submore+0x1a>
 800adda:	eb00 0806 	add.w	r8, r0, r6
 800adde:	4601      	mov	r1, r0
 800ade0:	4632      	mov	r2, r6
 800ade2:	4640      	mov	r0, r8
 800ade4:	f000 f854 	bl	800ae90 <memcpy>
 800ade8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800adec:	f8c4 8000 	str.w	r8, [r4]
 800adf0:	e7e9      	b.n	800adc6 <__submore+0x48>

0800adf2 <memmove>:
 800adf2:	4288      	cmp	r0, r1
 800adf4:	b510      	push	{r4, lr}
 800adf6:	eb01 0402 	add.w	r4, r1, r2
 800adfa:	d902      	bls.n	800ae02 <memmove+0x10>
 800adfc:	4284      	cmp	r4, r0
 800adfe:	4623      	mov	r3, r4
 800ae00:	d807      	bhi.n	800ae12 <memmove+0x20>
 800ae02:	1e43      	subs	r3, r0, #1
 800ae04:	42a1      	cmp	r1, r4
 800ae06:	d008      	beq.n	800ae1a <memmove+0x28>
 800ae08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae10:	e7f8      	b.n	800ae04 <memmove+0x12>
 800ae12:	4402      	add	r2, r0
 800ae14:	4601      	mov	r1, r0
 800ae16:	428a      	cmp	r2, r1
 800ae18:	d100      	bne.n	800ae1c <memmove+0x2a>
 800ae1a:	bd10      	pop	{r4, pc}
 800ae1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae24:	e7f7      	b.n	800ae16 <memmove+0x24>

0800ae26 <strncmp>:
 800ae26:	b510      	push	{r4, lr}
 800ae28:	b16a      	cbz	r2, 800ae46 <strncmp+0x20>
 800ae2a:	3901      	subs	r1, #1
 800ae2c:	1884      	adds	r4, r0, r2
 800ae2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d103      	bne.n	800ae42 <strncmp+0x1c>
 800ae3a:	42a0      	cmp	r0, r4
 800ae3c:	d001      	beq.n	800ae42 <strncmp+0x1c>
 800ae3e:	2a00      	cmp	r2, #0
 800ae40:	d1f5      	bne.n	800ae2e <strncmp+0x8>
 800ae42:	1ad0      	subs	r0, r2, r3
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	4610      	mov	r0, r2
 800ae48:	e7fc      	b.n	800ae44 <strncmp+0x1e>
	...

0800ae4c <_fstat_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d07      	ldr	r5, [pc, #28]	@ (800ae6c <_fstat_r+0x20>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	4611      	mov	r1, r2
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	f7f8 f80b 	bl	8002e74 <_fstat>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d102      	bne.n	800ae68 <_fstat_r+0x1c>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b103      	cbz	r3, 800ae68 <_fstat_r+0x1c>
 800ae66:	6023      	str	r3, [r4, #0]
 800ae68:	bd38      	pop	{r3, r4, r5, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20009f4c 	.word	0x20009f4c

0800ae70 <_isatty_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	@ (800ae8c <_isatty_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f8 f80a 	bl	8002e94 <_isatty>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_isatty_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_isatty_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20009f4c 	.word	0x20009f4c

0800ae90 <memcpy>:
 800ae90:	440a      	add	r2, r1
 800ae92:	4291      	cmp	r1, r2
 800ae94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae98:	d100      	bne.n	800ae9c <memcpy+0xc>
 800ae9a:	4770      	bx	lr
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aea6:	4291      	cmp	r1, r2
 800aea8:	d1f9      	bne.n	800ae9e <memcpy+0xe>
 800aeaa:	bd10      	pop	{r4, pc}
 800aeac:	0000      	movs	r0, r0
	...

0800aeb0 <nan>:
 800aeb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aeb8 <nan+0x8>
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	00000000 	.word	0x00000000
 800aebc:	7ff80000 	.word	0x7ff80000

0800aec0 <__assert_func>:
 800aec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aec2:	4614      	mov	r4, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b09      	ldr	r3, [pc, #36]	@ (800aeec <__assert_func+0x2c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4605      	mov	r5, r0
 800aecc:	68d8      	ldr	r0, [r3, #12]
 800aece:	b954      	cbnz	r4, 800aee6 <__assert_func+0x26>
 800aed0:	4b07      	ldr	r3, [pc, #28]	@ (800aef0 <__assert_func+0x30>)
 800aed2:	461c      	mov	r4, r3
 800aed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aed8:	9100      	str	r1, [sp, #0]
 800aeda:	462b      	mov	r3, r5
 800aedc:	4905      	ldr	r1, [pc, #20]	@ (800aef4 <__assert_func+0x34>)
 800aede:	f000 fc05 	bl	800b6ec <fiprintf>
 800aee2:	f000 fc15 	bl	800b710 <abort>
 800aee6:	4b04      	ldr	r3, [pc, #16]	@ (800aef8 <__assert_func+0x38>)
 800aee8:	e7f4      	b.n	800aed4 <__assert_func+0x14>
 800aeea:	bf00      	nop
 800aeec:	20001c7c 	.word	0x20001c7c
 800aef0:	0800beb0 	.word	0x0800beb0
 800aef4:	0800be82 	.word	0x0800be82
 800aef8:	0800be75 	.word	0x0800be75

0800aefc <rshift>:
 800aefc:	6903      	ldr	r3, [r0, #16]
 800aefe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800af02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800af0a:	f100 0414 	add.w	r4, r0, #20
 800af0e:	dd45      	ble.n	800af9c <rshift+0xa0>
 800af10:	f011 011f 	ands.w	r1, r1, #31
 800af14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800af18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800af1c:	d10c      	bne.n	800af38 <rshift+0x3c>
 800af1e:	f100 0710 	add.w	r7, r0, #16
 800af22:	4629      	mov	r1, r5
 800af24:	42b1      	cmp	r1, r6
 800af26:	d334      	bcc.n	800af92 <rshift+0x96>
 800af28:	1a9b      	subs	r3, r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	1eea      	subs	r2, r5, #3
 800af2e:	4296      	cmp	r6, r2
 800af30:	bf38      	it	cc
 800af32:	2300      	movcc	r3, #0
 800af34:	4423      	add	r3, r4
 800af36:	e015      	b.n	800af64 <rshift+0x68>
 800af38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800af3c:	f1c1 0820 	rsb	r8, r1, #32
 800af40:	40cf      	lsrs	r7, r1
 800af42:	f105 0e04 	add.w	lr, r5, #4
 800af46:	46a1      	mov	r9, r4
 800af48:	4576      	cmp	r6, lr
 800af4a:	46f4      	mov	ip, lr
 800af4c:	d815      	bhi.n	800af7a <rshift+0x7e>
 800af4e:	1a9a      	subs	r2, r3, r2
 800af50:	0092      	lsls	r2, r2, #2
 800af52:	3a04      	subs	r2, #4
 800af54:	3501      	adds	r5, #1
 800af56:	42ae      	cmp	r6, r5
 800af58:	bf38      	it	cc
 800af5a:	2200      	movcc	r2, #0
 800af5c:	18a3      	adds	r3, r4, r2
 800af5e:	50a7      	str	r7, [r4, r2]
 800af60:	b107      	cbz	r7, 800af64 <rshift+0x68>
 800af62:	3304      	adds	r3, #4
 800af64:	1b1a      	subs	r2, r3, r4
 800af66:	42a3      	cmp	r3, r4
 800af68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af6c:	bf08      	it	eq
 800af6e:	2300      	moveq	r3, #0
 800af70:	6102      	str	r2, [r0, #16]
 800af72:	bf08      	it	eq
 800af74:	6143      	streq	r3, [r0, #20]
 800af76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af7a:	f8dc c000 	ldr.w	ip, [ip]
 800af7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800af82:	ea4c 0707 	orr.w	r7, ip, r7
 800af86:	f849 7b04 	str.w	r7, [r9], #4
 800af8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af8e:	40cf      	lsrs	r7, r1
 800af90:	e7da      	b.n	800af48 <rshift+0x4c>
 800af92:	f851 cb04 	ldr.w	ip, [r1], #4
 800af96:	f847 cf04 	str.w	ip, [r7, #4]!
 800af9a:	e7c3      	b.n	800af24 <rshift+0x28>
 800af9c:	4623      	mov	r3, r4
 800af9e:	e7e1      	b.n	800af64 <rshift+0x68>

0800afa0 <__hexdig_fun>:
 800afa0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800afa4:	2b09      	cmp	r3, #9
 800afa6:	d802      	bhi.n	800afae <__hexdig_fun+0xe>
 800afa8:	3820      	subs	r0, #32
 800afaa:	b2c0      	uxtb	r0, r0
 800afac:	4770      	bx	lr
 800afae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	d801      	bhi.n	800afba <__hexdig_fun+0x1a>
 800afb6:	3847      	subs	r0, #71	@ 0x47
 800afb8:	e7f7      	b.n	800afaa <__hexdig_fun+0xa>
 800afba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800afbe:	2b05      	cmp	r3, #5
 800afc0:	d801      	bhi.n	800afc6 <__hexdig_fun+0x26>
 800afc2:	3827      	subs	r0, #39	@ 0x27
 800afc4:	e7f1      	b.n	800afaa <__hexdig_fun+0xa>
 800afc6:	2000      	movs	r0, #0
 800afc8:	4770      	bx	lr
	...

0800afcc <__gethex>:
 800afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	b085      	sub	sp, #20
 800afd2:	468a      	mov	sl, r1
 800afd4:	9302      	str	r3, [sp, #8]
 800afd6:	680b      	ldr	r3, [r1, #0]
 800afd8:	9001      	str	r0, [sp, #4]
 800afda:	4690      	mov	r8, r2
 800afdc:	1c9c      	adds	r4, r3, #2
 800afde:	46a1      	mov	r9, r4
 800afe0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800afe4:	2830      	cmp	r0, #48	@ 0x30
 800afe6:	d0fa      	beq.n	800afde <__gethex+0x12>
 800afe8:	eba9 0303 	sub.w	r3, r9, r3
 800afec:	f1a3 0b02 	sub.w	fp, r3, #2
 800aff0:	f7ff ffd6 	bl	800afa0 <__hexdig_fun>
 800aff4:	4605      	mov	r5, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d168      	bne.n	800b0cc <__gethex+0x100>
 800affa:	49a0      	ldr	r1, [pc, #640]	@ (800b27c <__gethex+0x2b0>)
 800affc:	2201      	movs	r2, #1
 800affe:	4648      	mov	r0, r9
 800b000:	f7ff ff11 	bl	800ae26 <strncmp>
 800b004:	4607      	mov	r7, r0
 800b006:	2800      	cmp	r0, #0
 800b008:	d167      	bne.n	800b0da <__gethex+0x10e>
 800b00a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b00e:	4626      	mov	r6, r4
 800b010:	f7ff ffc6 	bl	800afa0 <__hexdig_fun>
 800b014:	2800      	cmp	r0, #0
 800b016:	d062      	beq.n	800b0de <__gethex+0x112>
 800b018:	4623      	mov	r3, r4
 800b01a:	7818      	ldrb	r0, [r3, #0]
 800b01c:	2830      	cmp	r0, #48	@ 0x30
 800b01e:	4699      	mov	r9, r3
 800b020:	f103 0301 	add.w	r3, r3, #1
 800b024:	d0f9      	beq.n	800b01a <__gethex+0x4e>
 800b026:	f7ff ffbb 	bl	800afa0 <__hexdig_fun>
 800b02a:	fab0 f580 	clz	r5, r0
 800b02e:	096d      	lsrs	r5, r5, #5
 800b030:	f04f 0b01 	mov.w	fp, #1
 800b034:	464a      	mov	r2, r9
 800b036:	4616      	mov	r6, r2
 800b038:	3201      	adds	r2, #1
 800b03a:	7830      	ldrb	r0, [r6, #0]
 800b03c:	f7ff ffb0 	bl	800afa0 <__hexdig_fun>
 800b040:	2800      	cmp	r0, #0
 800b042:	d1f8      	bne.n	800b036 <__gethex+0x6a>
 800b044:	498d      	ldr	r1, [pc, #564]	@ (800b27c <__gethex+0x2b0>)
 800b046:	2201      	movs	r2, #1
 800b048:	4630      	mov	r0, r6
 800b04a:	f7ff feec 	bl	800ae26 <strncmp>
 800b04e:	2800      	cmp	r0, #0
 800b050:	d13f      	bne.n	800b0d2 <__gethex+0x106>
 800b052:	b944      	cbnz	r4, 800b066 <__gethex+0x9a>
 800b054:	1c74      	adds	r4, r6, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4616      	mov	r6, r2
 800b05a:	3201      	adds	r2, #1
 800b05c:	7830      	ldrb	r0, [r6, #0]
 800b05e:	f7ff ff9f 	bl	800afa0 <__hexdig_fun>
 800b062:	2800      	cmp	r0, #0
 800b064:	d1f8      	bne.n	800b058 <__gethex+0x8c>
 800b066:	1ba4      	subs	r4, r4, r6
 800b068:	00a7      	lsls	r7, r4, #2
 800b06a:	7833      	ldrb	r3, [r6, #0]
 800b06c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b070:	2b50      	cmp	r3, #80	@ 0x50
 800b072:	d13e      	bne.n	800b0f2 <__gethex+0x126>
 800b074:	7873      	ldrb	r3, [r6, #1]
 800b076:	2b2b      	cmp	r3, #43	@ 0x2b
 800b078:	d033      	beq.n	800b0e2 <__gethex+0x116>
 800b07a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b07c:	d034      	beq.n	800b0e8 <__gethex+0x11c>
 800b07e:	1c71      	adds	r1, r6, #1
 800b080:	2400      	movs	r4, #0
 800b082:	7808      	ldrb	r0, [r1, #0]
 800b084:	f7ff ff8c 	bl	800afa0 <__hexdig_fun>
 800b088:	1e43      	subs	r3, r0, #1
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b18      	cmp	r3, #24
 800b08e:	d830      	bhi.n	800b0f2 <__gethex+0x126>
 800b090:	f1a0 0210 	sub.w	r2, r0, #16
 800b094:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b098:	f7ff ff82 	bl	800afa0 <__hexdig_fun>
 800b09c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b0a0:	fa5f fc8c 	uxtb.w	ip, ip
 800b0a4:	f1bc 0f18 	cmp.w	ip, #24
 800b0a8:	f04f 030a 	mov.w	r3, #10
 800b0ac:	d91e      	bls.n	800b0ec <__gethex+0x120>
 800b0ae:	b104      	cbz	r4, 800b0b2 <__gethex+0xe6>
 800b0b0:	4252      	negs	r2, r2
 800b0b2:	4417      	add	r7, r2
 800b0b4:	f8ca 1000 	str.w	r1, [sl]
 800b0b8:	b1ed      	cbz	r5, 800b0f6 <__gethex+0x12a>
 800b0ba:	f1bb 0f00 	cmp.w	fp, #0
 800b0be:	bf0c      	ite	eq
 800b0c0:	2506      	moveq	r5, #6
 800b0c2:	2500      	movne	r5, #0
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	b005      	add	sp, #20
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	2500      	movs	r5, #0
 800b0ce:	462c      	mov	r4, r5
 800b0d0:	e7b0      	b.n	800b034 <__gethex+0x68>
 800b0d2:	2c00      	cmp	r4, #0
 800b0d4:	d1c7      	bne.n	800b066 <__gethex+0x9a>
 800b0d6:	4627      	mov	r7, r4
 800b0d8:	e7c7      	b.n	800b06a <__gethex+0x9e>
 800b0da:	464e      	mov	r6, r9
 800b0dc:	462f      	mov	r7, r5
 800b0de:	2501      	movs	r5, #1
 800b0e0:	e7c3      	b.n	800b06a <__gethex+0x9e>
 800b0e2:	2400      	movs	r4, #0
 800b0e4:	1cb1      	adds	r1, r6, #2
 800b0e6:	e7cc      	b.n	800b082 <__gethex+0xb6>
 800b0e8:	2401      	movs	r4, #1
 800b0ea:	e7fb      	b.n	800b0e4 <__gethex+0x118>
 800b0ec:	fb03 0002 	mla	r0, r3, r2, r0
 800b0f0:	e7ce      	b.n	800b090 <__gethex+0xc4>
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	e7de      	b.n	800b0b4 <__gethex+0xe8>
 800b0f6:	eba6 0309 	sub.w	r3, r6, r9
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	2b07      	cmp	r3, #7
 800b100:	dc0a      	bgt.n	800b118 <__gethex+0x14c>
 800b102:	9801      	ldr	r0, [sp, #4]
 800b104:	f7fd fd4a 	bl	8008b9c <_Balloc>
 800b108:	4604      	mov	r4, r0
 800b10a:	b940      	cbnz	r0, 800b11e <__gethex+0x152>
 800b10c:	4b5c      	ldr	r3, [pc, #368]	@ (800b280 <__gethex+0x2b4>)
 800b10e:	4602      	mov	r2, r0
 800b110:	21e4      	movs	r1, #228	@ 0xe4
 800b112:	485c      	ldr	r0, [pc, #368]	@ (800b284 <__gethex+0x2b8>)
 800b114:	f7ff fed4 	bl	800aec0 <__assert_func>
 800b118:	3101      	adds	r1, #1
 800b11a:	105b      	asrs	r3, r3, #1
 800b11c:	e7ef      	b.n	800b0fe <__gethex+0x132>
 800b11e:	f100 0a14 	add.w	sl, r0, #20
 800b122:	2300      	movs	r3, #0
 800b124:	4655      	mov	r5, sl
 800b126:	469b      	mov	fp, r3
 800b128:	45b1      	cmp	r9, r6
 800b12a:	d337      	bcc.n	800b19c <__gethex+0x1d0>
 800b12c:	f845 bb04 	str.w	fp, [r5], #4
 800b130:	eba5 050a 	sub.w	r5, r5, sl
 800b134:	10ad      	asrs	r5, r5, #2
 800b136:	6125      	str	r5, [r4, #16]
 800b138:	4658      	mov	r0, fp
 800b13a:	f7fd fe21 	bl	8008d80 <__hi0bits>
 800b13e:	016d      	lsls	r5, r5, #5
 800b140:	f8d8 6000 	ldr.w	r6, [r8]
 800b144:	1a2d      	subs	r5, r5, r0
 800b146:	42b5      	cmp	r5, r6
 800b148:	dd54      	ble.n	800b1f4 <__gethex+0x228>
 800b14a:	1bad      	subs	r5, r5, r6
 800b14c:	4629      	mov	r1, r5
 800b14e:	4620      	mov	r0, r4
 800b150:	f7fe f9b5 	bl	80094be <__any_on>
 800b154:	4681      	mov	r9, r0
 800b156:	b178      	cbz	r0, 800b178 <__gethex+0x1ac>
 800b158:	1e6b      	subs	r3, r5, #1
 800b15a:	1159      	asrs	r1, r3, #5
 800b15c:	f003 021f 	and.w	r2, r3, #31
 800b160:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b164:	f04f 0901 	mov.w	r9, #1
 800b168:	fa09 f202 	lsl.w	r2, r9, r2
 800b16c:	420a      	tst	r2, r1
 800b16e:	d003      	beq.n	800b178 <__gethex+0x1ac>
 800b170:	454b      	cmp	r3, r9
 800b172:	dc36      	bgt.n	800b1e2 <__gethex+0x216>
 800b174:	f04f 0902 	mov.w	r9, #2
 800b178:	4629      	mov	r1, r5
 800b17a:	4620      	mov	r0, r4
 800b17c:	f7ff febe 	bl	800aefc <rshift>
 800b180:	442f      	add	r7, r5
 800b182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b186:	42bb      	cmp	r3, r7
 800b188:	da42      	bge.n	800b210 <__gethex+0x244>
 800b18a:	9801      	ldr	r0, [sp, #4]
 800b18c:	4621      	mov	r1, r4
 800b18e:	f7fd fd45 	bl	8008c1c <_Bfree>
 800b192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b194:	2300      	movs	r3, #0
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	25a3      	movs	r5, #163	@ 0xa3
 800b19a:	e793      	b.n	800b0c4 <__gethex+0xf8>
 800b19c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b1a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b1a2:	d012      	beq.n	800b1ca <__gethex+0x1fe>
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d104      	bne.n	800b1b2 <__gethex+0x1e6>
 800b1a8:	f845 bb04 	str.w	fp, [r5], #4
 800b1ac:	f04f 0b00 	mov.w	fp, #0
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	7830      	ldrb	r0, [r6, #0]
 800b1b4:	9303      	str	r3, [sp, #12]
 800b1b6:	f7ff fef3 	bl	800afa0 <__hexdig_fun>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	f000 000f 	and.w	r0, r0, #15
 800b1c0:	4098      	lsls	r0, r3
 800b1c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	e7ae      	b.n	800b128 <__gethex+0x15c>
 800b1ca:	45b1      	cmp	r9, r6
 800b1cc:	d8ea      	bhi.n	800b1a4 <__gethex+0x1d8>
 800b1ce:	492b      	ldr	r1, [pc, #172]	@ (800b27c <__gethex+0x2b0>)
 800b1d0:	9303      	str	r3, [sp, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f7ff fe26 	bl	800ae26 <strncmp>
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d1e1      	bne.n	800b1a4 <__gethex+0x1d8>
 800b1e0:	e7a2      	b.n	800b128 <__gethex+0x15c>
 800b1e2:	1ea9      	subs	r1, r5, #2
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f7fe f96a 	bl	80094be <__any_on>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d0c2      	beq.n	800b174 <__gethex+0x1a8>
 800b1ee:	f04f 0903 	mov.w	r9, #3
 800b1f2:	e7c1      	b.n	800b178 <__gethex+0x1ac>
 800b1f4:	da09      	bge.n	800b20a <__gethex+0x23e>
 800b1f6:	1b75      	subs	r5, r6, r5
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	9801      	ldr	r0, [sp, #4]
 800b1fc:	462a      	mov	r2, r5
 800b1fe:	f7fd ff25 	bl	800904c <__lshift>
 800b202:	1b7f      	subs	r7, r7, r5
 800b204:	4604      	mov	r4, r0
 800b206:	f100 0a14 	add.w	sl, r0, #20
 800b20a:	f04f 0900 	mov.w	r9, #0
 800b20e:	e7b8      	b.n	800b182 <__gethex+0x1b6>
 800b210:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b214:	42bd      	cmp	r5, r7
 800b216:	dd6f      	ble.n	800b2f8 <__gethex+0x32c>
 800b218:	1bed      	subs	r5, r5, r7
 800b21a:	42ae      	cmp	r6, r5
 800b21c:	dc34      	bgt.n	800b288 <__gethex+0x2bc>
 800b21e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d022      	beq.n	800b26c <__gethex+0x2a0>
 800b226:	2b03      	cmp	r3, #3
 800b228:	d024      	beq.n	800b274 <__gethex+0x2a8>
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d115      	bne.n	800b25a <__gethex+0x28e>
 800b22e:	42ae      	cmp	r6, r5
 800b230:	d113      	bne.n	800b25a <__gethex+0x28e>
 800b232:	2e01      	cmp	r6, #1
 800b234:	d10b      	bne.n	800b24e <__gethex+0x282>
 800b236:	9a02      	ldr	r2, [sp, #8]
 800b238:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b23c:	6013      	str	r3, [r2, #0]
 800b23e:	2301      	movs	r3, #1
 800b240:	6123      	str	r3, [r4, #16]
 800b242:	f8ca 3000 	str.w	r3, [sl]
 800b246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b248:	2562      	movs	r5, #98	@ 0x62
 800b24a:	601c      	str	r4, [r3, #0]
 800b24c:	e73a      	b.n	800b0c4 <__gethex+0xf8>
 800b24e:	1e71      	subs	r1, r6, #1
 800b250:	4620      	mov	r0, r4
 800b252:	f7fe f934 	bl	80094be <__any_on>
 800b256:	2800      	cmp	r0, #0
 800b258:	d1ed      	bne.n	800b236 <__gethex+0x26a>
 800b25a:	9801      	ldr	r0, [sp, #4]
 800b25c:	4621      	mov	r1, r4
 800b25e:	f7fd fcdd 	bl	8008c1c <_Bfree>
 800b262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b264:	2300      	movs	r3, #0
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	2550      	movs	r5, #80	@ 0x50
 800b26a:	e72b      	b.n	800b0c4 <__gethex+0xf8>
 800b26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1f3      	bne.n	800b25a <__gethex+0x28e>
 800b272:	e7e0      	b.n	800b236 <__gethex+0x26a>
 800b274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1dd      	bne.n	800b236 <__gethex+0x26a>
 800b27a:	e7ee      	b.n	800b25a <__gethex+0x28e>
 800b27c:	0800bce8 	.word	0x0800bce8
 800b280:	0800bb7b 	.word	0x0800bb7b
 800b284:	0800beb1 	.word	0x0800beb1
 800b288:	1e6f      	subs	r7, r5, #1
 800b28a:	f1b9 0f00 	cmp.w	r9, #0
 800b28e:	d130      	bne.n	800b2f2 <__gethex+0x326>
 800b290:	b127      	cbz	r7, 800b29c <__gethex+0x2d0>
 800b292:	4639      	mov	r1, r7
 800b294:	4620      	mov	r0, r4
 800b296:	f7fe f912 	bl	80094be <__any_on>
 800b29a:	4681      	mov	r9, r0
 800b29c:	117a      	asrs	r2, r7, #5
 800b29e:	2301      	movs	r3, #1
 800b2a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b2a4:	f007 071f 	and.w	r7, r7, #31
 800b2a8:	40bb      	lsls	r3, r7
 800b2aa:	4213      	tst	r3, r2
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	bf18      	it	ne
 800b2b2:	f049 0902 	orrne.w	r9, r9, #2
 800b2b6:	f7ff fe21 	bl	800aefc <rshift>
 800b2ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b2be:	1b76      	subs	r6, r6, r5
 800b2c0:	2502      	movs	r5, #2
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	d047      	beq.n	800b358 <__gethex+0x38c>
 800b2c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d015      	beq.n	800b2fc <__gethex+0x330>
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d017      	beq.n	800b304 <__gethex+0x338>
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d109      	bne.n	800b2ec <__gethex+0x320>
 800b2d8:	f019 0f02 	tst.w	r9, #2
 800b2dc:	d006      	beq.n	800b2ec <__gethex+0x320>
 800b2de:	f8da 3000 	ldr.w	r3, [sl]
 800b2e2:	ea49 0903 	orr.w	r9, r9, r3
 800b2e6:	f019 0f01 	tst.w	r9, #1
 800b2ea:	d10e      	bne.n	800b30a <__gethex+0x33e>
 800b2ec:	f045 0510 	orr.w	r5, r5, #16
 800b2f0:	e032      	b.n	800b358 <__gethex+0x38c>
 800b2f2:	f04f 0901 	mov.w	r9, #1
 800b2f6:	e7d1      	b.n	800b29c <__gethex+0x2d0>
 800b2f8:	2501      	movs	r5, #1
 800b2fa:	e7e2      	b.n	800b2c2 <__gethex+0x2f6>
 800b2fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2fe:	f1c3 0301 	rsb	r3, r3, #1
 800b302:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0f0      	beq.n	800b2ec <__gethex+0x320>
 800b30a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b30e:	f104 0314 	add.w	r3, r4, #20
 800b312:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b316:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b31a:	f04f 0c00 	mov.w	ip, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f853 2b04 	ldr.w	r2, [r3], #4
 800b324:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b328:	d01b      	beq.n	800b362 <__gethex+0x396>
 800b32a:	3201      	adds	r2, #1
 800b32c:	6002      	str	r2, [r0, #0]
 800b32e:	2d02      	cmp	r5, #2
 800b330:	f104 0314 	add.w	r3, r4, #20
 800b334:	d13c      	bne.n	800b3b0 <__gethex+0x3e4>
 800b336:	f8d8 2000 	ldr.w	r2, [r8]
 800b33a:	3a01      	subs	r2, #1
 800b33c:	42b2      	cmp	r2, r6
 800b33e:	d109      	bne.n	800b354 <__gethex+0x388>
 800b340:	1171      	asrs	r1, r6, #5
 800b342:	2201      	movs	r2, #1
 800b344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b348:	f006 061f 	and.w	r6, r6, #31
 800b34c:	fa02 f606 	lsl.w	r6, r2, r6
 800b350:	421e      	tst	r6, r3
 800b352:	d13a      	bne.n	800b3ca <__gethex+0x3fe>
 800b354:	f045 0520 	orr.w	r5, r5, #32
 800b358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35a:	601c      	str	r4, [r3, #0]
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	601f      	str	r7, [r3, #0]
 800b360:	e6b0      	b.n	800b0c4 <__gethex+0xf8>
 800b362:	4299      	cmp	r1, r3
 800b364:	f843 cc04 	str.w	ip, [r3, #-4]
 800b368:	d8d9      	bhi.n	800b31e <__gethex+0x352>
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	459b      	cmp	fp, r3
 800b36e:	db17      	blt.n	800b3a0 <__gethex+0x3d4>
 800b370:	6861      	ldr	r1, [r4, #4]
 800b372:	9801      	ldr	r0, [sp, #4]
 800b374:	3101      	adds	r1, #1
 800b376:	f7fd fc11 	bl	8008b9c <_Balloc>
 800b37a:	4681      	mov	r9, r0
 800b37c:	b918      	cbnz	r0, 800b386 <__gethex+0x3ba>
 800b37e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e8 <__gethex+0x41c>)
 800b380:	4602      	mov	r2, r0
 800b382:	2184      	movs	r1, #132	@ 0x84
 800b384:	e6c5      	b.n	800b112 <__gethex+0x146>
 800b386:	6922      	ldr	r2, [r4, #16]
 800b388:	3202      	adds	r2, #2
 800b38a:	f104 010c 	add.w	r1, r4, #12
 800b38e:	0092      	lsls	r2, r2, #2
 800b390:	300c      	adds	r0, #12
 800b392:	f7ff fd7d 	bl	800ae90 <memcpy>
 800b396:	4621      	mov	r1, r4
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	f7fd fc3f 	bl	8008c1c <_Bfree>
 800b39e:	464c      	mov	r4, r9
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3a8:	6122      	str	r2, [r4, #16]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	615a      	str	r2, [r3, #20]
 800b3ae:	e7be      	b.n	800b32e <__gethex+0x362>
 800b3b0:	6922      	ldr	r2, [r4, #16]
 800b3b2:	455a      	cmp	r2, fp
 800b3b4:	dd0b      	ble.n	800b3ce <__gethex+0x402>
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f7ff fd9f 	bl	800aefc <rshift>
 800b3be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3c2:	3701      	adds	r7, #1
 800b3c4:	42bb      	cmp	r3, r7
 800b3c6:	f6ff aee0 	blt.w	800b18a <__gethex+0x1be>
 800b3ca:	2501      	movs	r5, #1
 800b3cc:	e7c2      	b.n	800b354 <__gethex+0x388>
 800b3ce:	f016 061f 	ands.w	r6, r6, #31
 800b3d2:	d0fa      	beq.n	800b3ca <__gethex+0x3fe>
 800b3d4:	4453      	add	r3, sl
 800b3d6:	f1c6 0620 	rsb	r6, r6, #32
 800b3da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3de:	f7fd fccf 	bl	8008d80 <__hi0bits>
 800b3e2:	42b0      	cmp	r0, r6
 800b3e4:	dbe7      	blt.n	800b3b6 <__gethex+0x3ea>
 800b3e6:	e7f0      	b.n	800b3ca <__gethex+0x3fe>
 800b3e8:	0800bb7b 	.word	0x0800bb7b

0800b3ec <L_shift>:
 800b3ec:	f1c2 0208 	rsb	r2, r2, #8
 800b3f0:	0092      	lsls	r2, r2, #2
 800b3f2:	b570      	push	{r4, r5, r6, lr}
 800b3f4:	f1c2 0620 	rsb	r6, r2, #32
 800b3f8:	6843      	ldr	r3, [r0, #4]
 800b3fa:	6804      	ldr	r4, [r0, #0]
 800b3fc:	fa03 f506 	lsl.w	r5, r3, r6
 800b400:	432c      	orrs	r4, r5
 800b402:	40d3      	lsrs	r3, r2
 800b404:	6004      	str	r4, [r0, #0]
 800b406:	f840 3f04 	str.w	r3, [r0, #4]!
 800b40a:	4288      	cmp	r0, r1
 800b40c:	d3f4      	bcc.n	800b3f8 <L_shift+0xc>
 800b40e:	bd70      	pop	{r4, r5, r6, pc}

0800b410 <__match>:
 800b410:	b530      	push	{r4, r5, lr}
 800b412:	6803      	ldr	r3, [r0, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b41a:	b914      	cbnz	r4, 800b422 <__match+0x12>
 800b41c:	6003      	str	r3, [r0, #0]
 800b41e:	2001      	movs	r0, #1
 800b420:	bd30      	pop	{r4, r5, pc}
 800b422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b426:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b42a:	2d19      	cmp	r5, #25
 800b42c:	bf98      	it	ls
 800b42e:	3220      	addls	r2, #32
 800b430:	42a2      	cmp	r2, r4
 800b432:	d0f0      	beq.n	800b416 <__match+0x6>
 800b434:	2000      	movs	r0, #0
 800b436:	e7f3      	b.n	800b420 <__match+0x10>

0800b438 <__hexnan>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	680b      	ldr	r3, [r1, #0]
 800b43e:	6801      	ldr	r1, [r0, #0]
 800b440:	115e      	asrs	r6, r3, #5
 800b442:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b446:	f013 031f 	ands.w	r3, r3, #31
 800b44a:	b087      	sub	sp, #28
 800b44c:	bf18      	it	ne
 800b44e:	3604      	addne	r6, #4
 800b450:	2500      	movs	r5, #0
 800b452:	1f37      	subs	r7, r6, #4
 800b454:	4682      	mov	sl, r0
 800b456:	4690      	mov	r8, r2
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b45e:	46b9      	mov	r9, r7
 800b460:	463c      	mov	r4, r7
 800b462:	9502      	str	r5, [sp, #8]
 800b464:	46ab      	mov	fp, r5
 800b466:	784a      	ldrb	r2, [r1, #1]
 800b468:	1c4b      	adds	r3, r1, #1
 800b46a:	9303      	str	r3, [sp, #12]
 800b46c:	b342      	cbz	r2, 800b4c0 <__hexnan+0x88>
 800b46e:	4610      	mov	r0, r2
 800b470:	9105      	str	r1, [sp, #20]
 800b472:	9204      	str	r2, [sp, #16]
 800b474:	f7ff fd94 	bl	800afa0 <__hexdig_fun>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d151      	bne.n	800b520 <__hexnan+0xe8>
 800b47c:	9a04      	ldr	r2, [sp, #16]
 800b47e:	9905      	ldr	r1, [sp, #20]
 800b480:	2a20      	cmp	r2, #32
 800b482:	d818      	bhi.n	800b4b6 <__hexnan+0x7e>
 800b484:	9b02      	ldr	r3, [sp, #8]
 800b486:	459b      	cmp	fp, r3
 800b488:	dd13      	ble.n	800b4b2 <__hexnan+0x7a>
 800b48a:	454c      	cmp	r4, r9
 800b48c:	d206      	bcs.n	800b49c <__hexnan+0x64>
 800b48e:	2d07      	cmp	r5, #7
 800b490:	dc04      	bgt.n	800b49c <__hexnan+0x64>
 800b492:	462a      	mov	r2, r5
 800b494:	4649      	mov	r1, r9
 800b496:	4620      	mov	r0, r4
 800b498:	f7ff ffa8 	bl	800b3ec <L_shift>
 800b49c:	4544      	cmp	r4, r8
 800b49e:	d952      	bls.n	800b546 <__hexnan+0x10e>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f1a4 0904 	sub.w	r9, r4, #4
 800b4a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4aa:	f8cd b008 	str.w	fp, [sp, #8]
 800b4ae:	464c      	mov	r4, r9
 800b4b0:	461d      	mov	r5, r3
 800b4b2:	9903      	ldr	r1, [sp, #12]
 800b4b4:	e7d7      	b.n	800b466 <__hexnan+0x2e>
 800b4b6:	2a29      	cmp	r2, #41	@ 0x29
 800b4b8:	d157      	bne.n	800b56a <__hexnan+0x132>
 800b4ba:	3102      	adds	r1, #2
 800b4bc:	f8ca 1000 	str.w	r1, [sl]
 800b4c0:	f1bb 0f00 	cmp.w	fp, #0
 800b4c4:	d051      	beq.n	800b56a <__hexnan+0x132>
 800b4c6:	454c      	cmp	r4, r9
 800b4c8:	d206      	bcs.n	800b4d8 <__hexnan+0xa0>
 800b4ca:	2d07      	cmp	r5, #7
 800b4cc:	dc04      	bgt.n	800b4d8 <__hexnan+0xa0>
 800b4ce:	462a      	mov	r2, r5
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f7ff ff8a 	bl	800b3ec <L_shift>
 800b4d8:	4544      	cmp	r4, r8
 800b4da:	d936      	bls.n	800b54a <__hexnan+0x112>
 800b4dc:	f1a8 0204 	sub.w	r2, r8, #4
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ea:	429f      	cmp	r7, r3
 800b4ec:	d2f9      	bcs.n	800b4e2 <__hexnan+0xaa>
 800b4ee:	1b3b      	subs	r3, r7, r4
 800b4f0:	f023 0303 	bic.w	r3, r3, #3
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	3401      	adds	r4, #1
 800b4f8:	3e03      	subs	r6, #3
 800b4fa:	42b4      	cmp	r4, r6
 800b4fc:	bf88      	it	hi
 800b4fe:	2304      	movhi	r3, #4
 800b500:	4443      	add	r3, r8
 800b502:	2200      	movs	r2, #0
 800b504:	f843 2b04 	str.w	r2, [r3], #4
 800b508:	429f      	cmp	r7, r3
 800b50a:	d2fb      	bcs.n	800b504 <__hexnan+0xcc>
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	b91b      	cbnz	r3, 800b518 <__hexnan+0xe0>
 800b510:	4547      	cmp	r7, r8
 800b512:	d128      	bne.n	800b566 <__hexnan+0x12e>
 800b514:	2301      	movs	r3, #1
 800b516:	603b      	str	r3, [r7, #0]
 800b518:	2005      	movs	r0, #5
 800b51a:	b007      	add	sp, #28
 800b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	3501      	adds	r5, #1
 800b522:	2d08      	cmp	r5, #8
 800b524:	f10b 0b01 	add.w	fp, fp, #1
 800b528:	dd06      	ble.n	800b538 <__hexnan+0x100>
 800b52a:	4544      	cmp	r4, r8
 800b52c:	d9c1      	bls.n	800b4b2 <__hexnan+0x7a>
 800b52e:	2300      	movs	r3, #0
 800b530:	f844 3c04 	str.w	r3, [r4, #-4]
 800b534:	2501      	movs	r5, #1
 800b536:	3c04      	subs	r4, #4
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	f000 000f 	and.w	r0, r0, #15
 800b53e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b542:	6020      	str	r0, [r4, #0]
 800b544:	e7b5      	b.n	800b4b2 <__hexnan+0x7a>
 800b546:	2508      	movs	r5, #8
 800b548:	e7b3      	b.n	800b4b2 <__hexnan+0x7a>
 800b54a:	9b01      	ldr	r3, [sp, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0dd      	beq.n	800b50c <__hexnan+0xd4>
 800b550:	f1c3 0320 	rsb	r3, r3, #32
 800b554:	f04f 32ff 	mov.w	r2, #4294967295
 800b558:	40da      	lsrs	r2, r3
 800b55a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b55e:	4013      	ands	r3, r2
 800b560:	f846 3c04 	str.w	r3, [r6, #-4]
 800b564:	e7d2      	b.n	800b50c <__hexnan+0xd4>
 800b566:	3f04      	subs	r7, #4
 800b568:	e7d0      	b.n	800b50c <__hexnan+0xd4>
 800b56a:	2004      	movs	r0, #4
 800b56c:	e7d5      	b.n	800b51a <__hexnan+0xe2>

0800b56e <__ascii_mbtowc>:
 800b56e:	b082      	sub	sp, #8
 800b570:	b901      	cbnz	r1, 800b574 <__ascii_mbtowc+0x6>
 800b572:	a901      	add	r1, sp, #4
 800b574:	b142      	cbz	r2, 800b588 <__ascii_mbtowc+0x1a>
 800b576:	b14b      	cbz	r3, 800b58c <__ascii_mbtowc+0x1e>
 800b578:	7813      	ldrb	r3, [r2, #0]
 800b57a:	600b      	str	r3, [r1, #0]
 800b57c:	7812      	ldrb	r2, [r2, #0]
 800b57e:	1e10      	subs	r0, r2, #0
 800b580:	bf18      	it	ne
 800b582:	2001      	movne	r0, #1
 800b584:	b002      	add	sp, #8
 800b586:	4770      	bx	lr
 800b588:	4610      	mov	r0, r2
 800b58a:	e7fb      	b.n	800b584 <__ascii_mbtowc+0x16>
 800b58c:	f06f 0001 	mvn.w	r0, #1
 800b590:	e7f8      	b.n	800b584 <__ascii_mbtowc+0x16>

0800b592 <_realloc_r>:
 800b592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b596:	4680      	mov	r8, r0
 800b598:	4615      	mov	r5, r2
 800b59a:	460c      	mov	r4, r1
 800b59c:	b921      	cbnz	r1, 800b5a8 <_realloc_r+0x16>
 800b59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	f7fb b9dc 	b.w	8006960 <_malloc_r>
 800b5a8:	b92a      	cbnz	r2, 800b5b6 <_realloc_r+0x24>
 800b5aa:	f7fd faad 	bl	8008b08 <_free_r>
 800b5ae:	2400      	movs	r4, #0
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b6:	f000 f8b2 	bl	800b71e <_malloc_usable_size_r>
 800b5ba:	4285      	cmp	r5, r0
 800b5bc:	4606      	mov	r6, r0
 800b5be:	d802      	bhi.n	800b5c6 <_realloc_r+0x34>
 800b5c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b5c4:	d8f4      	bhi.n	800b5b0 <_realloc_r+0x1e>
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	f7fb f9c9 	bl	8006960 <_malloc_r>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d0ec      	beq.n	800b5ae <_realloc_r+0x1c>
 800b5d4:	42b5      	cmp	r5, r6
 800b5d6:	462a      	mov	r2, r5
 800b5d8:	4621      	mov	r1, r4
 800b5da:	bf28      	it	cs
 800b5dc:	4632      	movcs	r2, r6
 800b5de:	f7ff fc57 	bl	800ae90 <memcpy>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	f7fd fa8f 	bl	8008b08 <_free_r>
 800b5ea:	463c      	mov	r4, r7
 800b5ec:	e7e0      	b.n	800b5b0 <_realloc_r+0x1e>
	...

0800b5f0 <_strtoul_l.constprop.0>:
 800b5f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	4e34      	ldr	r6, [pc, #208]	@ (800b6c8 <_strtoul_l.constprop.0+0xd8>)
 800b5f6:	4686      	mov	lr, r0
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b600:	5d37      	ldrb	r7, [r6, r4]
 800b602:	f017 0708 	ands.w	r7, r7, #8
 800b606:	d1f8      	bne.n	800b5fa <_strtoul_l.constprop.0+0xa>
 800b608:	2c2d      	cmp	r4, #45	@ 0x2d
 800b60a:	d12f      	bne.n	800b66c <_strtoul_l.constprop.0+0x7c>
 800b60c:	782c      	ldrb	r4, [r5, #0]
 800b60e:	2701      	movs	r7, #1
 800b610:	1c85      	adds	r5, r0, #2
 800b612:	f033 0010 	bics.w	r0, r3, #16
 800b616:	d109      	bne.n	800b62c <_strtoul_l.constprop.0+0x3c>
 800b618:	2c30      	cmp	r4, #48	@ 0x30
 800b61a:	d12c      	bne.n	800b676 <_strtoul_l.constprop.0+0x86>
 800b61c:	7828      	ldrb	r0, [r5, #0]
 800b61e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b622:	2858      	cmp	r0, #88	@ 0x58
 800b624:	d127      	bne.n	800b676 <_strtoul_l.constprop.0+0x86>
 800b626:	786c      	ldrb	r4, [r5, #1]
 800b628:	2310      	movs	r3, #16
 800b62a:	3502      	adds	r5, #2
 800b62c:	f04f 38ff 	mov.w	r8, #4294967295
 800b630:	2600      	movs	r6, #0
 800b632:	fbb8 f8f3 	udiv	r8, r8, r3
 800b636:	fb03 f908 	mul.w	r9, r3, r8
 800b63a:	ea6f 0909 	mvn.w	r9, r9
 800b63e:	4630      	mov	r0, r6
 800b640:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b644:	f1bc 0f09 	cmp.w	ip, #9
 800b648:	d81c      	bhi.n	800b684 <_strtoul_l.constprop.0+0x94>
 800b64a:	4664      	mov	r4, ip
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	dd2a      	ble.n	800b6a6 <_strtoul_l.constprop.0+0xb6>
 800b650:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b654:	d007      	beq.n	800b666 <_strtoul_l.constprop.0+0x76>
 800b656:	4580      	cmp	r8, r0
 800b658:	d322      	bcc.n	800b6a0 <_strtoul_l.constprop.0+0xb0>
 800b65a:	d101      	bne.n	800b660 <_strtoul_l.constprop.0+0x70>
 800b65c:	45a1      	cmp	r9, r4
 800b65e:	db1f      	blt.n	800b6a0 <_strtoul_l.constprop.0+0xb0>
 800b660:	fb00 4003 	mla	r0, r0, r3, r4
 800b664:	2601      	movs	r6, #1
 800b666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b66a:	e7e9      	b.n	800b640 <_strtoul_l.constprop.0+0x50>
 800b66c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b66e:	bf04      	itt	eq
 800b670:	782c      	ldrbeq	r4, [r5, #0]
 800b672:	1c85      	addeq	r5, r0, #2
 800b674:	e7cd      	b.n	800b612 <_strtoul_l.constprop.0+0x22>
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1d8      	bne.n	800b62c <_strtoul_l.constprop.0+0x3c>
 800b67a:	2c30      	cmp	r4, #48	@ 0x30
 800b67c:	bf0c      	ite	eq
 800b67e:	2308      	moveq	r3, #8
 800b680:	230a      	movne	r3, #10
 800b682:	e7d3      	b.n	800b62c <_strtoul_l.constprop.0+0x3c>
 800b684:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b688:	f1bc 0f19 	cmp.w	ip, #25
 800b68c:	d801      	bhi.n	800b692 <_strtoul_l.constprop.0+0xa2>
 800b68e:	3c37      	subs	r4, #55	@ 0x37
 800b690:	e7dc      	b.n	800b64c <_strtoul_l.constprop.0+0x5c>
 800b692:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b696:	f1bc 0f19 	cmp.w	ip, #25
 800b69a:	d804      	bhi.n	800b6a6 <_strtoul_l.constprop.0+0xb6>
 800b69c:	3c57      	subs	r4, #87	@ 0x57
 800b69e:	e7d5      	b.n	800b64c <_strtoul_l.constprop.0+0x5c>
 800b6a0:	f04f 36ff 	mov.w	r6, #4294967295
 800b6a4:	e7df      	b.n	800b666 <_strtoul_l.constprop.0+0x76>
 800b6a6:	1c73      	adds	r3, r6, #1
 800b6a8:	d106      	bne.n	800b6b8 <_strtoul_l.constprop.0+0xc8>
 800b6aa:	2322      	movs	r3, #34	@ 0x22
 800b6ac:	f8ce 3000 	str.w	r3, [lr]
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	b932      	cbnz	r2, 800b6c2 <_strtoul_l.constprop.0+0xd2>
 800b6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6b8:	b107      	cbz	r7, 800b6bc <_strtoul_l.constprop.0+0xcc>
 800b6ba:	4240      	negs	r0, r0
 800b6bc:	2a00      	cmp	r2, #0
 800b6be:	d0f9      	beq.n	800b6b4 <_strtoul_l.constprop.0+0xc4>
 800b6c0:	b106      	cbz	r6, 800b6c4 <_strtoul_l.constprop.0+0xd4>
 800b6c2:	1e69      	subs	r1, r5, #1
 800b6c4:	6011      	str	r1, [r2, #0]
 800b6c6:	e7f5      	b.n	800b6b4 <_strtoul_l.constprop.0+0xc4>
 800b6c8:	0800bd41 	.word	0x0800bd41

0800b6cc <_strtoul_r>:
 800b6cc:	f7ff bf90 	b.w	800b5f0 <_strtoul_l.constprop.0>

0800b6d0 <__ascii_wctomb>:
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	4608      	mov	r0, r1
 800b6d4:	b141      	cbz	r1, 800b6e8 <__ascii_wctomb+0x18>
 800b6d6:	2aff      	cmp	r2, #255	@ 0xff
 800b6d8:	d904      	bls.n	800b6e4 <__ascii_wctomb+0x14>
 800b6da:	228a      	movs	r2, #138	@ 0x8a
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e2:	4770      	bx	lr
 800b6e4:	700a      	strb	r2, [r1, #0]
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	4770      	bx	lr
	...

0800b6ec <fiprintf>:
 800b6ec:	b40e      	push	{r1, r2, r3}
 800b6ee:	b503      	push	{r0, r1, lr}
 800b6f0:	4601      	mov	r1, r0
 800b6f2:	ab03      	add	r3, sp, #12
 800b6f4:	4805      	ldr	r0, [pc, #20]	@ (800b70c <fiprintf+0x20>)
 800b6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6fa:	6800      	ldr	r0, [r0, #0]
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	f000 f83f 	bl	800b780 <_vfiprintf_r>
 800b702:	b002      	add	sp, #8
 800b704:	f85d eb04 	ldr.w	lr, [sp], #4
 800b708:	b003      	add	sp, #12
 800b70a:	4770      	bx	lr
 800b70c:	20001c7c 	.word	0x20001c7c

0800b710 <abort>:
 800b710:	b508      	push	{r3, lr}
 800b712:	2006      	movs	r0, #6
 800b714:	f000 f974 	bl	800ba00 <raise>
 800b718:	2001      	movs	r0, #1
 800b71a:	f7f7 fb5b 	bl	8002dd4 <_exit>

0800b71e <_malloc_usable_size_r>:
 800b71e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b722:	1f18      	subs	r0, r3, #4
 800b724:	2b00      	cmp	r3, #0
 800b726:	bfbc      	itt	lt
 800b728:	580b      	ldrlt	r3, [r1, r0]
 800b72a:	18c0      	addlt	r0, r0, r3
 800b72c:	4770      	bx	lr

0800b72e <__sfputc_r>:
 800b72e:	6893      	ldr	r3, [r2, #8]
 800b730:	3b01      	subs	r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	b410      	push	{r4}
 800b736:	6093      	str	r3, [r2, #8]
 800b738:	da08      	bge.n	800b74c <__sfputc_r+0x1e>
 800b73a:	6994      	ldr	r4, [r2, #24]
 800b73c:	42a3      	cmp	r3, r4
 800b73e:	db01      	blt.n	800b744 <__sfputc_r+0x16>
 800b740:	290a      	cmp	r1, #10
 800b742:	d103      	bne.n	800b74c <__sfputc_r+0x1e>
 800b744:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b748:	f7fc ba65 	b.w	8007c16 <__swbuf_r>
 800b74c:	6813      	ldr	r3, [r2, #0]
 800b74e:	1c58      	adds	r0, r3, #1
 800b750:	6010      	str	r0, [r2, #0]
 800b752:	7019      	strb	r1, [r3, #0]
 800b754:	4608      	mov	r0, r1
 800b756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <__sfputs_r>:
 800b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75e:	4606      	mov	r6, r0
 800b760:	460f      	mov	r7, r1
 800b762:	4614      	mov	r4, r2
 800b764:	18d5      	adds	r5, r2, r3
 800b766:	42ac      	cmp	r4, r5
 800b768:	d101      	bne.n	800b76e <__sfputs_r+0x12>
 800b76a:	2000      	movs	r0, #0
 800b76c:	e007      	b.n	800b77e <__sfputs_r+0x22>
 800b76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b772:	463a      	mov	r2, r7
 800b774:	4630      	mov	r0, r6
 800b776:	f7ff ffda 	bl	800b72e <__sfputc_r>
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	d1f3      	bne.n	800b766 <__sfputs_r+0xa>
 800b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b780 <_vfiprintf_r>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	460d      	mov	r5, r1
 800b786:	b09d      	sub	sp, #116	@ 0x74
 800b788:	4614      	mov	r4, r2
 800b78a:	4698      	mov	r8, r3
 800b78c:	4606      	mov	r6, r0
 800b78e:	b118      	cbz	r0, 800b798 <_vfiprintf_r+0x18>
 800b790:	6a03      	ldr	r3, [r0, #32]
 800b792:	b90b      	cbnz	r3, 800b798 <_vfiprintf_r+0x18>
 800b794:	f7fc f868 	bl	8007868 <__sinit>
 800b798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b79a:	07d9      	lsls	r1, r3, #31
 800b79c:	d405      	bmi.n	800b7aa <_vfiprintf_r+0x2a>
 800b79e:	89ab      	ldrh	r3, [r5, #12]
 800b7a0:	059a      	lsls	r2, r3, #22
 800b7a2:	d402      	bmi.n	800b7aa <_vfiprintf_r+0x2a>
 800b7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a6:	f7fc fb58 	bl	8007e5a <__retarget_lock_acquire_recursive>
 800b7aa:	89ab      	ldrh	r3, [r5, #12]
 800b7ac:	071b      	lsls	r3, r3, #28
 800b7ae:	d501      	bpl.n	800b7b4 <_vfiprintf_r+0x34>
 800b7b0:	692b      	ldr	r3, [r5, #16]
 800b7b2:	b99b      	cbnz	r3, 800b7dc <_vfiprintf_r+0x5c>
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7fc fa6c 	bl	8007c94 <__swsetup_r>
 800b7bc:	b170      	cbz	r0, 800b7dc <_vfiprintf_r+0x5c>
 800b7be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7c0:	07dc      	lsls	r4, r3, #31
 800b7c2:	d504      	bpl.n	800b7ce <_vfiprintf_r+0x4e>
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c8:	b01d      	add	sp, #116	@ 0x74
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	89ab      	ldrh	r3, [r5, #12]
 800b7d0:	0598      	lsls	r0, r3, #22
 800b7d2:	d4f7      	bmi.n	800b7c4 <_vfiprintf_r+0x44>
 800b7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7d6:	f7fc fb41 	bl	8007e5c <__retarget_lock_release_recursive>
 800b7da:	e7f3      	b.n	800b7c4 <_vfiprintf_r+0x44>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e0:	2320      	movs	r3, #32
 800b7e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ea:	2330      	movs	r3, #48	@ 0x30
 800b7ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b99c <_vfiprintf_r+0x21c>
 800b7f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f4:	f04f 0901 	mov.w	r9, #1
 800b7f8:	4623      	mov	r3, r4
 800b7fa:	469a      	mov	sl, r3
 800b7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b800:	b10a      	cbz	r2, 800b806 <_vfiprintf_r+0x86>
 800b802:	2a25      	cmp	r2, #37	@ 0x25
 800b804:	d1f9      	bne.n	800b7fa <_vfiprintf_r+0x7a>
 800b806:	ebba 0b04 	subs.w	fp, sl, r4
 800b80a:	d00b      	beq.n	800b824 <_vfiprintf_r+0xa4>
 800b80c:	465b      	mov	r3, fp
 800b80e:	4622      	mov	r2, r4
 800b810:	4629      	mov	r1, r5
 800b812:	4630      	mov	r0, r6
 800b814:	f7ff ffa2 	bl	800b75c <__sfputs_r>
 800b818:	3001      	adds	r0, #1
 800b81a:	f000 80a7 	beq.w	800b96c <_vfiprintf_r+0x1ec>
 800b81e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b820:	445a      	add	r2, fp
 800b822:	9209      	str	r2, [sp, #36]	@ 0x24
 800b824:	f89a 3000 	ldrb.w	r3, [sl]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 809f 	beq.w	800b96c <_vfiprintf_r+0x1ec>
 800b82e:	2300      	movs	r3, #0
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b838:	f10a 0a01 	add.w	sl, sl, #1
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	9307      	str	r3, [sp, #28]
 800b840:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b844:	931a      	str	r3, [sp, #104]	@ 0x68
 800b846:	4654      	mov	r4, sl
 800b848:	2205      	movs	r2, #5
 800b84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84e:	4853      	ldr	r0, [pc, #332]	@ (800b99c <_vfiprintf_r+0x21c>)
 800b850:	f7f4 fcde 	bl	8000210 <memchr>
 800b854:	9a04      	ldr	r2, [sp, #16]
 800b856:	b9d8      	cbnz	r0, 800b890 <_vfiprintf_r+0x110>
 800b858:	06d1      	lsls	r1, r2, #27
 800b85a:	bf44      	itt	mi
 800b85c:	2320      	movmi	r3, #32
 800b85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b862:	0713      	lsls	r3, r2, #28
 800b864:	bf44      	itt	mi
 800b866:	232b      	movmi	r3, #43	@ 0x2b
 800b868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b86c:	f89a 3000 	ldrb.w	r3, [sl]
 800b870:	2b2a      	cmp	r3, #42	@ 0x2a
 800b872:	d015      	beq.n	800b8a0 <_vfiprintf_r+0x120>
 800b874:	9a07      	ldr	r2, [sp, #28]
 800b876:	4654      	mov	r4, sl
 800b878:	2000      	movs	r0, #0
 800b87a:	f04f 0c0a 	mov.w	ip, #10
 800b87e:	4621      	mov	r1, r4
 800b880:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b884:	3b30      	subs	r3, #48	@ 0x30
 800b886:	2b09      	cmp	r3, #9
 800b888:	d94b      	bls.n	800b922 <_vfiprintf_r+0x1a2>
 800b88a:	b1b0      	cbz	r0, 800b8ba <_vfiprintf_r+0x13a>
 800b88c:	9207      	str	r2, [sp, #28]
 800b88e:	e014      	b.n	800b8ba <_vfiprintf_r+0x13a>
 800b890:	eba0 0308 	sub.w	r3, r0, r8
 800b894:	fa09 f303 	lsl.w	r3, r9, r3
 800b898:	4313      	orrs	r3, r2
 800b89a:	9304      	str	r3, [sp, #16]
 800b89c:	46a2      	mov	sl, r4
 800b89e:	e7d2      	b.n	800b846 <_vfiprintf_r+0xc6>
 800b8a0:	9b03      	ldr	r3, [sp, #12]
 800b8a2:	1d19      	adds	r1, r3, #4
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	9103      	str	r1, [sp, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bfbb      	ittet	lt
 800b8ac:	425b      	neglt	r3, r3
 800b8ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b2:	9307      	strge	r3, [sp, #28]
 800b8b4:	9307      	strlt	r3, [sp, #28]
 800b8b6:	bfb8      	it	lt
 800b8b8:	9204      	strlt	r2, [sp, #16]
 800b8ba:	7823      	ldrb	r3, [r4, #0]
 800b8bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8be:	d10a      	bne.n	800b8d6 <_vfiprintf_r+0x156>
 800b8c0:	7863      	ldrb	r3, [r4, #1]
 800b8c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c4:	d132      	bne.n	800b92c <_vfiprintf_r+0x1ac>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	1d1a      	adds	r2, r3, #4
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	9203      	str	r2, [sp, #12]
 800b8ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8d2:	3402      	adds	r4, #2
 800b8d4:	9305      	str	r3, [sp, #20]
 800b8d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9ac <_vfiprintf_r+0x22c>
 800b8da:	7821      	ldrb	r1, [r4, #0]
 800b8dc:	2203      	movs	r2, #3
 800b8de:	4650      	mov	r0, sl
 800b8e0:	f7f4 fc96 	bl	8000210 <memchr>
 800b8e4:	b138      	cbz	r0, 800b8f6 <_vfiprintf_r+0x176>
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	eba0 000a 	sub.w	r0, r0, sl
 800b8ec:	2240      	movs	r2, #64	@ 0x40
 800b8ee:	4082      	lsls	r2, r0
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	3401      	adds	r4, #1
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fa:	4829      	ldr	r0, [pc, #164]	@ (800b9a0 <_vfiprintf_r+0x220>)
 800b8fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b900:	2206      	movs	r2, #6
 800b902:	f7f4 fc85 	bl	8000210 <memchr>
 800b906:	2800      	cmp	r0, #0
 800b908:	d03f      	beq.n	800b98a <_vfiprintf_r+0x20a>
 800b90a:	4b26      	ldr	r3, [pc, #152]	@ (800b9a4 <_vfiprintf_r+0x224>)
 800b90c:	bb1b      	cbnz	r3, 800b956 <_vfiprintf_r+0x1d6>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	3307      	adds	r3, #7
 800b912:	f023 0307 	bic.w	r3, r3, #7
 800b916:	3308      	adds	r3, #8
 800b918:	9303      	str	r3, [sp, #12]
 800b91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91c:	443b      	add	r3, r7
 800b91e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b920:	e76a      	b.n	800b7f8 <_vfiprintf_r+0x78>
 800b922:	fb0c 3202 	mla	r2, ip, r2, r3
 800b926:	460c      	mov	r4, r1
 800b928:	2001      	movs	r0, #1
 800b92a:	e7a8      	b.n	800b87e <_vfiprintf_r+0xfe>
 800b92c:	2300      	movs	r3, #0
 800b92e:	3401      	adds	r4, #1
 800b930:	9305      	str	r3, [sp, #20]
 800b932:	4619      	mov	r1, r3
 800b934:	f04f 0c0a 	mov.w	ip, #10
 800b938:	4620      	mov	r0, r4
 800b93a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93e:	3a30      	subs	r2, #48	@ 0x30
 800b940:	2a09      	cmp	r2, #9
 800b942:	d903      	bls.n	800b94c <_vfiprintf_r+0x1cc>
 800b944:	2b00      	cmp	r3, #0
 800b946:	d0c6      	beq.n	800b8d6 <_vfiprintf_r+0x156>
 800b948:	9105      	str	r1, [sp, #20]
 800b94a:	e7c4      	b.n	800b8d6 <_vfiprintf_r+0x156>
 800b94c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b950:	4604      	mov	r4, r0
 800b952:	2301      	movs	r3, #1
 800b954:	e7f0      	b.n	800b938 <_vfiprintf_r+0x1b8>
 800b956:	ab03      	add	r3, sp, #12
 800b958:	9300      	str	r3, [sp, #0]
 800b95a:	462a      	mov	r2, r5
 800b95c:	4b12      	ldr	r3, [pc, #72]	@ (800b9a8 <_vfiprintf_r+0x228>)
 800b95e:	a904      	add	r1, sp, #16
 800b960:	4630      	mov	r0, r6
 800b962:	f7fb f929 	bl	8006bb8 <_printf_float>
 800b966:	4607      	mov	r7, r0
 800b968:	1c78      	adds	r0, r7, #1
 800b96a:	d1d6      	bne.n	800b91a <_vfiprintf_r+0x19a>
 800b96c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b96e:	07d9      	lsls	r1, r3, #31
 800b970:	d405      	bmi.n	800b97e <_vfiprintf_r+0x1fe>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	059a      	lsls	r2, r3, #22
 800b976:	d402      	bmi.n	800b97e <_vfiprintf_r+0x1fe>
 800b978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b97a:	f7fc fa6f 	bl	8007e5c <__retarget_lock_release_recursive>
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	065b      	lsls	r3, r3, #25
 800b982:	f53f af1f 	bmi.w	800b7c4 <_vfiprintf_r+0x44>
 800b986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b988:	e71e      	b.n	800b7c8 <_vfiprintf_r+0x48>
 800b98a:	ab03      	add	r3, sp, #12
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	462a      	mov	r2, r5
 800b990:	4b05      	ldr	r3, [pc, #20]	@ (800b9a8 <_vfiprintf_r+0x228>)
 800b992:	a904      	add	r1, sp, #16
 800b994:	4630      	mov	r0, r6
 800b996:	f7fb fba7 	bl	80070e8 <_printf_i>
 800b99a:	e7e4      	b.n	800b966 <_vfiprintf_r+0x1e6>
 800b99c:	0800be41 	.word	0x0800be41
 800b9a0:	0800be4b 	.word	0x0800be4b
 800b9a4:	08006bb9 	.word	0x08006bb9
 800b9a8:	0800b75d 	.word	0x0800b75d
 800b9ac:	0800be47 	.word	0x0800be47

0800b9b0 <_raise_r>:
 800b9b0:	291f      	cmp	r1, #31
 800b9b2:	b538      	push	{r3, r4, r5, lr}
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	460c      	mov	r4, r1
 800b9b8:	d904      	bls.n	800b9c4 <_raise_r+0x14>
 800b9ba:	2316      	movs	r3, #22
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9c6:	b112      	cbz	r2, 800b9ce <_raise_r+0x1e>
 800b9c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9cc:	b94b      	cbnz	r3, 800b9e2 <_raise_r+0x32>
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f830 	bl	800ba34 <_getpid_r>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	4628      	mov	r0, r5
 800b9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9de:	f000 b817 	b.w	800ba10 <_kill_r>
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d00a      	beq.n	800b9fc <_raise_r+0x4c>
 800b9e6:	1c59      	adds	r1, r3, #1
 800b9e8:	d103      	bne.n	800b9f2 <_raise_r+0x42>
 800b9ea:	2316      	movs	r3, #22
 800b9ec:	6003      	str	r3, [r0, #0]
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	e7e7      	b.n	800b9c2 <_raise_r+0x12>
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	4798      	blx	r3
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	e7e0      	b.n	800b9c2 <_raise_r+0x12>

0800ba00 <raise>:
 800ba00:	4b02      	ldr	r3, [pc, #8]	@ (800ba0c <raise+0xc>)
 800ba02:	4601      	mov	r1, r0
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f7ff bfd3 	b.w	800b9b0 <_raise_r>
 800ba0a:	bf00      	nop
 800ba0c:	20001c7c 	.word	0x20001c7c

0800ba10 <_kill_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4d07      	ldr	r5, [pc, #28]	@ (800ba30 <_kill_r+0x20>)
 800ba14:	2300      	movs	r3, #0
 800ba16:	4604      	mov	r4, r0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	602b      	str	r3, [r5, #0]
 800ba1e:	f7f7 f9c9 	bl	8002db4 <_kill>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d102      	bne.n	800ba2c <_kill_r+0x1c>
 800ba26:	682b      	ldr	r3, [r5, #0]
 800ba28:	b103      	cbz	r3, 800ba2c <_kill_r+0x1c>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20009f4c 	.word	0x20009f4c

0800ba34 <_getpid_r>:
 800ba34:	f7f7 b9b6 	b.w	8002da4 <_getpid>

0800ba38 <_init>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	bf00      	nop
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr

0800ba44 <_fini>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr
